###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:09 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCD_DrawBitmap_M565.c                            #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCD_DrawBitmap_M565.c -D  #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCD_Dr #
#                          awBitmap_M565.lst                                  #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCD_Dra #
#                          wBitmap_M565.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_DrawBitmap_M565.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_DrawBitmap_M565.c
     16          Purpose     : Drawing routine for drawing a 16bpp bitmap
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "GUI_Private.h"
     22          #include "LCD_Private.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       Static code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _DrawBitmap_M565
     33          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          static void _DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_M565:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   \   00000E   8C..         MOV     ?V0 + 12,R4
   \   000010   8D..         MOV     ?V0 + 13,R5
   \   000012   7422         MOV     A,#0x22
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 3,A
   \   00001E   7424         MOV     A,#0x24
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 4,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 5,A
     35            const U16 * pData;
     36            int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
     37            GUI_USE_PARA(pLogPal);
     38            OldIndex = LCD_GetColorIndex();
   \   00002A                ; Setup parameters for call to function LCD_GetColorIndex
   \   00002A   12....       LCALL   ??LCD_GetColorIndex?relay
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   EA           MOV     A,R2
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EB           MOV     A,R3
   \   000036   F0           MOVX    @DPTR,A
     39            PrevIndex = OldIndex;
   \   000037   7408         MOV     A,#0x8
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E8           MOV     A,R0
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E9           MOV     A,R1
   \   000048   F0           MOVX    @DPTR,A
     40            pData = (const U16 *)pPixel;
   \   000049   7426         MOV     A,#0x26
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 6,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 7,A
     41            Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
   \   000055                ; Setup parameters for call to function LCD_GetFixedPaletteEx
   \   000055   90....       MOV     DPTR,#GUI_Context + 13
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ??LCD_GetFixedPaletteEx?relay
   \   00005F   8A..         MOV     ?V0 + 8,R2
   \   000061   8B..         MOV     ?V0 + 9,R3
     42            SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
   \   000063                ; Setup parameters for call to function LCD_GetSwapRBEx
   \   000063   90....       MOV     DPTR,#GUI_Context + 13
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   12....       LCALL   ??LCD_GetSwapRBEx?relay
     43            Mag = (xMag | yMag);
   \   00006D   742A         MOV     A,#0x2a
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000075   742C         MOV     A,#0x2c
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   48           ORL     A,R0
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   49           ORL     A,R1
   \   000080   F9           MOV     R1,A
     44            BytesPerLine = xsize * 2;
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   C3           CLR     C
   \   000084   33           RLC     A
   \   000085   FE           MOV     R6,A
   \   000086   E5..         MOV     A,?V0 + 3
   \   000088   33           RLC     A
   \   000089   FF           MOV     R7,A
     45            #if GUI_SUPPORT_MEMDEV == 0
     46            if ((Mode == 565) && (SwapRB == 1) && (Mag == 1)) {
   \   00008A   7435         MOV     A,#0x35
   \   00008C   65..         XRL     A,?V0 + 8
   \   00008E   7004         JNZ     ??_DrawBitmap_M565_0
   \   000090   7402         MOV     A,#0x2
   \   000092   65..         XRL     A,?V0 + 9
   \                     ??_DrawBitmap_M565_0:
   \   000094   7060         JNZ     ??_DrawBitmap_M565_1
   \   000096   7401         MOV     A,#0x1
   \   000098   6A           XRL     A,R2
   \   000099   7001         JNZ     ??_DrawBitmap_M565_2
   \   00009B   EB           MOV     A,R3
   \                     ??_DrawBitmap_M565_2:
   \   00009C   7058         JNZ     ??_DrawBitmap_M565_1
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   68           XRL     A,R0
   \   0000A1   7001         JNZ     ??_DrawBitmap_M565_3
   \   0000A3   E9           MOV     A,R1
   \                     ??_DrawBitmap_M565_3:
   \   0000A4   7050         JNZ     ??_DrawBitmap_M565_1
     47              UseDrawBitmap = 1;
     48            }
     49            #else
     50            if (GUI_Context.pDeviceAPI->pMemDevAPI) {
     51              if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
     52                  ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 1)))  && (Mag == 1)) {
     53                UseDrawBitmap = 1;
     54              }
     55            }
     56            #endif
     57            if (UseDrawBitmap) {
     58              LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
   \   0000A6                ; Setup parameters for call to function LCD_DrawBitmap
   \   0000A6   E4           CLR     A
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   F5..         MOV     ?V0 + 1,A
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   7428         MOV     A,#0x28
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B8   8E..         MOV     ?V0 + 0,R6
   \   0000BA   8F..         MOV     ?V0 + 1,R7
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   75..10       MOV     ?V0 + 0,#0x10
   \   0000C4   75..00       MOV     ?V0 + 1,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75..01       MOV     ?V0 + 0,#0x1
   \   0000CF   78..         MOV     R0,#?V0 + 0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   78..         MOV     R0,#?V0 + 4
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   78..         MOV     R0,#?V0 + 2
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   AC..         MOV     R4,?V0 + 12
   \   0000E5   AD..         MOV     R5,?V0 + 13
   \   0000E7   AA..         MOV     R2,?V0 + 14
   \   0000E9   AB..         MOV     R3,?V0 + 15
   \   0000EB   12....       LCALL   ??LCD_DrawBitmap?relay
   \   0000EE   7410         MOV     A,#0x10
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   02....       LJMP    ??_DrawBitmap_M565_4 & 0xFFFF
     59            } else {
     60              if (Mag == 1) {
   \                     ??_DrawBitmap_M565_1:
   \   0000F6   7401         MOV     A,#0x1
   \   0000F8   68           XRL     A,R0
   \   0000F9   7001         JNZ     ??_DrawBitmap_M565_5
   \   0000FB   E9           MOV     A,R1
   \                     ??_DrawBitmap_M565_5:
   \   0000FC   6003         JZ      $+5
   \   0000FE   02....       LJMP    ??_DrawBitmap_M565_6 & 0xFFFF
     61                /* Perform clipping */
     62                int x1, y1, Diff;
     63                y1 = y0 + ysize - 1;
   \   000101   E5..         MOV     A,?V0 + 12
   \   000103   25..         ADD     A,?V0 + 4
   \   000105   F8           MOV     R0,A
   \   000106   E5..         MOV     A,?V0 + 13
   \   000108   35..         ADDC    A,?V0 + 5
   \   00010A   F9           MOV     R1,A
   \   00010B   E8           MOV     A,R0
   \   00010C   24FF         ADD     A,#-0x1
   \   00010E   FC           MOV     R4,A
   \   00010F   E9           MOV     A,R1
   \   000110   34FF         ADDC    A,#-0x1
   \   000112   FD           MOV     R5,A
     64                x1 = x0 + xsize - 1;
   \   000113   E5..         MOV     A,?V0 + 14
   \   000115   25..         ADD     A,?V0 + 2
   \   000117   F8           MOV     R0,A
   \   000118   E5..         MOV     A,?V0 + 15
   \   00011A   35..         ADDC    A,?V0 + 3
   \   00011C   F9           MOV     R1,A
   \   00011D   E8           MOV     A,R0
   \   00011E   24FF         ADD     A,#-0x1
   \   000120   F5..         MOV     ?V0 + 8,A
   \   000122   E9           MOV     A,R1
   \   000123   34FF         ADDC    A,#-0x1
   \   000125   F5..         MOV     ?V0 + 9,A
     65                /* Clip Y */
     66                if (y0 < GUI_Context.ClipRect.y0) {
   \   000127   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00012A   E5..         MOV     A,?V0 + 12
   \   00012C   98           SUBB    A,R0
   \   00012D   E5..         MOV     A,?V0 + 13
   \   00012F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000132   5039         JNC     ??CrossCallReturnLabel_13
     67                  Diff = GUI_Context.ClipRect.y0 -y0;
   \   000134   90....       MOV     DPTR,#GUI_Context + 6
   \   000137   E0           MOVX    A,@DPTR
   \   000138   FA           MOV     R2,A
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   FB           MOV     R3,A
   \   00013C   EA           MOV     A,R2
   \   00013D   C3           CLR     C
   \   00013E   95..         SUBB    A,?V0 + 12
   \   000140   F8           MOV     R0,A
   \   000141   EB           MOV     A,R3
   \   000142   95..         SUBB    A,?V0 + 13
   \   000144   F9           MOV     R1,A
     68                  y0   = GUI_Context.ClipRect.y0;
   \   000145   8A..         MOV     ?V0 + 12,R2
   \   000147   8B..         MOV     ?V0 + 13,R3
     69                  #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     70                    pData += (U32)Diff * (U32)BytesPerLine / 2;
     71                  #else
     72                    pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
   \   000149   E8           MOV     A,R0
   \   00014A   FA           MOV     R2,A
   \   00014B   E9           MOV     A,R1
   \   00014C   FB           MOV     R3,A
   \   00014D   EA           MOV     A,R2
   \   00014E   8EF0         MOV     B,R6
   \   000150   A4           MUL     AB
   \   000151   CA           XCH     A,R2
   \   000152   85F0..       MOV     ?V0 + 10,B
   \   000155   8FF0         MOV     B,R7
   \   000157   A4           MUL     AB
   \   000158   25..         ADD     A,?V0 + 10
   \   00015A   F5..         MOV     ?V0 + 10,A
   \   00015C   8EF0         MOV     B,R6
   \   00015E   EB           MOV     A,R3
   \   00015F   A4           MUL     AB
   \   000160   25..         ADD     A,?V0 + 10
   \   000162   C3           CLR     C
   \   000163   13           RRC     A
   \   000164   FB           MOV     R3,A
   \   000165   EA           MOV     A,R2
   \   000166   13           RRC     A
   \   000167   12....       LCALL   ?Subroutine9 & 0xFFFF
     73                  #endif
     74                  ysize -= Diff;
   \                     ??CrossCallReturnLabel_17:
   \   00016A   12....       LCALL   ?Subroutine7 & 0xFFFF
     75                }
     76                Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??CrossCallReturnLabel_13:
   \   00016D   90....       MOV     DPTR,#GUI_Context + 10
   \   000170   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000173   EC           MOV     A,R4
   \   000174   C3           CLR     C
   \   000175   98           SUBB    A,R0
   \   000176   F8           MOV     R0,A
   \   000177   ED           MOV     A,R5
   \   000178   12....       LCALL   ?Subroutine5 & 0xFFFF
     77                if (Diff > 0) {
   \                     ??CrossCallReturnLabel_23:
   \   00017B   4003         JC      ??CrossCallReturnLabel_14
     78                  ysize -= Diff;
   \   00017D   12....       LCALL   ?Subroutine7 & 0xFFFF
     79                }
     80                if (ysize <=0) {
   \                     ??CrossCallReturnLabel_14:
   \   000180   C3           CLR     C
   \   000181   E5..         MOV     A,?V0 + 4
   \   000183   9401         SUBB    A,#0x1
   \   000185   E5..         MOV     A,?V0 + 5
   \   000187   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00018A   5003         JNC     $+5
   \   00018C   02....       LJMP    ??_DrawBitmap_M565_4 & 0xFFFF
     81          		    return;
     82                }
     83                /* Clip right side */
     84                Diff = x1 - GUI_Context.ClipRect.x1;
   \   00018F   90....       MOV     DPTR,#GUI_Context + 8
   \   000192   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000195   E5..         MOV     A,?V0 + 8
   \   000197   C3           CLR     C
   \   000198   98           SUBB    A,R0
   \   000199   F8           MOV     R0,A
   \   00019A   E5..         MOV     A,?V0 + 9
   \   00019C   12....       LCALL   ?Subroutine5 & 0xFFFF
     85                if (Diff > 0) {
   \                     ??CrossCallReturnLabel_24:
   \   00019F   4003         JC      ??CrossCallReturnLabel_15
     86                  xsize -= Diff;
   \   0001A1   12....       LCALL   ?Subroutine8 & 0xFFFF
     87                }
     88                /* Clip left side */
     89                Diff =0;
     90                if (x0 < GUI_Context.ClipRect.x0) {
   \                     ??CrossCallReturnLabel_15:
   \   0001A4   90....       MOV     DPTR,#GUI_Context + 4
   \   0001A7   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001AA   E5..         MOV     A,?V0 + 14
   \   0001AC   98           SUBB    A,R0
   \   0001AD   E5..         MOV     A,?V0 + 15
   \   0001AF   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001B2   5022         JNC     ??_DrawBitmap_M565_7
     91                  Diff = GUI_Context.ClipRect.x0-x0;
   \   0001B4   90....       MOV     DPTR,#GUI_Context + 4
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   C3           CLR     C
   \   0001B9   95..         SUBB    A,?V0 + 14
   \   0001BB   F8           MOV     R0,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   95..         SUBB    A,?V0 + 15
   \   0001C0   F9           MOV     R1,A
     92          			  xsize -= Diff;
   \   0001C1   12....       LCALL   ?Subroutine8 & 0xFFFF
     93                  pData += Diff; 
   \                     ??CrossCallReturnLabel_16:
   \   0001C4   E8           MOV     A,R0
   \   0001C5   FA           MOV     R2,A
   \   0001C6   E9           MOV     A,R1
   \   0001C7   FB           MOV     R3,A
   \   0001C8   EA           MOV     A,R2
   \   0001C9   12....       LCALL   ?Subroutine9 & 0xFFFF
     94                  x0 += Diff; 
   \                     ??CrossCallReturnLabel_18:
   \   0001CC   E5..         MOV     A,?V0 + 14
   \   0001CE   28           ADD     A,R0
   \   0001CF   F5..         MOV     ?V0 + 14,A
   \   0001D1   E5..         MOV     A,?V0 + 15
   \   0001D3   39           ADDC    A,R1
   \   0001D4   F5..         MOV     ?V0 + 15,A
     95                }
     96                if (xsize <=0) {
   \                     ??_DrawBitmap_M565_7:
   \   0001D6   C3           CLR     C
   \   0001D7   E5..         MOV     A,?V0 + 2
   \   0001D9   9401         SUBB    A,#0x1
   \   0001DB   E5..         MOV     A,?V0 + 3
   \   0001DD   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001E0   5003         JNC     $+5
   \   0001E2   02....       LJMP    ??_DrawBitmap_M565_4 & 0xFFFF
     97          		    return;
     98                }
     99                /* Simple, unmagnified output using LCD_L0_SetPixel() */
    100                for (y = 0; y < ysize; y++) {
   \   0001E5   75..00       MOV     ?V0 + 10,#0x0
   \   0001E8   75..00       MOV     ?V0 + 11,#0x0
   \   0001EB   02....       LJMP    ??_DrawBitmap_M565_8 & 0xFFFF
    101                  int x;
    102                  const U16 * p = pData;
    103                  for (x = 0; x < xsize; x++) {
    104                    U16 Index;
    105                    Index = *p++;
   \                     ??_DrawBitmap_M565_9:
   \   0001EE   85..82       MOV     DPL,?XSP + 0
   \   0001F1   85..83       MOV     DPH,?XSP + 1
   \   0001F4   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001F7   F5..         MOV     ?V0 + 0,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   F5..         MOV     ?V0 + 1,A
   \   0001FD   85..82       MOV     DPL,?XSP + 0
   \   000200   85..83       MOV     DPH,?XSP + 1
   \   000203   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000206   85..82       MOV     DPL,?XSP + 0
   \   000209   85..83       MOV     DPH,?XSP + 1
   \   00020C   E8           MOV     A,R0
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   A3           INC     DPTR
   \   00020F   E9           MOV     A,R1
   \   000210   F0           MOVX    @DPTR,A
    106                    if (Index != PrevIndex) {
   \   000211   7402         MOV     A,#0x2
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   E0           MOVX    A,@DPTR
   \   000217   65..         XRL     A,?V0 + 0
   \   000219   7004         JNZ     ??_DrawBitmap_M565_10
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   65..         XRL     A,?V0 + 1
   \                     ??_DrawBitmap_M565_10:
   \   00021F   6011         JZ      ??_DrawBitmap_M565_11
    107                      LCD_SetColor(LCD_Index2Color_M565(Index));
   \   000221                ; Setup parameters for call to function LCD_SetColor
   \   000221                ; Setup parameters for call to function LCD_Index2Color_M565
   \   000221   AA..         MOV     R2,?V0 + 0
   \   000223   AB..         MOV     R3,?V0 + 1
   \   000225   12....       LCALL   ?Subroutine11 & 0xFFFF
    108                      PrevIndex = Index;
    109                    }
   \                     ??CrossCallReturnLabel_21:
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   E5..         MOV     A,?V0 + 0
   \   00022D   F0           MOVX    @DPTR,A
   \   00022E   A3           INC     DPTR
   \   00022F   E5..         MOV     A,?V0 + 1
   \   000231   F0           MOVX    @DPTR,A
    110                    LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
   \                     ??_DrawBitmap_M565_11:
   \   000232                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   000232   90....       MOV     DPTR,#GUI_Context + 2
   \   000235   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000238   E5..         MOV     A,?V0 + 10
   \   00023A   25..         ADD     A,?V0 + 12
   \   00023C   FC           MOV     R4,A
   \   00023D   E5..         MOV     A,?V0 + 11
   \   00023F   35..         ADDC    A,?V0 + 13
   \   000241   FD           MOV     R5,A
   \   000242   E5..         MOV     A,?V0 + 8
   \   000244   25..         ADD     A,?V0 + 14
   \   000246   FA           MOV     R2,A
   \   000247   E5..         MOV     A,?V0 + 9
   \   000249   35..         ADDC    A,?V0 + 15
   \   00024B   FB           MOV     R3,A
   \   00024C   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   00024F   7402         MOV     A,#0x2
   \   000251   12....       LCALL   ?DEALLOC_XSTACK8
    111                  }
   \   000254   E5..         MOV     A,?V0 + 8
   \   000256   2401         ADD     A,#0x1
   \   000258   F5..         MOV     ?V0 + 8,A
   \   00025A   E5..         MOV     A,?V0 + 9
   \   00025C   3400         ADDC    A,#0x0
   \   00025E   F5..         MOV     ?V0 + 9,A
   \                     ??_DrawBitmap_M565_12:
   \   000260   C3           CLR     C
   \   000261   E5..         MOV     A,?V0 + 8
   \   000263   95..         SUBB    A,?V0 + 2
   \   000265   E5..         MOV     A,?V0 + 9
   \   000267   95..         SUBB    A,?V0 + 3
   \   000269   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00026B   65D0         XRL     A,PSW
   \   00026D   33           RLC     A
   \   00026E   5003         JNC     $+5
   \   000270   02....       LJMP    ??_DrawBitmap_M565_9 & 0xFFFF
    112                  pData += BytesPerLine / 2;
   \   000273   EE           MOV     A,R6
   \   000274   F8           MOV     R0,A
   \   000275   EF           MOV     A,R7
   \   000276   F9           MOV     R1,A
   \   000277   7A02         MOV     R2,#0x2
   \   000279   7B00         MOV     R3,#0x0
   \   00027B   12....       LCALL   ?S_DIV_MOD
   \   00027E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000281   E5..         MOV     A,?V0 + 10
   \   000283   2401         ADD     A,#0x1
   \   000285   F5..         MOV     ?V0 + 10,A
   \   000287   E5..         MOV     A,?V0 + 11
   \   000289   3400         ADDC    A,#0x0
   \   00028B   F5..         MOV     ?V0 + 11,A
   \                     ??_DrawBitmap_M565_8:
   \   00028D   C3           CLR     C
   \   00028E   E5..         MOV     A,?V0 + 10
   \   000290   95..         SUBB    A,?V0 + 4
   \   000292   E5..         MOV     A,?V0 + 11
   \   000294   95..         SUBB    A,?V0 + 5
   \   000296   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000298   65D0         XRL     A,PSW
   \   00029A   33           RLC     A
   \   00029B   4003         JC      $+5
   \   00029D   02....       LJMP    ??_DrawBitmap_M565_13 & 0xFFFF
   \   0002A0   85..82       MOV     DPL,?XSP + 0
   \   0002A3   85..83       MOV     DPH,?XSP + 1
   \   0002A6   E5..         MOV     A,?V0 + 6
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9   A3           INC     DPTR
   \   0002AA   E5..         MOV     A,?V0 + 7
   \   0002AC   F0           MOVX    @DPTR,A
   \   0002AD   75..00       MOV     ?V0 + 8,#0x0
   \   0002B0   75..00       MOV     ?V0 + 9,#0x0
   \   0002B3   80AB         SJMP    ??_DrawBitmap_M565_12
    113                }
    114              } else {
    115                /* Magnified output using LCD_FillRect() */
    116                int x,y;
    117                int yi;
    118                for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
   \                     ??_DrawBitmap_M565_6:
   \   0002B5   85....       MOV     ?V0 + 8,?V0 + 12
   \   0002B8   85....       MOV     ?V0 + 9,?V0 + 13
   \   0002BB   85..82       MOV     DPL,?XSP + 0
   \   0002BE   85..83       MOV     DPH,?XSP + 1
   \   0002C1   E4           CLR     A
   \   0002C2   F0           MOVX    @DPTR,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   F0           MOVX    @DPTR,A
   \   0002C5   02....       LJMP    ??_DrawBitmap_M565_14 & 0xFFFF
    119                  int yMax;
    120                  yMax = y + yMag - 1;
    121                  /* Draw if within clip area */
    122                  if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
    123                    int xi;
    124                    const U16 GUI_UNI_PTR * p = pData;
    125                    for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
    126                      U16 Index;
    127                      Index = *p++;
   \                     ??_DrawBitmap_M565_15:
   \   0002C8   7404         MOV     A,#0x4
   \   0002CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CD   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0002D0   F5..         MOV     ?V0 + 12,A
   \   0002D2   A3           INC     DPTR
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   F5..         MOV     ?V0 + 13,A
   \   0002D6   7404         MOV     A,#0x4
   \   0002D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DB   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002DE   7404         MOV     A,#0x4
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   E8           MOV     A,R0
   \   0002E4   F0           MOVX    @DPTR,A
   \   0002E5   A3           INC     DPTR
   \   0002E6   E9           MOV     A,R1
   \   0002E7   F0           MOVX    @DPTR,A
    128                      if (Index != PrevIndex) {
   \   0002E8   7402         MOV     A,#0x2
   \   0002EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   65..         XRL     A,?V0 + 12
   \   0002F0   7004         JNZ     ??_DrawBitmap_M565_16
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   65..         XRL     A,?V0 + 13
   \                     ??_DrawBitmap_M565_16:
   \   0002F6   6011         JZ      ??_DrawBitmap_M565_17
    129                        LCD_SetColor(LCD_Index2Color_M565(Index));
   \   0002F8                ; Setup parameters for call to function LCD_SetColor
   \   0002F8                ; Setup parameters for call to function LCD_Index2Color_M565
   \   0002F8   AA..         MOV     R2,?V0 + 12
   \   0002FA   AB..         MOV     R3,?V0 + 13
   \   0002FC   12....       LCALL   ?Subroutine11 & 0xFFFF
    130                        PrevIndex = Index;
    131                      }
   \                     ??CrossCallReturnLabel_22:
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   E5..         MOV     A,?V0 + 12
   \   000304   F0           MOVX    @DPTR,A
   \   000305   A3           INC     DPTR
   \   000306   E5..         MOV     A,?V0 + 13
   \   000308   F0           MOVX    @DPTR,A
    132                      LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_M565_17:
   \   000309                ; Setup parameters for call to function LCD_FillRect
   \   000309   78..         MOV     R0,#?V0 + 0
   \   00030B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00030E   742C         MOV     A,#0x2c
   \   000310   12....       LCALL   ?XSTACK_DISP0_8
   \   000313   E0           MOVX    A,@DPTR
   \   000314   25..         ADD     A,?V0 + 10
   \   000316   F8           MOV     R0,A
   \   000317   A3           INC     DPTR
   \   000318   E0           MOVX    A,@DPTR
   \   000319   35..         ADDC    A,?V0 + 11
   \   00031B   F9           MOV     R1,A
   \   00031C   E8           MOV     A,R0
   \   00031D   24FF         ADD     A,#-0x1
   \   00031F   F5..         MOV     ?V0 + 12,A
   \   000321   E9           MOV     A,R1
   \   000322   34FF         ADDC    A,#-0x1
   \   000324   F5..         MOV     ?V0 + 13,A
   \   000326   78..         MOV     R0,#?V0 + 12
   \   000328   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00032B   AC..         MOV     R4,?V0 + 8
   \   00032D   AD..         MOV     R5,?V0 + 9
   \   00032F   AA..         MOV     R2,?V0 + 10
   \   000331   AB..         MOV     R3,?V0 + 11
   \   000333   12....       LCALL   ??LCD_FillRect?relay
   \   000336   7404         MOV     A,#0x4
   \   000338   12....       LCALL   ?DEALLOC_XSTACK8
    133                    }
   \   00033B   7406         MOV     A,#0x6
   \   00033D   12....       LCALL   ?XSTACK_DISP0_8
   \   000340   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000343   742A         MOV     A,#0x2a
   \   000345   12....       LCALL   ?XSTACK_DISP0_8
   \   000348   E0           MOVX    A,@DPTR
   \   000349   25..         ADD     A,?V0 + 10
   \   00034B   F5..         MOV     ?V0 + 10,A
   \   00034D   A3           INC     DPTR
   \   00034E   E0           MOVX    A,@DPTR
   \   00034F   35..         ADDC    A,?V0 + 11
   \   000351   F5..         MOV     ?V0 + 11,A
   \                     ??_DrawBitmap_M565_18:
   \   000353   7406         MOV     A,#0x6
   \   000355   12....       LCALL   ?XSTACK_DISP0_8
   \   000358   C3           CLR     C
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   95..         SUBB    A,?V0 + 2
   \   00035C   A3           INC     DPTR
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   95..         SUBB    A,?V0 + 3
   \   000360   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000362   65D0         XRL     A,PSW
   \   000364   33           RLC     A
   \   000365   5003         JNC     $+5
   \   000367   02....       LJMP    ??_DrawBitmap_M565_15 & 0xFFFF
    134                  }
    135                  pData += BytesPerLine / 2;
   \                     ??_DrawBitmap_M565_19:
   \   00036A   EE           MOV     A,R6
   \   00036B   F8           MOV     R0,A
   \   00036C   EF           MOV     A,R7
   \   00036D   F9           MOV     R1,A
   \   00036E   7A02         MOV     R2,#0x2
   \   000370   7B00         MOV     R3,#0x0
   \   000372   12....       LCALL   ?S_DIV_MOD
   \   000375   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000378   85..82       MOV     DPL,?XSP + 0
   \   00037B   85..83       MOV     DPH,?XSP + 1
   \   00037E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000381   742C         MOV     A,#0x2c
   \   000383   12....       LCALL   ?XSTACK_DISP0_8
   \   000386   E0           MOVX    A,@DPTR
   \   000387   25..         ADD     A,?V0 + 8
   \   000389   F5..         MOV     ?V0 + 8,A
   \   00038B   A3           INC     DPTR
   \   00038C   E0           MOVX    A,@DPTR
   \   00038D   35..         ADDC    A,?V0 + 9
   \   00038F   F5..         MOV     ?V0 + 9,A
   \                     ??_DrawBitmap_M565_14:
   \   000391   85..82       MOV     DPL,?XSP + 0
   \   000394   85..83       MOV     DPH,?XSP + 1
   \   000397   C3           CLR     C
   \   000398   E0           MOVX    A,@DPTR
   \   000399   95..         SUBB    A,?V0 + 4
   \   00039B   A3           INC     DPTR
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   95..         SUBB    A,?V0 + 5
   \   00039F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003A1   65D0         XRL     A,PSW
   \   0003A3   33           RLC     A
   \   0003A4   5055         JNC     ??_DrawBitmap_M565_13
   \   0003A6   742C         MOV     A,#0x2c
   \   0003A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AB   E0           MOVX    A,@DPTR
   \   0003AC   25..         ADD     A,?V0 + 8
   \   0003AE   F8           MOV     R0,A
   \   0003AF   A3           INC     DPTR
   \   0003B0   E0           MOVX    A,@DPTR
   \   0003B1   35..         ADDC    A,?V0 + 9
   \   0003B3   F9           MOV     R1,A
   \   0003B4   E8           MOV     A,R0
   \   0003B5   24FF         ADD     A,#-0x1
   \   0003B7   F5..         MOV     ?V0 + 0,A
   \   0003B9   E9           MOV     A,R1
   \   0003BA   34FF         ADDC    A,#-0x1
   \   0003BC   F5..         MOV     ?V0 + 1,A
   \   0003BE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0003C1   E5..         MOV     A,?V0 + 0
   \   0003C3   98           SUBB    A,R0
   \   0003C4   E5..         MOV     A,?V0 + 1
   \   0003C6   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0003C9   409F         JC      ??_DrawBitmap_M565_19
   \   0003CB   90....       MOV     DPTR,#GUI_Context + 10
   \   0003CE   C3           CLR     C
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   95..         SUBB    A,?V0 + 8
   \   0003D2   A3           INC     DPTR
   \   0003D3   E0           MOVX    A,@DPTR
   \   0003D4   95..         SUBB    A,?V0 + 9
   \   0003D6   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003D8   65D0         XRL     A,PSW
   \   0003DA   33           RLC     A
   \   0003DB   408D         JC      ??_DrawBitmap_M565_19
   \   0003DD   7404         MOV     A,#0x4
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   E5..         MOV     A,?V0 + 6
   \   0003E4   F0           MOVX    @DPTR,A
   \   0003E5   A3           INC     DPTR
   \   0003E6   E5..         MOV     A,?V0 + 7
   \   0003E8   F0           MOVX    @DPTR,A
   \   0003E9   85....       MOV     ?V0 + 10,?V0 + 14
   \   0003EC   85....       MOV     ?V0 + 11,?V0 + 15
   \   0003EF   7406         MOV     A,#0x6
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E4           CLR     A
   \   0003F5   F0           MOVX    @DPTR,A
   \   0003F6   A3           INC     DPTR
   \   0003F7   F0           MOVX    @DPTR,A
   \   0003F8   02....       LJMP    ??_DrawBitmap_M565_18 & 0xFFFF
    136                }
    137              }
    138              GUI_SetColorIndex(OldIndex);
   \                     ??_DrawBitmap_M565_13:
   \   0003FB                ; Setup parameters for call to function GUI_SetColorIndex
   \   0003FB   7408         MOV     A,#0x8
   \   0003FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000400   E0           MOVX    A,@DPTR
   \   000401   FA           MOV     R2,A
   \   000402   A3           INC     DPTR
   \   000403   E0           MOVX    A,@DPTR
   \   000404   FB           MOV     R3,A
   \   000405   12....       LCALL   ??GUI_SetColorIndex?relay
   \                     ??_DrawBitmap_M565_4:
   \   000408   740A         MOV     A,#0xa
   \   00040A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00040D   7F10         MOV     R7,#0x10
   \   00040F   02....       LJMP    ?BANKED_LEAVE_XDATA
    139            }
    140          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??LCD_Index2Color_M565?relay
   \   000003   12....       LCALL   ??LCD_SetColor?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   F8           MOV     R0,A
   \   000004   E9           MOV     A,R1
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   E5..         MOV     A,?V0 + 6
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V0 + 6,A
   \   00000C   E5..         MOV     A,?V0 + 7
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V0 + 7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   EB           MOV     A,R3
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   E5..         MOV     A,?V0 + 6
   \   000008   2A           ADD     A,R2
   \   000009   F5..         MOV     ?V0 + 6,A
   \   00000B   E5..         MOV     A,?V0 + 7
   \   00000D   3B           ADDC    A,R3
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 2
   \   000003   98           SUBB    A,R0
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   99           SUBB    A,R1
   \   000009   F5..         MOV     ?V0 + 3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 4
   \   000003   98           SUBB    A,R0
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   99           SUBB    A,R1
   \   000009   F5..         MOV     ?V0 + 5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   99           SUBB    A,R1
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   99           SUBB    A,R1
   \   000001   F9           MOV     R1,A
   \   000002   C3           CLR     C
   \   000003   E8           MOV     A,R0
   \   000004   9401         SUBB    A,#0x1
   \   000006   E9           MOV     A,R1
   \   000007                REQUIRE ??Subroutine12_0
   \   000007                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#GUI_Context + 6
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   C3           CLR     C
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    141          
    142          /*********************************************************************
    143          *
    144          *       Public data
    145          *
    146          **********************************************************************
    147          */
    148          /*********************************************************************
    149          *
    150          *       GUI_BitmapMethodsM565
    151          */

   \                                 In  segment XDATA_ROM_C, align 1
    152          const GUI_BITMAP_METHODS GUI_BitmapMethodsM565 = {
   \                     GUI_BitmapMethodsM565:
   \   000000   ....         DW ??_DrawBitmap_M565?relay
   \   000002   ....         DW ??LCD_Index2Color_M565?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_M565?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_M565
    153            _DrawBitmap_M565,
    154            LCD_Index2Color_M565
    155          };
    156            
    157          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     _DrawBitmap_M565               0      0     62
       -> LCD_GetColorIndex         0      0     68
       -> LCD_GetFixedPaletteEx     0      0     68
       -> LCD_GetSwapRBEx           0      0     68
       -> LCD_DrawBitmap            0      0    100
       -> LCD_Index2Color_M565      0      0     68
       -> LCD_SetColor              0      0     68
       -> LCD_L0_SetPixelIndex      0      0     72
       -> LCD_Index2Color_M565      0      0     68
       -> LCD_SetColor              0      0     68
       -> LCD_FillRect              0      0     76
       -> GUI_SetColorIndex         0      0     68


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _DrawBitmap_M565         1042
     ?Subroutine11               9
     ?Subroutine10              18
     ?Subroutine9               17
     ?Subroutine8               12
     ?Subroutine7               12
     ?Subroutine6                7
     ?Subroutine5                7
     ??Subroutine12_0            8
     ?Subroutine4               10
     ?Subroutine3               10
     ?Subroutine2                6
     ?Subroutine1                3
     ??Subroutine13_0            7
     ?Subroutine0               11
     GUI_BitmapMethodsM565       4
     ??_DrawBitmap_M565?relay    6

 
 1 179 bytes in segment BANKED_CODE
     6 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_ROM_C
 
 1 185 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
