###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:53 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCDRLE8.c                                        #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCDRLE8.c -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCDRLE #
#                          8.lst                                              #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCDRLE8 #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCDRLE8.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCDRLE8.c
     16          Purpose     : Drawing routines for run length encoded bitmaps
     17                        with 8 bpp
     18          ---------------------------END-OF-HEADER------------------------------
     19          */
     20          
     21          #include <stddef.h>           /* needed for definition of NULL */
     22          #include "GUI_Private.h"
     23          #include "LCD_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static data
     28          *
     29          **********************************************************************
     30          */
     31          
     32          static struct {
     33            int x,y;
     34            const U8 GUI_UNI_PTR * pPixel;
     35            const U8 GUI_UNI_PTR * pPixelStart;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36          } Cache;
   \                     Cache:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
     37          
     38          /*********************************************************************
     39          *
     40          *       Static code
     41          *
     42          **********************************************************************
     43          */
     44          /*********************************************************************
     45          *
     46          *       _DrawBitmap_RLE8
     47          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          static void _DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE8:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7406         MOV     A,#0x6
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7426         MOV     A,#0x26
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   7428         MOV     A,#0x28
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 6,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 7,A
   \   000036   742A         MOV     A,#0x2a
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   742C         MOV     A,#0x2c
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 14,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 15,A
   \   00004C   742E         MOV     A,#0x2e
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V0 + 12,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V0 + 13,A
     49            LCD_PIXELINDEX aColorIndex[2];
     50            LCD_PIXELINDEX PixelIndex;
     51            int xi,y;
     52            int xL, yL;
     53            const U8 GUI_UNI_PTR * pPixelOrg = pPixel;
   \   000058   85....       MOV     ?V0 + 0,?V0 + 6
   \   00005B   85....       MOV     ?V0 + 1,?V0 + 7
     54            char NoTrans = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
   \   00005E   90....       MOV     DPTR,#GUI_Context + 12
   \   000061   E0           MOVX    A,@DPTR
   \   000062   A2E1         MOV     C,0xE0 /* A   */.1
   \   000064   4004         JC      ??_DrawBitmap_RLE8_0
   \   000066   D2F0         SETB    B.0
   \   000068   8002         SJMP    ??_DrawBitmap_RLE8_1
   \                     ??_DrawBitmap_RLE8_0:
   \   00006A   C2F0         CLR     B.0
   \                     ??_DrawBitmap_RLE8_1:
   \   00006C   A2F0         MOV     C,B.0
   \   00006E   E4           CLR     A
   \   00006F   33           RLC     A
   \   000070   C0E0         PUSH    A
   \   000072   7405         MOV     A,#0x5
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
     55            const LCD_PIXELINDEX* pTrans =NULL;
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
     56            char IsMagnified = ((yMag | xMag) != 1);
   \   000083   E5..         MOV     A,?V0 + 12
   \   000085   45..         ORL     A,?V0 + 14
   \   000087   F8           MOV     R0,A
   \   000088   E5..         MOV     A,?V0 + 13
   \   00008A   45..         ORL     A,?V0 + 15
   \   00008C   F9           MOV     R1,A
   \   00008D   7401         MOV     A,#0x1
   \   00008F   68           XRL     A,R0
   \   000090   7001         JNZ     ??_DrawBitmap_RLE8_2
   \   000092   E9           MOV     A,R1
   \                     ??_DrawBitmap_RLE8_2:
   \   000093   6005         JZ      ??_DrawBitmap_RLE8_3
   \   000095   75..01       MOV     ?V0 + 9,#0x1
   \   000098   8003         SJMP    ??_DrawBitmap_RLE8_4
   \                     ??_DrawBitmap_RLE8_3:
   \   00009A   75..00       MOV     ?V0 + 9,#0x0
     57            aColorIndex[0] = LCD_ACOLORINDEX[0];
   \                     ??_DrawBitmap_RLE8_4:
   \   00009D   90....       MOV     DPTR,#GUI_Context
   \   0000A0   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000A3   7408         MOV     A,#0x8
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ??Subroutine14_0 & 0xFFFF
     58            aColorIndex[1] = LCD_ACOLORINDEX[1];
   \                     ??CrossCallReturnLabel_41:
   \   0000AB   90....       MOV     DPTR,#GUI_Context + 2
   \   0000AE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000B1   740A         MOV     A,#0xa
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ??Subroutine14_0 & 0xFFFF
     59            /* Handle color translation */
     60            if ((pLogPal) && (pLogPal->pPalEntries)) {
   \                     ??CrossCallReturnLabel_42:
   \   0000B9   EA           MOV     A,R2
   \   0000BA   4B           ORL     A,R3
   \   0000BB   6026         JZ      ??_DrawBitmap_RLE8_5
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000C7   601A         JZ      ??_DrawBitmap_RLE8_5
     61              if ((pTrans = LCD_GetpPalConvTable(pLogPal)) == NULL) {
   \   0000C9                ; Setup parameters for call to function LCD_GetpPalConvTable
   \   0000C9   12....       LCALL   ??LCD_GetpPalConvTable?relay
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   EA           MOV     A,R2
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   EB           MOV     A,R3
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   7403         MOV     A,#0x3
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL   ?Subroutine4 & 0xFFFF
     62                return;
     63              }
     64            }
   \                     ??CrossCallReturnLabel_7:
   \   0000DE   7003         JNZ     $+5
   \   0000E0   02....       LJMP    ??CrossCallReturnLabel_45 & 0xFFFF
     65           /* Check if we can limit the number of lines due to clipping) */
     66            if (yMag == 1) {
   \                     ??_DrawBitmap_RLE8_5:
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   65..         XRL     A,?V0 + 12
   \   0000E7   7002         JNZ     ??_DrawBitmap_RLE8_6
   \   0000E9   E5..         MOV     A,?V0 + 13
   \                     ??_DrawBitmap_RLE8_6:
   \   0000EB   702A         JNZ     ??_DrawBitmap_RLE8_7
     67              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1)
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000F5   08           INC     R0
   \   0000F6   E9           MOV     A,R1
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   F9           MOV     R1,A
   \   0000FA   C3           CLR     C
   \   0000FB   E8           MOV     A,R0
   \   0000FC   95..         SUBB    A,?V0 + 2
   \   0000FE   E9           MOV     A,R1
   \   0000FF   95..         SUBB    A,?V0 + 3
   \   000101   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000103   65D0         XRL     A,PSW
   \   000105   33           RLC     A
   \   000106   500F         JNC     ??_DrawBitmap_RLE8_7
     68                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   12....       LCALL   ?Subroutine2 & 0xFFFF
     69            }
   \                     ??CrossCallReturnLabel_3:
   \   000110   F5..         MOV     ?V0 + 2,A
   \   000112   E9           MOV     A,R1
   \   000113   3400         ADDC    A,#0x0
   \   000115   F5..         MOV     ?V0 + 3,A
     70            /* Init variables for looping */
     71            xi=0;
   \                     ??_DrawBitmap_RLE8_7:
   \   000117   7E00         MOV     R6,#0x0
   \   000119   7F00         MOV     R7,#0x0
     72            y =0;
   \   00011B   8E..         MOV     ?V0 + 4,R6
   \   00011D   8E..         MOV     ?V0 + 5,R6
     73            /* Check if we can use the cache to save some unnecessary iterations */
     74            if (!IsMagnified) {
   \   00011F   E5..         MOV     A,?V0 + 9
   \   000121   A2E0         MOV     C,0xE0 /* A   */.0
   \   000123   404D         JC      ??_DrawBitmap_RLE8_8
     75              int yDiff = GUI_Context.ClipRect.y0 - y0;
     76              if ((Cache.pPixelStart == pPixel) && (yDiff > Cache.y)) {
   \   000125   90....       MOV     DPTR,#Cache + 6
   \   000128   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00012B   E5..         MOV     A,?V0 + 6
   \   00012D   68           XRL     A,R0
   \   00012E   7003         JNZ     ??_DrawBitmap_RLE8_9
   \   000130   E5..         MOV     A,?V0 + 7
   \   000132   69           XRL     A,R1
   \                     ??_DrawBitmap_RLE8_9:
   \   000133   703D         JNZ     ??_DrawBitmap_RLE8_8
   \   000135   7401         MOV     A,#0x1
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00013D   7583..       MOV     DPH,#((GUI_Context + 6) >> 8) & 0xff
   \   000140   7582..       MOV     DPL,#(GUI_Context + 6) & 0xff
   \   000143   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000146   7583..       MOV     DPH,#((Cache + 2) >> 8) & 0xff
   \   000149   7582..       MOV     DPL,#(Cache + 2) & 0xff
   \   00014C   C3           CLR     C
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   98           SUBB    A,R0
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000154   501C         JNC     ??_DrawBitmap_RLE8_8
     77                /* Accept cache values */
     78                y = Cache.y;
   \   000156   90....       MOV     DPTR,#Cache + 2
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V0 + 4,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   F5..         MOV     ?V0 + 5,A
     79                xi = Cache.x;
   \   000160   90....       MOV     DPTR,#Cache
   \   000163   E0           MOVX    A,@DPTR
   \   000164   FE           MOV     R6,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   FF           MOV     R7,A
     80                pPixel = Cache.pPixel;
   \   000168   90....       MOV     DPTR,#Cache + 4
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F5..         MOV     ?V0 + 6,A
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F5..         MOV     ?V0 + 7,A
     81              }
     82            }
     83            /* Init values for caching */
     84            Cache.pPixel = Cache.pPixelStart = pPixelOrg;
   \                     ??_DrawBitmap_RLE8_8:
   \   000172   90....       MOV     DPTR,#Cache + 6
   \   000175   E5..         MOV     A,?V0 + 0
   \   000177   F0           MOVX    @DPTR,A
   \   000178   A3           INC     DPTR
   \   000179   E5..         MOV     A,?V0 + 1
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   90....       MOV     DPTR,#Cache + 6
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   F8           MOV     R0,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   12....       LCALL   ?Subroutine0 & 0xFFFF
     85            Cache.x = Cache.y = 0;
   \                     ??CrossCallReturnLabel_46:
   \   000186   90....       MOV     DPTR,#Cache + 2
   \   000189   E4           CLR     A
   \   00018A   F0           MOVX    @DPTR,A
   \   00018B   A3           INC     DPTR
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   90....       MOV     DPTR,#Cache
   \   000190   F0           MOVX    @DPTR,A
   \   000191   A3           INC     DPTR
   \   000192   F0           MOVX    @DPTR,A
     86            /* Repeat until we have reached bottom */
     87            for (; y < ysize; ) {
   \                     ??_DrawBitmap_RLE8_10:
   \   000193   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000196   4003         JC      $+5
   \   000198   02....       LJMP    ??_DrawBitmap_RLE8_11 & 0xFFFF
     88              U8 Cmd  = *pPixel++;
   \   00019B   85..82       MOV     DPL,?V0 + 6
   \   00019E   85..83       MOV     DPH,?V0 + 7
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F5..         MOV     ?V0 + 8,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   8582..       MOV     ?V0 + 6,DPL
   \   0001A8   8583..       MOV     ?V0 + 7,DPH
     89              U8 Data = *pPixel++;
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   85..82       MOV     DPL,?XSP + 0
   \   0001AF   85..83       MOV     DPH,?XSP + 1
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   85..82       MOV     DPL,?V0 + 6
   \   0001B6   85..83       MOV     DPH,?V0 + 7
   \   0001B9   A3           INC     DPTR
   \   0001BA   8582..       MOV     ?V0 + 6,DPL
   \   0001BD   8583..       MOV     ?V0 + 7,DPH
     90              if (Cmd) {
   \   0001C0   E5..         MOV     A,?V0 + 8
   \   0001C2   7003         JNZ     $+5
   \   0001C4   02....       LJMP    ??_DrawBitmap_RLE8_12 & 0xFFFF
     91                /* Save cache info */
     92                Cache.pPixel = pPixel-2;
   \   0001C7   E5..         MOV     A,?V0 + 6
   \   0001C9   24FE         ADD     A,#-0x2
   \   0001CB   F8           MOV     R0,A
   \   0001CC   E5..         MOV     A,?V0 + 7
   \   0001CE   34FF         ADDC    A,#-0x1
   \   0001D0   12....       LCALL   ?Subroutine0 & 0xFFFF
     93                Cache.x = xi;
   \                     ??CrossCallReturnLabel_47:
   \   0001D3   90....       MOV     DPTR,#Cache
   \   0001D6   EE           MOV     A,R6
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   EF           MOV     A,R7
   \   0001DA   F0           MOVX    @DPTR,A
     94                Cache.y = y;
   \   0001DB   A3           INC     DPTR
   \   0001DC   E5..         MOV     A,?V0 + 4
   \   0001DE   F0           MOVX    @DPTR,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E5..         MOV     A,?V0 + 5
   \   0001E2   F0           MOVX    @DPTR,A
     95                LCD_ACOLORINDEX[1] = pTrans ? *(pTrans+Data) : Data;
   \   0001E3   7403         MOV     A,#0x3
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001EB   85..82       MOV     DPL,?XSP + 0
   \   0001EE   85..83       MOV     DPH,?XSP + 1
   \   0001F1   601B         JZ      ??_DrawBitmap_RLE8_13
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   C3           CLR     C
   \   0001F5   33           RLC     A
   \   0001F6   F8           MOV     R0,A
   \   0001F7   E4           CLR     A
   \   0001F8   33           RLC     A
   \   0001F9   F9           MOV     R1,A
   \   0001FA   7403         MOV     A,#0x3
   \   0001FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   28           ADD     A,R0
   \   000201   FA           MOV     R2,A
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   39           ADDC    A,R1
   \   000205   8A82         MOV     DPL,R2
   \   000207   F583         MOV     DPH,A
   \   000209   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00020C   8004         SJMP    ??_DrawBitmap_RLE8_14
   \                     ??_DrawBitmap_RLE8_13:
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F8           MOV     R0,A
   \   000210   7900         MOV     R1,#0x0
   \                     ??_DrawBitmap_RLE8_14:
   \   000212   90....       MOV     DPTR,#GUI_Context + 2
   \   000215   12....       LCALL   ??Subroutine14_0 & 0xFFFF
     96                while (Cmd) {
     97                  int xi1 = xi+Cmd;
   \                     ??CrossCallReturnLabel_43:
   \   000218   85....       MOV     ?V0 + 0,?V0 + 8
   \   00021B   EE           MOV     A,R6
   \   00021C   25..         ADD     A,?V0 + 0
   \   00021E   F5..         MOV     ?V0 + 0,A
   \   000220   EF           MOV     A,R7
   \   000221   3400         ADDC    A,#0x0
   \   000223   F5..         MOV     ?V0 + 1,A
     98                  if (xi1>=xsize)
   \   000225   7424         MOV     A,#0x24
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00022D   E5..         MOV     A,?V0 + 0
   \   00022F   98           SUBB    A,R0
   \   000230   E5..         MOV     A,?V0 + 1
   \   000232   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000235   400C         JC      ??_DrawBitmap_RLE8_15
     99                    xi1 = xsize;
   \   000237   7424         MOV     A,#0x24
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   F5..         MOV     ?V0 + 0,A
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   F5..         MOV     ?V0 + 1,A
    100                  Cmd -= (xi1-xi);
   \                     ??_DrawBitmap_RLE8_15:
   \   000243   EE           MOV     A,R6
   \   000244   F9           MOV     R1,A
   \   000245   A8..         MOV     R0,?V0 + 0
   \   000247   E5..         MOV     A,?V0 + 8
   \   000249   C3           CLR     C
   \   00024A   98           SUBB    A,R0
   \   00024B   29           ADD     A,R1
   \   00024C   F5..         MOV     ?V0 + 8,A
    101                  if (Data || NoTrans) {  /* Skip transparent pixels */
   \   00024E   85..82       MOV     DPL,?XSP + 0
   \   000251   85..83       MOV     DPH,?XSP + 1
   \   000254   E0           MOVX    A,@DPTR
   \   000255   700D         JNZ     ??_DrawBitmap_RLE8_16
   \   000257   7405         MOV     A,#0x5
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00025F   4003         JC      $+5
   \   000261   02....       LJMP    ??_DrawBitmap_RLE8_17 & 0xFFFF
    102                    if (IsMagnified) {
   \                     ??_DrawBitmap_RLE8_16:
   \   000264   E5..         MOV     A,?V0 + 9
   \   000266   A2E0         MOV     C,0xE0 /* A   */.0
   \   000268   506A         JNC     ??_DrawBitmap_RLE8_18
    103                      xL = xMag * xi + x0;
   \   00026A   A8..         MOV     R0,?V0 + 14
   \   00026C   8F..         MOV     ?V0 + 11,R7
   \   00026E   E8           MOV     A,R0
   \   00026F   89F0         MOV     B,R1
   \   000271   A4           MUL     AB
   \   000272   C8           XCH     A,R0
   \   000273   AAF0         MOV     R2,B
   \   000275   85..F0       MOV     B,?V0 + 11
   \   000278   A4           MUL     AB
   \   000279   2A           ADD     A,R2
   \   00027A   FA           MOV     R2,A
   \   00027B   89F0         MOV     B,R1
   \   00027D   E5..         MOV     A,?V0 + 15
   \   00027F   A4           MUL     AB
   \   000280   2A           ADD     A,R2
   \   000281   F9           MOV     R1,A
   \   000282   7406         MOV     A,#0x6
   \   000284   12....       LCALL   ?XSTACK_DISP0_8
   \   000287   12....       LCALL   ?Subroutine1 & 0xFFFF
    104                      yL = yMag * y + y0;
    105                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
    106                    } else {
   \                     ??CrossCallReturnLabel_0:
   \   00028A   12....       LCALL   ?XSTACK_DISP0_8
   \   00028D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000290   F5..         MOV     ?V0 + 10,A
   \   000292   E9           MOV     A,R1
   \   000293   34FF         ADDC    A,#-0x1
   \   000295   F5..         MOV     ?V0 + 11,A
   \   000297   78..         MOV     R0,#?V0 + 10
   \   000299   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029C   A8..         MOV     R0,?V0 + 14
   \   00029E   E5..         MOV     A,?V0 + 0
   \   0002A0   C3           CLR     C
   \   0002A1   9E           SUBB    A,R6
   \   0002A2   F5..         MOV     ?V0 + 10,A
   \   0002A4   E5..         MOV     A,?V0 + 1
   \   0002A6   9F           SUBB    A,R7
   \   0002A7   F5..         MOV     ?V0 + 11,A
   \   0002A9   E8           MOV     A,R0
   \   0002AA   85..F0       MOV     B,?V0 + 10
   \   0002AD   A4           MUL     AB
   \   0002AE   C8           XCH     A,R0
   \   0002AF   AEF0         MOV     R6,B
   \   0002B1   85..F0       MOV     B,?V0 + 11
   \   0002B4   A4           MUL     AB
   \   0002B5   2E           ADD     A,R6
   \   0002B6   FE           MOV     R6,A
   \   0002B7   85..F0       MOV     B,?V0 + 10
   \   0002BA   E5..         MOV     A,?V0 + 15
   \   0002BC   A4           MUL     AB
   \   0002BD   2E           ADD     A,R6
   \   0002BE   F9           MOV     R1,A
   \   0002BF   EA           MOV     A,R2
   \   0002C0   28           ADD     A,R0
   \   0002C1   F8           MOV     R0,A
   \   0002C2   EB           MOV     A,R3
   \   0002C3   39           ADDC    A,R1
   \   0002C4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0002C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002CA   12....       LCALL   ??LCD_FillRect?relay
   \   0002CD   7404         MOV     A,#0x4
   \   0002CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D2   802F         SJMP    ??_DrawBitmap_RLE8_17
    107                      LCD_DrawHLine(x0+xi, y + y0, xi1+x0-1);
   \                     ??_DrawBitmap_RLE8_18:
   \   0002D4                ; Setup parameters for call to function LCD_DrawHLine
   \   0002D4   7406         MOV     A,#0x6
   \   0002D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   25..         ADD     A,?V0 + 0
   \   0002DC   F8           MOV     R0,A
   \   0002DD   A3           INC     DPTR
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   35..         ADDC    A,?V0 + 1
   \   0002E1   12....       LCALL   ?Subroutine10 & 0xFFFF
    108                    }
    109                  }
   \                     ??CrossCallReturnLabel_32:
   \   0002E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002E7   7403         MOV     A,#0x3
   \   0002E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002EF   7408         MOV     A,#0x8
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   2E           ADD     A,R6
   \   0002F6   FA           MOV     R2,A
   \   0002F7   A3           INC     DPTR
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   3F           ADDC    A,R7
   \   0002FA   FB           MOV     R3,A
   \   0002FB   12....       LCALL   ??LCD_DrawHLine?relay
   \   0002FE   7402         MOV     A,#0x2
   \   000300   12....       LCALL   ?DEALLOC_XSTACK8
    110                  xi =xi1;
   \                     ??_DrawBitmap_RLE8_17:
   \   000303   AE..         MOV     R6,?V0 + 0
   \   000305   AF..         MOV     R7,?V0 + 1
    111                  if (xi1==xsize) {
   \   000307   7424         MOV     A,#0x24
   \   000309   12....       LCALL   ?XSTACK_DISP0_8
   \   00030C   E0           MOVX    A,@DPTR
   \   00030D   65..         XRL     A,?V0 + 0
   \   00030F   7004         JNZ     ??_DrawBitmap_RLE8_19
   \   000311   A3           INC     DPTR
   \   000312   E0           MOVX    A,@DPTR
   \   000313   65..         XRL     A,?V0 + 1
   \                     ??_DrawBitmap_RLE8_19:
   \   000315   7007         JNZ     ??_DrawBitmap_RLE8_20
    112                    y++;
   \   000317   12....       LCALL   ?Subroutine11 & 0xFFFF
    113                    xi=0;
   \                     ??CrossCallReturnLabel_33:
   \   00031A   7E00         MOV     R6,#0x0
   \   00031C   7F00         MOV     R7,#0x0
    114                  }
    115                }
   \                     ??_DrawBitmap_RLE8_20:
   \   00031E   E5..         MOV     A,?V0 + 8
   \   000320   6003         JZ      $+5
   \   000322   02....       LJMP    ??CrossCallReturnLabel_43 & 0xFFFF
   \   000325   02....       LJMP    ??_DrawBitmap_RLE8_10 & 0xFFFF
    116              } else {
    117                do {
    118                  U8 Index = *pPixel++;
    119                  if (Index || NoTrans) {  /* Skip transparent pixels */
    120                    int x = x0+xi;
    121                    PixelIndex = pTrans ? *(pTrans+Index) : Index;
   \                     ??_DrawBitmap_RLE8_21:
   \   000328   8C82         MOV     DPL,R4
   \   00032A   8582..       MOV     ?V0 + 0,DPL
   \   00032D   75..00       MOV     ?V0 + 1,#0x0
    122                    if (IsMagnified) {
   \                     ??_DrawBitmap_RLE8_22:
   \   000330   E5..         MOV     A,?V0 + 9
   \   000332   A2E0         MOV     C,0xE0 /* A   */.0
   \   000334   505E         JNC     ??_DrawBitmap_RLE8_23
    123                      LCD_SetColorIndex(PixelIndex);
   \   000336                ; Setup parameters for call to function LCD_SetColorIndex
   \   000336   AA..         MOV     R2,?V0 + 0
   \   000338   AB..         MOV     R3,?V0 + 1
   \   00033A   12....       LCALL   ??LCD_SetColorIndex?relay
    124                      xL = xMag * xi + x0;
   \   00033D   A8..         MOV     R0,?V0 + 14
   \   00033F   8E..         MOV     ?V0 + 0,R6
   \   000341   8F..         MOV     ?V0 + 1,R7
   \   000343   E8           MOV     A,R0
   \   000344   85..F0       MOV     B,?V0 + 0
   \   000347   A4           MUL     AB
   \   000348   C8           XCH     A,R0
   \   000349   AAF0         MOV     R2,B
   \   00034B   85..F0       MOV     B,?V0 + 1
   \   00034E   A4           MUL     AB
   \   00034F   2A           ADD     A,R2
   \   000350   FA           MOV     R2,A
   \   000351   85..F0       MOV     B,?V0 + 0
   \   000354   E5..         MOV     A,?V0 + 15
   \   000356   A4           MUL     AB
   \   000357   2A           ADD     A,R2
   \   000358   F9           MOV     R1,A
   \   000359   7406         MOV     A,#0x6
   \   00035B   12....       LCALL   ?XSTACK_DISP0_8
   \   00035E   12....       LCALL   ?Subroutine1 & 0xFFFF
    125                      yL = yMag * y + y0;
    126                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
    127                    } else {
   \                     ??CrossCallReturnLabel_1:
   \   000361   12....       LCALL   ?XSTACK_DISP0_8
   \   000364   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000367   F5..         MOV     ?V0 + 0,A
   \   000369   E9           MOV     A,R1
   \   00036A   34FF         ADDC    A,#-0x1
   \   00036C   F5..         MOV     ?V0 + 1,A
   \   00036E   78..         MOV     R0,#?V0 + 0
   \   000370   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000373   EA           MOV     A,R2
   \   000374   25..         ADD     A,?V0 + 14
   \   000376   F8           MOV     R0,A
   \   000377   EB           MOV     A,R3
   \   000378   35..         ADDC    A,?V0 + 15
   \   00037A   F9           MOV     R1,A
   \   00037B   E8           MOV     A,R0
   \   00037C   24FF         ADD     A,#-0x1
   \   00037E   F5..         MOV     ?V0 + 0,A
   \   000380   E9           MOV     A,R1
   \   000381   34FF         ADDC    A,#-0x1
   \   000383   F5..         MOV     ?V0 + 1,A
   \   000385   78..         MOV     R0,#?V0 + 0
   \   000387   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038A   12....       LCALL   ??LCD_FillRect?relay
   \   00038D   7404         MOV     A,#0x4
   \   00038F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000392   8049         SJMP    ??_DrawBitmap_RLE8_24
    128                      #if 1 /* High speed variant */
    129                        if (y + y0>= GUI_Context.ClipRect.y0)
   \                     ??_DrawBitmap_RLE8_23:
   \   000394   7401         MOV     A,#0x1
   \   000396   12....       LCALL   ?XSTACK_DISP0_8
   \   000399   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00039C   90....       MOV     DPTR,#GUI_Context + 6
   \   00039F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0003A2   EC           MOV     A,R4
   \   0003A3   98           SUBB    A,R0
   \   0003A4   ED           MOV     A,R5
   \   0003A5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0003A8   4033         JC      ??_DrawBitmap_RLE8_24
    130                          if (x >= GUI_Context.ClipRect.x0)
   \   0003AA   90....       MOV     DPTR,#GUI_Context + 4
   \   0003AD   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0003B0   EA           MOV     A,R2
   \   0003B1   98           SUBB    A,R0
   \   0003B2   EB           MOV     A,R3
   \   0003B3   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0003B6   4025         JC      ??_DrawBitmap_RLE8_24
    131                            if (x <= GUI_Context.ClipRect.x1)
   \   0003B8   90....       MOV     DPTR,#GUI_Context + 8
   \   0003BB   C3           CLR     C
   \   0003BC   E0           MOVX    A,@DPTR
   \   0003BD   9A           SUBB    A,R2
   \   0003BE   A3           INC     DPTR
   \   0003BF   E0           MOVX    A,@DPTR
   \   0003C0   9B           SUBB    A,R3
   \   0003C1   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003C3   65D0         XRL     A,PSW
   \   0003C5   33           RLC     A
   \   0003C6   4015         JC      ??_DrawBitmap_RLE8_24
    132                              LCDDEV_L0_SetPixelIndex(x, y + y0, PixelIndex);
   \   0003C8                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   0003C8   78..         MOV     R0,#?V0 + 0
   \   0003CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003CD   7403         MOV     A,#0x3
   \   0003CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D2   12....       LCALL   ?Subroutine5 & 0xFFFF
    133                      #else
    134                        LCD_SetPixelIndex(x, y + y0, PixelIndex);
    135                      #endif
    136                    }
   \                     ??CrossCallReturnLabel_12:
   \   0003D5   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   0003D8   7402         MOV     A,#0x2
   \   0003DA   12....       LCALL   ?DEALLOC_XSTACK8
    137                  }
    138                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE8_24:
   \   0003DD   EE           MOV     A,R6
   \   0003DE   2401         ADD     A,#0x1
   \   0003E0   0E           INC     R6
   \   0003E1   EF           MOV     A,R7
   \   0003E2   3400         ADDC    A,#0x0
   \   0003E4   FF           MOV     R7,A
   \   0003E5   7424         MOV     A,#0x24
   \   0003E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EA   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0003ED   EE           MOV     A,R6
   \   0003EE   98           SUBB    A,R0
   \   0003EF   EF           MOV     A,R7
   \   0003F0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0003F3   400F         JC      ??_DrawBitmap_RLE8_25
    139                    xi=0; y++;
   \   0003F5   7E00         MOV     R6,#0x0
   \   0003F7   7F00         MOV     R7,#0x0
   \   0003F9   12....       LCALL   ?Subroutine11 & 0xFFFF
    140                    if (y >= ysize)
   \                     ??CrossCallReturnLabel_34:
   \   0003FC   12....       LCALL   ?Subroutine9 & 0xFFFF
    141                      break;
    142                  }
   \                     ??CrossCallReturnLabel_30:
   \   0003FF   4003         JC      $+5
   \   000401   02....       LJMP    ??_DrawBitmap_RLE8_10 & 0xFFFF
    143                } while (--Data);
   \                     ??_DrawBitmap_RLE8_25:
   \   000404   85..82       MOV     DPL,?XSP + 0
   \   000407   85..83       MOV     DPH,?XSP + 1
   \   00040A   E0           MOVX    A,@DPTR
   \   00040B   14           DEC     A
   \   00040C   F0           MOVX    @DPTR,A
   \   00040D   7003         JNZ     $+5
   \   00040F   02....       LJMP    ??_DrawBitmap_RLE8_10 & 0xFFFF
   \                     ??_DrawBitmap_RLE8_12:
   \   000412   85..82       MOV     DPL,?V0 + 6
   \   000415   85..83       MOV     DPH,?V0 + 7
   \   000418   E0           MOVX    A,@DPTR
   \   000419   FC           MOV     R4,A
   \   00041A   A3           INC     DPTR
   \   00041B   8582..       MOV     ?V0 + 6,DPL
   \   00041E   8583..       MOV     ?V0 + 7,DPH
   \   000421   700A         JNZ     ??_DrawBitmap_RLE8_26
   \   000423   7405         MOV     A,#0x5
   \   000425   12....       LCALL   ?XSTACK_DISP0_8
   \   000428   E0           MOVX    A,@DPTR
   \   000429   A2E0         MOV     C,0xE0 /* A   */.0
   \   00042B   50B0         JNC     ??_DrawBitmap_RLE8_24
   \                     ??_DrawBitmap_RLE8_26:
   \   00042D   7406         MOV     A,#0x6
   \   00042F   12....       LCALL   ?XSTACK_DISP0_8
   \   000432   E0           MOVX    A,@DPTR
   \   000433   2E           ADD     A,R6
   \   000434   FA           MOV     R2,A
   \   000435   A3           INC     DPTR
   \   000436   E0           MOVX    A,@DPTR
   \   000437   3F           ADDC    A,R7
   \   000438   FB           MOV     R3,A
   \   000439   7403         MOV     A,#0x3
   \   00043B   12....       LCALL   ?XSTACK_DISP0_8
   \   00043E   12....       LCALL   ?Subroutine4 & 0xFFFF
    144              }
    145            }
   \                     ??CrossCallReturnLabel_9:
   \   000441   7003         JNZ     $+5
   \   000443   02....       LJMP    ??_DrawBitmap_RLE8_21 & 0xFFFF
   \   000446   EC           MOV     A,R4
   \   000447   C3           CLR     C
   \   000448   33           RLC     A
   \   000449   F8           MOV     R0,A
   \   00044A   E4           CLR     A
   \   00044B   33           RLC     A
   \   00044C   F9           MOV     R1,A
   \   00044D   7403         MOV     A,#0x3
   \   00044F   12....       LCALL   ?XSTACK_DISP0_8
   \   000452   E0           MOVX    A,@DPTR
   \   000453   28           ADD     A,R0
   \   000454   FC           MOV     R4,A
   \   000455   A3           INC     DPTR
   \   000456   E0           MOVX    A,@DPTR
   \   000457   39           ADDC    A,R1
   \   000458   8C82         MOV     DPL,R4
   \   00045A   F583         MOV     DPH,A
   \   00045C   E0           MOVX    A,@DPTR
   \   00045D   F5..         MOV     ?V0 + 0,A
   \   00045F   A3           INC     DPTR
   \   000460   E0           MOVX    A,@DPTR
   \   000461   F5..         MOV     ?V0 + 1,A
   \   000463   02....       LJMP    ??_DrawBitmap_RLE8_22 & 0xFFFF
    146            LCD_ACOLORINDEX[0] = aColorIndex[0];
   \                     ??_DrawBitmap_RLE8_11:
   \   000466   7408         MOV     A,#0x8
   \   000468   12....       LCALL   ?XSTACK_DISP0_8
   \   00046B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00046E   90....       MOV     DPTR,#GUI_Context
   \   000471   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    147            LCD_ACOLORINDEX[1] = aColorIndex[1];
   \                     ??CrossCallReturnLabel_44:
   \   000474   740A         MOV     A,#0xa
   \   000476   12....       LCALL   ?XSTACK_DISP0_8
   \   000479   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00047C   90....       MOV     DPTR,#GUI_Context + 2
   \   00047F   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    148          }
   \                     ??CrossCallReturnLabel_45:
   \   000482   740C         MOV     A,#0xc
   \   000484   12....       LCALL   ?DEALLOC_XSTACK8
   \   000487   7F10         MOV     R7,#0x10
   \   000489   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 10,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V0 + 11,A
   \   00000B   78..         MOV     R0,#?V0 + 10
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 4
   \   000003   95..         SUBB    A,?V0 + 2
   \   000005   E5..         MOV     A,?V0 + 5
   \   000007   95..         SUBB    A,?V0 + 3
   \   000009   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000B   65D0         XRL     A,PSW
   \   00000D   33           RLC     A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   99           SUBB    A,R1
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   C3           CLR     C
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 5
   \   000008   FD           MOV     R5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FC           MOV     R4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FD           MOV     R5,A
   \   000007                ; Setup parameters for call to function LCD_FillRect
   \   000007                ; Setup parameters for call to function LCD_FillRect
   \   000007   EC           MOV     A,R4
   \   000008   25..         ADD     A,?V0 + 12
   \   00000A   F8           MOV     R0,A
   \   00000B   ED           MOV     A,R5
   \   00000C   35..         ADDC    A,?V0 + 13
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   24FF         ADD     A,#-0x1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   7583..       MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
   \   000006   7582..       MOV     DPL,#(GUI_Context + 10) & 0xff
   \   000009   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000C   E8           MOV     A,R0
   \   00000D   2401         ADD     A,#0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   A8..         MOV     R0,?V0 + 12
   \   000009   E8           MOV     A,R0
   \   00000A   85..F0       MOV     B,?V0 + 4
   \   00000D   A4           MUL     AB
   \   00000E   C8           XCH     A,R0
   \   00000F   ACF0         MOV     R4,B
   \   000011   85..F0       MOV     B,?V0 + 5
   \   000014   A4           MUL     AB
   \   000015   2C           ADD     A,R4
   \   000016   FC           MOV     R4,A
   \   000017   85..F0       MOV     B,?V0 + 4
   \   00001A   E5..         MOV     A,?V0 + 13
   \   00001C   A4           MUL     AB
   \   00001D   2C           ADD     A,R4
   \   00001E   F9           MOV     R1,A
   \   00001F   7401         MOV     A,#0x1
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F9           MOV     R1,A
   \   000001   90....       MOV     DPTR,#Cache + 4
   \   000004                REQUIRE ??Subroutine14_0
   \   000004                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    149          
    150          /*********************************************************************
    151          *
    152          *       Public data
    153          *
    154          **********************************************************************
    155          */
    156          /*********************************************************************
    157          *
    158          *       GUI_BitmapMethodsRLE8
    159          */

   \                                 In  segment XDATA_ROM_C, align 1
    160          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE8 = {
   \                     GUI_BitmapMethodsRLE8:
   \   000000   ....         DW ??_DrawBitmap_RLE8?relay
   \   000002   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_RLE8?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_RLE8
    161            _DrawBitmap_RLE8,
    162            NULL
    163          };
    164          
    165          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     _DrawBitmap_RLE8              4      0     52
       -> LCD_GetpPalConvTable     0      0     72
       -> LCD_FillRect             0      0     80
       -> LCD_DrawHLine            0      0     76
       -> LCD_SetColorIndex        0      0     72
       -> LCD_FillRect             0      0     80
       -> LCD_L0_SetPixelIndex     0      0     76


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     Cache                       8
     _DrawBitmap_RLE8         1164
     ?Subroutine11              13
     ?Subroutine10              14
     ?Subroutine9               15
     ?Subroutine8                7
     ?Subroutine7                4
     ?Subroutine12               6
     ?Subroutine6                5
     ?Subroutine5               10
     ?Subroutine4                6
     ?Subroutine3               19
     ?Subroutine2               16
     ?Subroutine13               9
     ?Subroutine1               34
     ?Subroutine0                4
     ??Subroutine14_0            6
     GUI_BitmapMethodsRLE8       4
     ??_DrawBitmap_RLE8?relay    6

 
 1 332 bytes in segment BANKED_CODE
     6 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_ROM_C
     8 bytes in segment XDATA_Z
 
 1 338 bytes of CODE  memory
     4 bytes of CONST memory
     8 bytes of XDATA memory

Errors: none
Warnings: none
