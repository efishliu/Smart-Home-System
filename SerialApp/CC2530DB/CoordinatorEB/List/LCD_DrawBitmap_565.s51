///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jun/2016  16:18:09 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\C /
//                          ore\LCD_DrawBitmap_565.c                          /
//    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Components\uCGUI\Core\LCD_DrawBitmap_565.c   /
//                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D  /
//                          LCD_SUPPORTED -D NV_INIT -lC                      /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\    /
//                          -lA F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ /
//                          ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Utilities\SerialApp\CC2530DB\CoordinatorEB\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\ -I                    /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\Public\ -I          /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\uCGUI\MultiLayer\ -I       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโล /
//                          ฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\Coordinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\ZMain\TI2530DB\ -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\ -I                       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\single_chip\ -I           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z /
//                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม /
//                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 /
//                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\LCD /
//                          _DrawBitmap_565.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_DrawBitmap_565

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        FUNCTION ??_DrawBitmap_565?relay,0203H
        PUBLIC GUI_BitmapMethods565
        FUNCTION _DrawBitmap_565,021603H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 50, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
LCD_GetColorIndex   SYMBOL "LCD_GetColorIndex"
LCD_GetFixedPaletteEx SYMBOL "LCD_GetFixedPaletteEx"
LCD_GetSwapRBEx     SYMBOL "LCD_GetSwapRBEx"
LCD_DrawBitmap      SYMBOL "LCD_DrawBitmap"
LCD_Index2Color_565 SYMBOL "LCD_Index2Color_565"
LCD_SetColor        SYMBOL "LCD_SetColor"
LCD_L0_SetPixelIndex SYMBOL "LCD_L0_SetPixelIndex"
LCD_FillRect        SYMBOL "LCD_FillRect"
GUI_SetColorIndex   SYMBOL "GUI_SetColorIndex"
??GUI_SetColorIndex?relay SYMBOL "?relay", GUI_SetColorIndex
??LCD_DrawBitmap?relay SYMBOL "?relay", LCD_DrawBitmap
??LCD_FillRect?relay SYMBOL "?relay", LCD_FillRect
??LCD_GetColorIndex?relay SYMBOL "?relay", LCD_GetColorIndex
??LCD_GetFixedPaletteEx?relay SYMBOL "?relay", LCD_GetFixedPaletteEx
??LCD_GetSwapRBEx?relay SYMBOL "?relay", LCD_GetSwapRBEx
??LCD_Index2Color_565?relay SYMBOL "?relay", LCD_Index2Color_565
??LCD_L0_SetPixelIndex?relay SYMBOL "?relay", LCD_L0_SetPixelIndex
??LCD_SetColor?relay SYMBOL "?relay", LCD_SetColor

        EXTERN LCD_GetColorIndex
        FUNCTION LCD_GetColorIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_GetFixedPaletteEx
        FUNCTION LCD_GetFixedPaletteEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_GetSwapRBEx
        FUNCTION LCD_GetSwapRBEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_DrawBitmap
        FUNCTION LCD_DrawBitmap,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_Index2Color_565
        FUNCTION LCD_Index2Color_565,0602H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_SetColor
        FUNCTION LCD_SetColor,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_SetPixelIndex
        FUNCTION LCD_L0_SetPixelIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_FillRect
        FUNCTION LCD_FillRect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GUI_SetColorIndex
        FUNCTION GUI_SetColorIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??GUI_SetColorIndex?relay
        FUNCTION ??GUI_SetColorIndex?relay,00H
        EXTERN ??LCD_DrawBitmap?relay
        FUNCTION ??LCD_DrawBitmap?relay,00H
        EXTERN ??LCD_FillRect?relay
        FUNCTION ??LCD_FillRect?relay,00H
        EXTERN ??LCD_GetColorIndex?relay
        FUNCTION ??LCD_GetColorIndex?relay,00H
        EXTERN ??LCD_GetFixedPaletteEx?relay
        FUNCTION ??LCD_GetFixedPaletteEx?relay,00H
        EXTERN ??LCD_GetSwapRBEx?relay
        FUNCTION ??LCD_GetSwapRBEx?relay,00H
        EXTERN ??LCD_Index2Color_565?relay
        FUNCTION ??LCD_Index2Color_565?relay,00H
        EXTERN ??LCD_L0_SetPixelIndex?relay
        FUNCTION ??LCD_L0_SetPixelIndex?relay,00H
        EXTERN ??LCD_SetColor?relay
        FUNCTION ??LCD_SetColor?relay,00H
        EXTERN GUI_Context

// F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_DrawBitmap_565.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/GUI
//    4 *                        Universal graphic software for embedded applications
//    5 *
//    6 *                       (c) Copyright 2002, Micrium Inc., Weston, FL
//    7 *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
//    8 *
//    9 *              ตC/GUI is protected by international copyright laws. Knowledge of the
//   10 *              source code may not be used to write a similar product. This file may
//   11 *              only be used in accordance with a license and should not be redistributed
//   12 *              in any way. We appreciate your understanding and fairness.
//   13 *
//   14 ----------------------------------------------------------------------
//   15 File        : LCD_DrawBitmap_565.c
//   16 Purpose     : Drawing routine for drawing a 16bpp bitmap
//   17 ---------------------------END-OF-HEADER------------------------------
//   18 */
//   19 
//   20 #include <stddef.h>           /* needed for definition of NULL */
//   21 #include "GUI_Private.h"
//   22 #include "LCD_Private.h"
//   23 
//   24 /*********************************************************************
//   25 *
//   26 *       Static code
//   27 *
//   28 **********************************************************************
//   29 */
//   30 /*********************************************************************
//   31 *
//   32 *       _DrawBitmap_565
//   33 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   34 static void _DrawBitmap_565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
_DrawBitmap_565:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function _DrawBitmap_565
        CODE
        FUNCALL _DrawBitmap_565, LCD_GetColorIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_GetFixedPaletteEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_GetSwapRBEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_DrawBitmap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_Index2Color_565
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_SetColor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_L0_SetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_Index2Color_565
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_SetColor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, LCD_FillRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_565, GUI_SetColorIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     ?V0 + 12,R4
        MOV     ?V0 + 13,R5
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//   35   const U16 * pData;
//   36   int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
//   37   GUI_USE_PARA(pLogPal);
//   38   OldIndex = LCD_GetColorIndex();
        ; Setup parameters for call to function LCD_GetColorIndex
        LCALL   ??LCD_GetColorIndex?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   39   PrevIndex = OldIndex;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   40   pData = (const U16 *)pPixel;
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//   41   Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
        ; Setup parameters for call to function LCD_GetFixedPaletteEx
        MOV     DPTR,#GUI_Context + 13
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??LCD_GetFixedPaletteEx?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
//   42   SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
        ; Setup parameters for call to function LCD_GetSwapRBEx
        MOV     DPTR,#GUI_Context + 13
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??LCD_GetSwapRBEx?relay
//   43   Mag = (xMag | yMag);
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOV     R1,A
//   44   BytesPerLine = xsize * 2;
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R6,A
        MOV     A,?V0 + 3
        RLC     A
        MOV     R7,A
//   45   #if GUI_SUPPORT_MEMDEV == 0
//   46   if ((Mode == 565) && (SwapRB == 0) && (Mag == 1)) {
        MOV     A,#0x35
        XRL     A,?V0 + 8
        JNZ     ??_DrawBitmap_565_0
        MOV     A,#0x2
        XRL     A,?V0 + 9
??_DrawBitmap_565_0:
        JNZ     ??_DrawBitmap_565_1
        MOV     A,R2
        ORL     A,R3
        JNZ     ??_DrawBitmap_565_1
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??_DrawBitmap_565_2
        MOV     A,R1
??_DrawBitmap_565_2:
        JNZ     ??_DrawBitmap_565_1
//   47     UseDrawBitmap = 1;
//   48   }
//   49   #else
//   50   if (GUI_Context.pDeviceAPI->pMemDevAPI) {
//   51     if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
//   52         ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 0)))  && (Mag == 1)) {
//   53       UseDrawBitmap = 1;
//   54     }
//   55   }
//   56   #endif
//   57   if (UseDrawBitmap) {
//   58     LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
        ; Setup parameters for call to function LCD_DrawBitmap
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??LCD_DrawBitmap?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        LJMP    ??_DrawBitmap_565_3 & 0xFFFF
//   59   } else {
//   60     if (Mag == 1) {
??_DrawBitmap_565_1:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??_DrawBitmap_565_4
        MOV     A,R1
??_DrawBitmap_565_4:
        JZ      $+5
        LJMP    ??_DrawBitmap_565_5 & 0xFFFF
//   61       /* Perform clipping */
//   62       int x1, y1, Diff;
//   63       y1 = y0 + ysize - 1;
        MOV     A,?V0 + 12
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,?V0 + 13
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R5,A
//   64       x1 = x0 + xsize - 1;
        MOV     A,?V0 + 14
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 8,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 9,A
//   65       /* Clip Y */
//   66       if (y0 < GUI_Context.ClipRect.y0) {
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,?V0 + 12
        SUBB    A,R0
        MOV     A,?V0 + 13
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        JNC     ??CrossCallReturnLabel_13
//   67         Diff = GUI_Context.ClipRect.y0 -y0;
        MOV     DPTR,#GUI_Context + 6
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 12
        MOV     R0,A
        MOV     A,R3
        SUBB    A,?V0 + 13
        MOV     R1,A
//   68         y0   = GUI_Context.ClipRect.y0;
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
//   69         #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
//   70           pData += (U32)Diff * (U32)BytesPerLine / 2;
//   71         #else
//   72           pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,R6
        MUL     AB
        XCH     A,R2
        MOV     ?V0 + 10,B
        MOV     B,R7
        MUL     AB
        ADD     A,?V0 + 10
        MOV     ?V0 + 10,A
        MOV     B,R6
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 10
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        LCALL   ?Subroutine9 & 0xFFFF
//   73         #endif
//   74         ysize -= Diff;
??CrossCallReturnLabel_17:
        LCALL   ?Subroutine7 & 0xFFFF
//   75       }
//   76       Diff = y1 - GUI_Context.ClipRect.y1;
??CrossCallReturnLabel_13:
        MOV     DPTR,#GUI_Context + 10
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R5
        LCALL   ?Subroutine5 & 0xFFFF
//   77       if (Diff > 0) {
??CrossCallReturnLabel_23:
        JC      ??CrossCallReturnLabel_14
//   78         ysize -= Diff;
        LCALL   ?Subroutine7 & 0xFFFF
//   79       }
//   80       if (ysize <=0) {
??CrossCallReturnLabel_14:
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,#0x1
        MOV     A,?V0 + 5
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_25:
        JNC     $+5
        LJMP    ??_DrawBitmap_565_3 & 0xFFFF
//   81 		    return;
//   82       }
//   83       /* Clip right side */
//   84       Diff = x1 - GUI_Context.ClipRect.x1;
        MOV     DPTR,#GUI_Context + 8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 9
        LCALL   ?Subroutine5 & 0xFFFF
//   85       if (Diff > 0) {
??CrossCallReturnLabel_24:
        JC      ??CrossCallReturnLabel_15
//   86         xsize -= Diff;
        LCALL   ?Subroutine8 & 0xFFFF
//   87       }
//   88       /* Clip left side */
//   89       Diff =0;
//   90       if (x0 < GUI_Context.ClipRect.x0) {
??CrossCallReturnLabel_15:
        MOV     DPTR,#GUI_Context + 4
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,?V0 + 14
        SUBB    A,R0
        MOV     A,?V0 + 15
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        JNC     ??_DrawBitmap_565_6
//   91         Diff = GUI_Context.ClipRect.x0-x0;
        MOV     DPTR,#GUI_Context + 4
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 14
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 15
        MOV     R1,A
//   92 			  xsize -= Diff;
        LCALL   ?Subroutine8 & 0xFFFF
//   93         pData += Diff; 
??CrossCallReturnLabel_16:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        LCALL   ?Subroutine9 & 0xFFFF
//   94         x0 += Diff; 
??CrossCallReturnLabel_18:
        MOV     A,?V0 + 14
        ADD     A,R0
        MOV     ?V0 + 14,A
        MOV     A,?V0 + 15
        ADDC    A,R1
        MOV     ?V0 + 15,A
//   95       }
//   96       if (xsize <=0) {
??_DrawBitmap_565_6:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,#0x1
        MOV     A,?V0 + 3
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_26:
        JNC     $+5
        LJMP    ??_DrawBitmap_565_3 & 0xFFFF
//   97 		    return;
//   98       }
//   99       /* Simple, unmagnified output using LCD_L0_SetPixel() */
//  100       for (y = 0; y < ysize; y++) {
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        LJMP    ??_DrawBitmap_565_7 & 0xFFFF
//  101         int x;
//  102         const U16 * p = pData;
//  103         for (x = 0; x < xsize; x++) {
//  104           U16 Index;
//  105           Index = *p++;
??_DrawBitmap_565_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  106           if (Index != PrevIndex) {
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??_DrawBitmap_565_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
??_DrawBitmap_565_9:
        JZ      ??_DrawBitmap_565_10
//  107             LCD_SetColor(LCD_Index2Color_565(Index));
        ; Setup parameters for call to function LCD_SetColor
        ; Setup parameters for call to function LCD_Index2Color_565
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ?Subroutine11 & 0xFFFF
//  108             PrevIndex = Index;
//  109           }
??CrossCallReturnLabel_21:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  110           LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
??_DrawBitmap_565_10:
        ; Setup parameters for call to function LCD_L0_SetPixelIndex
        MOV     DPTR,#GUI_Context + 2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,?V0 + 10
        ADD     A,?V0 + 12
        MOV     R4,A
        MOV     A,?V0 + 11
        ADDC    A,?V0 + 13
        MOV     R5,A
        MOV     A,?V0 + 8
        ADD     A,?V0 + 14
        MOV     R2,A
        MOV     A,?V0 + 9
        ADDC    A,?V0 + 15
        MOV     R3,A
        LCALL   ??LCD_L0_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  111         }
        MOV     A,?V0 + 8
        ADD     A,#0x1
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
??_DrawBitmap_565_11:
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,?V0 + 2
        MOV     A,?V0 + 9
        SUBB    A,?V0 + 3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmap_565_8 & 0xFFFF
//  112         pData += BytesPerLine / 2;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,?V0 + 10
        ADD     A,#0x1
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
??_DrawBitmap_565_7:
        CLR     C
        MOV     A,?V0 + 10
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 11
        SUBB    A,?V0 + 5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??_DrawBitmap_565_12 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        SJMP    ??_DrawBitmap_565_11
//  113       }
//  114     } else {
//  115       /* Magnified output using LCD_FillRect() */
//  116       int x,y;
//  117       int yi;
//  118       for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
??_DrawBitmap_565_5:
        MOV     ?V0 + 8,?V0 + 12
        MOV     ?V0 + 9,?V0 + 13
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??_DrawBitmap_565_13 & 0xFFFF
//  119         int yMax;
//  120         yMax = y + yMag - 1;
//  121         /* Draw if within clip area */
//  122         if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
//  123           int xi;
//  124           const U16 GUI_UNI_PTR * p = pData;
//  125           for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
//  126             U16 Index;
//  127             Index = *p++;
??_DrawBitmap_565_14:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  128             if (Index != PrevIndex) {
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 12
        JNZ     ??_DrawBitmap_565_15
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 13
??_DrawBitmap_565_15:
        JZ      ??_DrawBitmap_565_16
//  129               LCD_SetColor(LCD_Index2Color_565(Index));
        ; Setup parameters for call to function LCD_SetColor
        ; Setup parameters for call to function LCD_Index2Color_565
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ?Subroutine11 & 0xFFFF
//  130               PrevIndex = Index;
//  131             }
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 12
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 13
        MOVX    @DPTR,A
//  132             LCD_FillRect(x, y, x + xMag - 1, yMax);
??_DrawBitmap_565_16:
        ; Setup parameters for call to function LCD_FillRect
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 10
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 11
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 12,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 13,A
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        LCALL   ??LCD_FillRect?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  133           }
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 10
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 11
        MOV     ?V0 + 11,A
??_DrawBitmap_565_17:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmap_565_14 & 0xFFFF
//  134         }
//  135         pData += BytesPerLine / 2;
??_DrawBitmap_565_18:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 8
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 9
        MOV     ?V0 + 9,A
??_DrawBitmap_565_13:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??_DrawBitmap_565_12
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 8
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 9
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        JC      ??_DrawBitmap_565_18
        MOV     DPTR,#GUI_Context + 10
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 8
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??_DrawBitmap_565_18
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
        MOV     ?V0 + 10,?V0 + 14
        MOV     ?V0 + 11,?V0 + 15
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??_DrawBitmap_565_17 & 0xFFFF
//  136       }
//  137     }
//  138     GUI_SetColorIndex(OldIndex);
??_DrawBitmap_565_12:
        ; Setup parameters for call to function GUI_SetColorIndex
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??GUI_SetColorIndex?relay
??_DrawBitmap_565_3:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  139   }
//  140 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ??LCD_Index2Color_565?relay
        LCALL   ??LCD_SetColor?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 6
        ADD     A,R0
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,R1
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,?V0 + 6
        ADD     A,R2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,R3
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,R0
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        SUBB    A,R1
        MOV     ?V0 + 5,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        SUBB    A,R1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV     DPTR,#GUI_Context + 6
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOVX    A,@DPTR
        ADD     A,#0x2
        INC     R0
        INC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
//  141 
//  142 /*********************************************************************
//  143 *
//  144 *       Public data
//  145 *
//  146 **********************************************************************
//  147 */
//  148 /*********************************************************************
//  149 *
//  150 *       GUI_BitmapMethods565
//  151 */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  152 const GUI_BITMAP_METHODS GUI_BitmapMethods565 = {
GUI_BitmapMethods565:
        DATA16
        DW ??_DrawBitmap_565?relay
        DW ??LCD_Index2Color_565?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_DrawBitmap_565?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _DrawBitmap_565

        END
//  153   _DrawBitmap_565,
//  154   LCD_Index2Color_565
//  155 };
//  156 
//  157 /*************************** End of file ****************************/
// 
// 1 175 bytes in segment BANKED_CODE
//     6 bytes in segment BANK_RELAYS
//     4 bytes in segment XDATA_ROM_C
// 
// 1 181 bytes of CODE  memory
//     4 bytes of CONST memory
//
//Errors: none
//Warnings: none
