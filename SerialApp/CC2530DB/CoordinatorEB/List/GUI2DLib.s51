///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jun/2016  16:18:21 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\C /
//                          ore\GUI2DLib.c                                    /
//    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Components\uCGUI\Core\GUI2DLib.c -D          /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D     /
//                          LCD_SUPPORTED -D NV_INIT -lC                      /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\    /
//                          -lA F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ /
//                          ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Utilities\SerialApp\CC2530DB\CoordinatorEB\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\ -I                    /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\Public\ -I          /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\uCGUI\MultiLayer\ -I       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโล /
//                          ฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\Coordinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\ZMain\TI2530DB\ -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\ -I                       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\single_chip\ -I           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z /
//                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม /
//                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 /
//                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\GUI /
//                          2DLib.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GUI2DLib

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_ADD_X
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_NEG
        EXTERN ?L_SHL
        EXTERN ?L_SUB
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_GE_X
        EXTERN ?SL_GT
        EXTERN ?SL_SHR
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??GL_DrawLine1?relay
        FUNCTION ??GL_DrawLine1?relay,0203H
        PUBLIC ??GL_DrawLine?relay
        FUNCTION ??GL_DrawLine?relay,0203H
        PUBLIC ??GL_DrawLineTo?relay
        FUNCTION ??GL_DrawLineTo?relay,0203H
        PUBLIC ??GL_DrawPoint?relay
        FUNCTION ??GL_DrawPoint?relay,0203H
        PUBLIC ??GL_DrawPolygon?relay
        FUNCTION ??GL_DrawPolygon?relay,0203H
        PUBLIC ??GL_MoveTo?relay
        FUNCTION ??GL_MoveTo?relay,0203H
        PUBLIC ??GUI_DrawLine?relay
        FUNCTION ??GUI_DrawLine?relay,0203H
        PUBLIC ??GUI_DrawLineRel?relay
        FUNCTION ??GUI_DrawLineRel?relay,0203H
        PUBLIC ??GUI_DrawLineTo?relay
        FUNCTION ??GUI_DrawLineTo?relay,0203H
        PUBLIC ??GUI_DrawPoint?relay
        FUNCTION ??GUI_DrawPoint?relay,0203H
        PUBLIC ??GUI_DrawPolygon?relay
        FUNCTION ??GUI_DrawPolygon?relay,0203H
        PUBLIC ??GUI_DrawRect?relay
        FUNCTION ??GUI_DrawRect?relay,0203H
        PUBLIC ??GUI_MoveRel?relay
        FUNCTION ??GUI_MoveRel?relay,0203H
        PUBLIC ??GUI_MoveTo?relay
        FUNCTION ??GUI_MoveTo?relay,0203H
        PUBLIC ??GUI_cos?relay
        FUNCTION ??GUI_cos?relay,0203H
        PUBLIC ??GUI_sin?relay
        FUNCTION ??GUI_sin?relay,0203H
        FUNCTION ??_SwapInt?relay,0203H
        FUNCTION ??_atan2?relay,0203H
        PUBLIC GL_DrawLine
        FUNCTION GL_DrawLine,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 48, STACK
        PUBLIC GL_DrawLine1
        FUNCTION GL_DrawLine1,021203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC GL_DrawLineTo
        FUNCTION GL_DrawLineTo,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC GL_DrawPoint
        FUNCTION GL_DrawPoint,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GL_DrawPolygon
        FUNCTION GL_DrawPolygon,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC GL_MoveTo
        FUNCTION GL_MoveTo,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC GUI_DrawLine
        FUNCTION GUI_DrawLine,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC GUI_DrawLineRel
        FUNCTION GUI_DrawLineRel,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC GUI_DrawLineTo
        FUNCTION GUI_DrawLineTo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC GUI_DrawPoint
        FUNCTION GUI_DrawPoint,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GUI_DrawPolygon
        FUNCTION GUI_DrawPolygon,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC GUI_DrawRect
        FUNCTION GUI_DrawRect,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC GUI_MoveRel
        FUNCTION GUI_MoveRel,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC GUI_MoveTo
        FUNCTION GUI_MoveTo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GUI_cos
        FUNCTION GUI_cos,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC GUI_sin
        FUNCTION GUI_sin,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK _A_IEN0
        FUNCTION _SwapInt,0203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_2
        PUBWEAK __Constant_20
        PUBWEAK __Constant_200
        PUBWEAK __Constant_7fff
        FUNCTION _atan2,0203H
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC aTan
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
GL_FillPolygon      SYMBOL "GL_FillPolygon"
LCD_DrawHLine       SYMBOL "LCD_DrawHLine"
LCD_DrawVLine       SYMBOL "LCD_DrawVLine"
LCD_DrawPixel       SYMBOL "LCD_DrawPixel"
GL_FillCircle       SYMBOL "GL_FillCircle"
??GL_FillCircle?relay SYMBOL "?relay", GL_FillCircle
??GL_FillPolygon?relay SYMBOL "?relay", GL_FillPolygon
??LCD_DrawHLine?relay SYMBOL "?relay", LCD_DrawHLine
??LCD_DrawPixel?relay SYMBOL "?relay", LCD_DrawPixel
??LCD_DrawVLine?relay SYMBOL "?relay", LCD_DrawVLine
GL_DrawLine1        SYMBOL "GL_DrawLine1"
??GL_DrawLine1?relay SYMBOL "?relay", GL_DrawLine1
GL_DrawLine         SYMBOL "GL_DrawLine"
??GL_DrawLine?relay SYMBOL "?relay", GL_DrawLine
GL_DrawLineTo       SYMBOL "GL_DrawLineTo"
??GL_DrawLineTo?relay SYMBOL "?relay", GL_DrawLineTo
GL_DrawPoint        SYMBOL "GL_DrawPoint"
??GL_DrawPoint?relay SYMBOL "?relay", GL_DrawPoint
GL_DrawPolygon      SYMBOL "GL_DrawPolygon"
??GL_DrawPolygon?relay SYMBOL "?relay", GL_DrawPolygon
GL_MoveTo           SYMBOL "GL_MoveTo"
??GL_MoveTo?relay   SYMBOL "?relay", GL_MoveTo
GUI_DrawLine        SYMBOL "GUI_DrawLine"
??GUI_DrawLine?relay SYMBOL "?relay", GUI_DrawLine
GUI_DrawLineRel     SYMBOL "GUI_DrawLineRel"
??GUI_DrawLineRel?relay SYMBOL "?relay", GUI_DrawLineRel
GUI_DrawLineTo      SYMBOL "GUI_DrawLineTo"
??GUI_DrawLineTo?relay SYMBOL "?relay", GUI_DrawLineTo
GUI_DrawPoint       SYMBOL "GUI_DrawPoint"
??GUI_DrawPoint?relay SYMBOL "?relay", GUI_DrawPoint
GUI_DrawPolygon     SYMBOL "GUI_DrawPolygon"
??GUI_DrawPolygon?relay SYMBOL "?relay", GUI_DrawPolygon
GUI_DrawRect        SYMBOL "GUI_DrawRect"
??GUI_DrawRect?relay SYMBOL "?relay", GUI_DrawRect
GUI_MoveRel         SYMBOL "GUI_MoveRel"
??GUI_MoveRel?relay SYMBOL "?relay", GUI_MoveRel
GUI_MoveTo          SYMBOL "GUI_MoveTo"
??GUI_MoveTo?relay  SYMBOL "?relay", GUI_MoveTo
GUI_cos             SYMBOL "GUI_cos"
??GUI_cos?relay     SYMBOL "?relay", GUI_cos
GUI_sin             SYMBOL "GUI_sin"
??GUI_sin?relay     SYMBOL "?relay", GUI_sin

        EXTERN GL_FillPolygon
        FUNCTION GL_FillPolygon,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_DrawHLine
        FUNCTION LCD_DrawHLine,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_DrawVLine
        FUNCTION LCD_DrawVLine,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_DrawPixel
        FUNCTION LCD_DrawPixel,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GL_FillCircle
        FUNCTION GL_FillCircle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??GL_FillCircle?relay
        FUNCTION ??GL_FillCircle?relay,00H
        EXTERN ??GL_FillPolygon?relay
        FUNCTION ??GL_FillPolygon?relay,00H
        EXTERN ??LCD_DrawHLine?relay
        FUNCTION ??LCD_DrawHLine?relay,00H
        EXTERN ??LCD_DrawPixel?relay
        FUNCTION ??LCD_DrawPixel?relay,00H
        EXTERN ??LCD_DrawVLine?relay
        FUNCTION ??LCD_DrawVLine?relay,00H
        EXTERN GUI_Context

// F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUI2DLib.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/GUI
//    4 *                        Universal graphic software for embedded applications
//    5 *
//    6 *                       (c) Copyright 2002, Micrium Inc., Weston, FL
//    7 *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
//    8 *
//    9 *              ตC/GUI is protected by international copyright laws. Knowledge of the
//   10 *              source code may not be used to write a similar product. This file may
//   11 *              only be used in accordance with a license and should not be redistributed
//   12 *              in any way. We appreciate your understanding and fairness.
//   13 *
//   14 ----------------------------------------------------------------------
//   15 File        : GUI2DLib.C
//   16 Purpose     : Main part of the 2D graphics library
//   17 ---------------------------END-OF-HEADER------------------------------
//   18 */
//   19 
//   20 #include <stddef.h>           /* needed for definition of NULL */
//   21 #include "GUI_Protected.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   22 #include "GUIDebug.h"
//   23 #include "hal_defs.h"
//   24 
//   25 /*********************************************************************
//   26 *
//   27 *       defines
//   28 *
//   29 **********************************************************************
//   30 */
//   31 
//   32 //#define ABS(v) ((v>0) ? v : -v)
//   33 
//   34 /*********************************************************************
//   35 *
//   36 *       static code, helper functions
//   37 *
//   38 **********************************************************************
//   39 */
//   40 /*********************************************************************
//   41 *
//   42 *       _SwapInt
//   43 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   44 static void _SwapInt(int* pa, int* pb) {
_SwapInt:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function _SwapInt
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   45   int t;
//   46   t = *pa;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   47   *pa = *pb;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine38_0 & 0xFFFF
//   48   *pb = t;
??CrossCallReturnLabel_69:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   49 }
        LJMP    ??Subroutine43_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//   50 
//   51 /*********************************************************************
//   52 *
//   53 *       Abs
//   54 */
//   55 static int Abs(int v) {
//   56   return ABS(v);
//   57 }
//   58 
//   59 /*********************************************************************
//   60 *
//   61 *       trigonometric functions
//   62 *
//   63 *  NOTE:
//   64 *   All trigonometric functions are for internal usage only and
//   65 *   use the following conventions:
//   66 *
//   67 *      Angles: 4096 <==> 360?*
//   68 **********************************************************************
//   69 */
//   70 
//   71 #if GUI_45DEG != 512
//   72   #error Wrong define for this library !
//   73 #endif
//   74 
//   75 /*********************************************************************
//   76 *
//   77 *       sin / cos (internal)
//   78 *
//   79 *  Angle : 90/1024?*  Data  : 1/1024
//   80 */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   81 static const U16 aSin[] = {
aSin:
        DATA16
        DW 0
        DW 100
        DW 200
        DW 297
        DW 392
        DW 483
        DW 569
        DW 650
        DW 724
        DW 792
        DW 851
        DW 903
        DW 946
        DW 980
        DW 1004
        DW 1019
        DW 1024
//   82   0,       /*  1/16 *90?*/
//   83   100,     /*  1/16 *90?*/
//   84   200,     /*  2/16 *90?*/
//   85   297,     /*  3/16 *90?*/
//   86   392,     /*  4/16 *90?*/
//   87   483,     /*  5/16 *90?*/
//   88   569,     /*  6/16 *90?*/
//   89   650,     /*  7/16 *90?*/
//   90   724,     /*  8/16 *90?*/
//   91   792,     /*  9/16 *90?*/
//   92   851,     /* 10/16 *90?*/
//   93   903,     /* 11/16 *90?*/
//   94   946,     /* 12/16 *90?*/
//   95   980,     /* 13/16 *90?*/
//   96   1004,    /* 14/16 *90?*/
//   97   1019,    /* 15/16 *90?*/
//   98   1024     /* 16/16 *90?*/
//   99 };
//  100 
//  101 /*********************************************************************
//  102 *
//  103 *       GUI_sin
//  104 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  105 int GUI_sin(int angle) {
GUI_sin:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GUI_sin
        CODE
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  106   char IsNeg =0;
        MOV     R6,#0x0
//  107   int i;
//  108 	U16 Faktor;
//  109   U32 t;
//  110   angle &= ((1<<12)-1);  /* reduce to 0-360 degrees */
        MOV     A,#0xf
        ANL     A,R3
        MOV     R3,A
//  111   if (angle> 2* GUI_90DEG) {
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x8
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??GUI_sin_0
//  112     angle -= 2* GUI_90DEG;
        MOV     A,R2
        ADD     A,#0x0
        MOV     A,R3
        ADDC    A,#-0x8
        MOV     R3,A
//  113     IsNeg =1;
        INC     R6
//  114   }
//  115   if (angle> GUI_90DEG) {  /* between 90-180 */
??GUI_sin_0:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x4
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??GUI_sin_1
//  116     angle = 2*GUI_90DEG-angle;   /* use sine symetry */
        CLR     A
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0x8
        SUBB    A,R3
        MOV     R3,A
//  117   }
//  118   /* Now angle is reduced to 0?<= <= 90?*/
//  119 #if 0
//  120   angle >>=2;    /* make sure we do not exceed 16 bits in calculations */
//  121   i = angle>>4;
//  122   Faktor = (1<<4)-(angle&((1<<4)-1));
//  123   r = aSin[i]*Faktor;
//  124   if (Faktor !=(1<<4)) {
//  125     r += aSin[i+1]*((1<<4)-Faktor);
//  126   }
//  127   r = (r+(1<<3)) >>4;   /* divide,incl. rounding */
//  128 #else
//  129   i = angle>>6;
??GUI_sin_1:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  130   {
//  131     Faktor = (U16)((1<<6)-(angle&((1<<6)-1)));
        MOV     A,R2
        ANL     A,#0x3f
        MOV     R0,A
        MOV     A,#0x40
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
//  132     t = aSin[i]*(U32)Faktor;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#aSin & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(aSin >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
//  133     if (Faktor !=(1<<6)) {
        MOV     A,#0x40
        XRL     A,R2
        JNZ     ??GUI_sin_2
        MOV     A,R3
??GUI_sin_2:
        JZ      ??GUI_sin_3
//  134       t += aSin[i+1]*((1<<6)-Faktor);
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R5
        RLC     A
        MOV     R5,A
        MOV     A,#(aSin + 2) & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#((aSin + 2) >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        LCALL   ?Subroutine30 & 0xFFFF
//  135     }
//  136 	}
??CrossCallReturnLabel_50:
        MOV     A,#0x40
        CLR     C
        SUBB    A,R2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 4
        MOV     B,?V0 + 6
        MUL     AB
        MOV     ?V0 + 4,A
        MOV     R0,B
        MOV     B,?V0 + 6
        MOV     A,?V0 + 5
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
//  137   t = (t+(1<<5)) >>6;   /* divide,incl. rounding */
??GUI_sin_3:
        MOV     DPTR,#__Constant_20
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
//  138 #endif
//  139   return (IsNeg) ? 0-t : t;
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??GUI_sin_4
        CLR     C
        CLR     A
        SUBB    A,?V0 + 0
        MOV     R2,A
        CLR     A
        SUBB    A,?V0 + 1
        MOV     R3,A
        SJMP    ??GUI_sin_5
??GUI_sin_4:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CFI EndBlock cfiBlock1
??GUI_sin_5:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  140 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  141 
//  142 /*********************************************************************
//  143 *
//  144 *       GUI_cos
//  145 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  146 int GUI_cos(int angle) {
GUI_cos:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function GUI_cos
        CODE
        FUNCALL GUI_cos, GUI_sin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  147   return GUI_sin(angle+GUI_90DEG);
        ; Setup parameters for call to function GUI_sin
        MOV     A,R2
        ADD     A,#0x0
        MOV     A,R3
        ADDC    A,#0x4
        MOV     R3,A
        LCALL   ??GUI_sin?relay
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  148 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  149 
//  150 /*********************************************************************
//  151 *
//  152 *       atan() (internal)
//  153 *
//  154 *  Angle : 360/4096?*/

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  155 const I16 aTan[] = {
aTan:
        DATA16
        DW 0
        DW 41
        DW 81
        DW 121
        DW 160
        DW 197
        DW 234
        DW 269
        DW 302
        DW 334
        DW 364
        DW 393
        DW 419
        DW 445
        DW 469
        DW 491
        DW 512
//  156   0,       /* atan(0/16) */
//  157   41,      /* atan(1/16) */
//  158   81,      /* atan(2/16) */
//  159   121,     /* atan(3/16) */
//  160   160,     /* atan(4/16) */
//  161   197,     /* atan(5/16) */
//  162   234,     /* atan(6/16) */
//  163   269,     /* atan(7/16) */
//  164   302,     /* atan(8/16) */
//  165   334,     /* atan(9/16) */
//  166   364,     /* atan(10/16) */
//  167   393,     /* atan(11/16) */
//  168   419,     /* atan(12/16) */
//  169   445,     /* atan(13/16) */
//  170   469,     /* atan(14/16) */
//  171   491,     /* atan(15/16) */
//  172   512      /* atan(1) = 45?= 512/1024 */
//  173 };
//  174 
//  175 /*********************************************************************
//  176 *
//  177 *       _atan0_45
//  178 *
//  179 * Calculate arctan of q, where q is any where between 0 and 1024
//  180 */
//  181 static int _atan0_45(int q) {
//  182   int r;
//  183   int i, Faktor;
//  184   /* Now angle is reduced to 0?<= <= 90?==>  0 <= <= 256*/
//  185   q >>=2;    /* make sure we do not exceed 16 bits in calculations */
//  186   i = q>>4;
//  187   Faktor = (1<<4)-(q&((1<<4)-1));
//  188   r = aTan[i]*Faktor;
//  189   if (Faktor !=(1<<4)) {
//  190     r += aTan[i+1]*((1<<4)-Faktor);
//  191   }
//  192   r = (r+(1<<3))/(1<<4);   /* divide  incl. rounding */
//  193   return r;
//  194 }
//  195 
//  196 /*********************************************************************
//  197 *
//  198 *       _atan2
//  199 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  200 static int _atan2(I32 x, I32 y) {
_atan2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function _atan2
        CODE
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
//  201   U8 q =0;
        MOV     R4,#0x0
//  202   int angle;
//  203 /* first make sure we are in angle between 0 and 45?*/
//  204   if (x<0) {
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?SL_GE_X
        JC      ??_atan2_0
//  205     q=1;
        INC     R4
//  206     x=-x;
        MOV     R0,#?V0 + 4
        LCALL   ?L_NEG
//  207   }
//  208   if (y<0) {
??_atan2_0:
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 8
        LCALL   ?SL_GE_X
        JC      ??_atan2_1
//  209     q |= (1<<1);
        MOV     A,R4
        SETB    0xE0 /* A   */.1
        MOV     R4,A
//  210     y=-y;
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
//  211   }
//  212   if (y>x) {
??_atan2_1:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?SL_GT
        JNC     ??_atan2_2
//  213     int t = y;
        MOV     R0,?V0 + 8
        MOV     R1,?V0 + 9
//  214     y=x;
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
//  215     x=t;
        MOV     ?V0 + 4,R0
        MOV     A,R1
        LCALL   ?Subroutine35 & 0xFFFF
//  216     q |= (1<<2);  
??CrossCallReturnLabel_60:
        MOV     A,R4
        SETB    0xE0 /* A   */.2
        MOV     R4,A
//  217   }
//  218   y <<=10;
//  219   y += (x/2);
//  220   y /= x;
//  221   angle = _atan0_45(y);
??_atan2_2:
        MOV     A,#0xa
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_2
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     A,#0x2
        MOV     R0,#?V0 + 8
        LCALL   ?SS_SHR
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R2
        ANL     A,#0xf
        MOV     R2,A
        MOV     A,#0x10
        CLR     C
        SUBB    A,R2
        MOV     ?V0 + 0,A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,#aTan & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(aTan >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     A,R2
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R2
        MOV     R5,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R5
        MOV     R5,A
        MOV     B,?V0 + 0
        MOV     A,R3
        MUL     AB
        ADD     A,R5
        MOV     R3,A
        MOV     A,#0x10
        XRL     A,?V0 + 0
        JNZ     ??_atan2_3
        MOV     A,?V0 + 1
??_atan2_3:
        JZ      ??_atan2_4
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#(aTan + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((aTan + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,#0x10
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R0,A
        MOV     R5,B
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R5
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
??_atan2_4:
        MOV     A,R2
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  222   if (q&(1<<2)) { /* y/x reverse ? */
        MOV     A,R4
        MOV     C,0xE0 /* A   */.2
        JNC     ??_atan2_5
//  223     angle = GUI_90DEG-angle;
        CLR     A
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0x4
        SUBB    A,R3
        MOV     R3,A
//  224   }
//  225   if (q&1) {  /* xreverse ? */
??_atan2_5:
        MOV     A,R4
        MOV     C,0xE0 /* A   */.0
        JNC     ??_atan2_6
//  226     angle = GUI_180DEG-angle;
        CLR     A
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0x8
        SUBB    A,R3
        MOV     R3,A
//  227   }
//  228   if (q&(1<<1)) { /* y-reverse ? */
??_atan2_6:
        MOV     A,R4
        MOV     C,0xE0 /* A   */.1
        JNC     ??_atan2_7
//  229     angle = GUI_360DEG-angle;
        CLR     A
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,#0x10
        SUBB    A,R3
        MOV     R3,A
        CFI EndBlock cfiBlock5
//  230   }
//  231   return angle;
??_atan2_7:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  232 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     ?V0 + 5,A
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+-2
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+-2
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  233 
//  234 /*********************************************************************
//  235 *
//  236 *       _SetLineColor
//  237 */
//  238 static int _SetLineColor(int i) {
//  239   switch (GUI_Context.LineStyle) {
//  240   case GUI_LS_DASH:
//  241     i = (i+6)%16;
//  242     return (i<12);
//  243   case GUI_LS_DOT:
//  244     i %= 4;
//  245     return (i<2);
//  246   case GUI_LS_DASHDOT:
//  247     i %= 20;
//  248     if (i<12)
//  249       return 1;
//  250     else if ((i>=16) && (i<18))
//  251       return 1;
//  252     return 0;
//  253   case GUI_LS_DASHDOTDOT:
//  254     i %= 24;
//  255     if (i<12)
//  256       return 1;
//  257     else if ((i>=16) && (i<18))
//  258       return 1;
//  259     else if ((i>=20) && (i<22))
//  260       return 1;
//  261     else 
//  262       return 0;
//  263   }
//  264   return 0;
//  265 }
//  266 
//  267 /*********************************************************************
//  268 *
//  269 *       _atan2
//  270 */
//  271 #if 0
//  272 int _atan2(int xDiff, int yDiff) {
//  273   double atanf = atan2(xDiff, yDiff);
//  274   return (int)(atanf*(16384.0/6.2831852));
//  275 }
//  276 #endif
//  277 
//  278 /*********************************************************************
//  279 *
//  280 *       _CalcOrto
//  281 */
//  282 static void _CalcOrto(int xDiff, int yDiff, I32 r, int*px, int*py) {
//  283   I32 x,y;
//  284 /*
//  285   int Angle = _atan2(xDiff, yDiff);
//  286 */
//  287 #if 0
//  288   double Angle = atan2(xDiff, yDiff);
//  289   x = (int)(-r*cos(Angle));
//  290   y = (int)(r*sin(Angle));
//  291 #else
//  292   int Angle = _atan2(xDiff, yDiff);
//  293   Angle+= GUI_90DEG;
//  294   x = ( r*(I32)GUI_cos(Angle));
//  295   y = ( r*(I32)GUI_sin(Angle));
//  296 #endif
//  297   x = (x<0) ? -((-x+512)>>10) : ((x+512)>>10);
//  298   y = (y<0) ? -((-y+512)>>10) : ((y+512)>>10);
//  299   *px = x;
//  300   *py = y;
//  301 }
//  302 
//  303 /*********************************************************************
//  304 *
//  305 *       DrawLine, public
//  306 *
//  307 * Draw end points of the line.
//  308 * In most cases, this is a circle.
//  309 *
//  310 **********************************************************************
//  311 */
//  312 /*********************************************************************
//  313 *
//  314 *       _DrawLineEnd
//  315 */
//  316 static void _DrawLineEnd(int x0, int y0) {
//  317   switch (GUI_Context.PenShape) {
//  318   case GUI_PS_ROUND:
//  319     GL_DrawPoint(x0,y0);
//  320     break;
//  321   case GUI_PS_FLAT:
//  322     break;
//  323   }
//  324 }
//  325 
//  326 /*********************************************************************
//  327 *
//  328 *       DrawLine, public
//  329 *
//  330 **********************************************************************
//  331 */
//  332 /*********************************************************************
//  333 *
//  334 *       GL_DrawLine
//  335 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  336 void GL_DrawLine(int x0, int y0, int x1, int y1) {
GL_DrawLine:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function GL_DrawLine
        CODE
        FUNCALL GL_DrawLine, GL_DrawLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, _atan2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, GUI_cos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, GUI_sin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, GL_FillPolygon
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, GL_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine, GL_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 15,A
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  337   if (GUI_Context.PenSize ==1) {
        MOV     DPTR,#GUI_Context + 17
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GL_DrawLine_0
//  338     GL_DrawLine1(x0,y0,x1,y1);
        ; Setup parameters for call to function GL_DrawLine1
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 14
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
//  339   } else {
??CrossCallReturnLabel_27:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL   ??GL_DrawLine1?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        LJMP    ??GL_DrawLine_1 & 0xFFFF
//  340     int xdiff, ydiff;
//  341     xdiff = x0-x1;
//  342     ydiff = y0-y1;
//  343     if (xdiff | ydiff) {    
??GL_DrawLine_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R2
        ORL     A,R0
        MOV     R0,A
        MOV     A,R3
        ORL     A,R1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??GL_DrawLine_1 & 0xFFFF
//  344       GUI_POINT Poly[4];
//  345       int xOff, yOff;
//  346       int xOffP, yOffP, xOffM, yOffM;
//  347       _CalcOrto(x0-x1,y0-y1, (I32)(GUI_Context.PenSize-1), &xOff, &yOff);
        MOV     DPTR,#GUI_Context + 17
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        CLR     A
        ADDC    A,#-0x1
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_61:
        ; Setup parameters for call to function _atan2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        LCALL   ??_atan2?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 12,R2
        MOV     A,R2
        ADD     A,#0x0
        MOV     A,R3
        ADDC    A,#0x4
        MOV     ?V0 + 13,A
        ; Setup parameters for call to function GUI_cos
        MOV     R3,A
        LCALL   ??GUI_cos?relay
        MOV     ?V0 + 8,R2
        MOV     A,R3
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        ; Setup parameters for call to function GUI_sin
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??GUI_sin?relay
        MOV     ?V0 + 8,R2
        MOV     A,R3
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?SL_GE_X
        JC      ??GL_DrawLine_2
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x2
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_SUB
        MOV     A,#0xa
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        SJMP    ??GL_DrawLine_3
??GL_DrawLine_2:
        MOV     DPTR,#__Constant_200
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
??GL_DrawLine_3:
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?SL_GE_X
        JC      ??GL_DrawLine_4
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x2
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_SUB
        MOV     A,#0xa
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
        SJMP    ??GL_DrawLine_5
??GL_DrawLine_4:
        MOV     DPTR,#__Constant_200
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     A,#0xa
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
??GL_DrawLine_5:
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
//  348   /* Do rounding for offsets */
//  349       if (xOff >0) {
        CLR     C
        MOV     A,R4
        SUBB    A,#0x1
        MOV     A,R5
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     A,R4
        JC      ??GL_DrawLine_6
//  350         xOffP = (xOff+1)/2;
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
//  351         xOffM =  xOff   /2;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        SJMP    ??GL_DrawLine_7
//  352       } else {
//  353         xOffP =   xOff/2;
??GL_DrawLine_6:
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
//  354         xOffM =  (xOff-1)   /2;
        MOV     A,R4
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#-0x1
??GL_DrawLine_7:
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
//  355       }
//  356       if (yOff >0) {
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x1
        MOV     A,?V0 + 1
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_78:
        JC      ??GL_DrawLine_8
//  357         yOffP = (yOff+1)/2;
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
//  358         yOffM =  yOff   /2;
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        SJMP    ??GL_DrawLine_9
//  359       } else {
//  360         yOffP =   yOff/2;
??GL_DrawLine_8:
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
//  361         yOffM =  (yOff-1)   /2;
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     R1,A
??GL_DrawLine_9:
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
//  362       }
//  363       Poly[0].x = x0+xOffP;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 3
        MOV     R3,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  364       Poly[0].y = y0+yOffP;
??CrossCallReturnLabel_37:
        ADD     A,R4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R3,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  365       Poly[1].x = x0-xOffM; 
??CrossCallReturnLabel_40:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 5
        MOV     R3,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  366       Poly[1].y = y0-yOffM; 
??CrossCallReturnLabel_38:
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R3,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  367       Poly[2].x = x1-xOffM;
??CrossCallReturnLabel_41:
        MOV     A,?V0 + 14
        CLR     C
        SUBB    A,?V0 + 4
        MOV     R2,A
        MOV     A,?V0 + 15
        SUBB    A,?V0 + 5
        MOV     R3,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  368       Poly[2].y = y1-yOffM;
??CrossCallReturnLabel_42:
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R7
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  369       Poly[3].x = x1+xOffP; 
??CrossCallReturnLabel_70:
        MOV     A,?V0 + 14
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  370       Poly[3].y = y1+yOffP;
??CrossCallReturnLabel_71:
        MOV     A,R6
        ADD     A,R4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R5
        MOV     R1,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  371       GL_FillPolygon(&Poly[0], 4, 0,0);
??CrossCallReturnLabel_72:
        ; Setup parameters for call to function GL_FillPolygon
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GL_FillPolygon?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  372       _DrawLineEnd(x0,y0);
        MOV     DPTR,#GUI_Context + 18
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_25
        ; Setup parameters for call to function GL_DrawPoint
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  373       _DrawLineEnd(x1,y1);
??CrossCallReturnLabel_25:
        MOV     DPTR,#GUI_Context + 18
        MOVX    A,@DPTR
        JNZ     ??GL_DrawLine_1
        ; Setup parameters for call to function GL_DrawPoint
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??GL_DrawPoint?relay
//  374     }
//  375   }
//  376 }
??GL_DrawLine_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 14
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 15
        MOV     R3,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
//  377 
//  378 /*********************************************************************
//  379 *
//  380 *       GUI_DrawLine
//  381 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382 void GUI_DrawLine(int x0, int y0, int x1, int y1) {
GUI_DrawLine:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function GUI_DrawLine
        CODE
        FUNCALL GUI_DrawLine, GL_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  383   halIntState_t state;
//  384   GUI_LOCK(state);
//  385   #if (GUI_WINSUPPORT)
//  386     WM_ADDORG(x0,y0);
//  387     WM_ADDORG(x1,y1);
//  388     WM_ITERATE_START(NULL); {
//  389   #endif
//  390   GL_DrawLine (x0, y0, x1, y1);
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ??GL_DrawLine?relay
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock45
        REQUIRE _A_IEN0
//  391   #if (GUI_WINSUPPORT)
//  392     } WM_ITERATE_END();
//  393   #endif
//  394   GUI_UNLOCK(state);
//  395 }
//  396 
//  397 /*********************************************************************
//  398 *
//  399 *       GL_DrawPolygon
//  400 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 void GL_DrawPolygon(const GUI_POINT*pPoints, int NumPoints, int x0, int y0) {
GL_DrawPolygon:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function GL_DrawPolygon
        CODE
        FUNCALL GL_DrawPolygon, GL_MoveTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawPolygon, GL_DrawLineTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawPolygon, GL_DrawLineTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  402   const GUI_POINT* pPoint = pPoints;
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
//  403   GL_MoveTo(pPoint->x+x0, pPoint->y+y0);
        ; Setup parameters for call to function GL_MoveTo
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     R3,A
        LCALL   ??GL_MoveTo?relay
        SJMP    ??CrossCallReturnLabel_13
//  404   while (--NumPoints >0) {
//  405     pPoint++;
??GL_DrawPolygon_0:
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  406     GL_DrawLineTo(pPoint->x+x0, pPoint->y+y0);
        ; Setup parameters for call to function GL_DrawLineTo
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        LCALL   ?Subroutine8 & 0xFFFF
//  407   }
??CrossCallReturnLabel_7:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,?V0 + 6
        ADD     A,#-0x1
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,#0x1
        MOV     A,?V0 + 7
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_79:
        JNC     ??GL_DrawPolygon_0
//  408   /* Now draw closing line unless it has already been closed */
//  409   if ( (pPoint->x != pPoints->x)
//  410      ||(pPoint->y != pPoints->y))
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??GL_DrawPolygon_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??GL_DrawPolygon_1:
        JNZ     ??GL_DrawPolygon_2
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??GL_DrawPolygon_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??GL_DrawPolygon_3:
        JZ      ??CrossCallReturnLabel_14
//  411   {
//  412     GL_DrawLineTo(pPoints->x+x0, pPoints->y+y0);
??GL_DrawPolygon_2:
        ; Setup parameters for call to function GL_DrawLineTo
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine8 & 0xFFFF
//  413   }
??CrossCallReturnLabel_8:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine11 & 0xFFFF
//  414 }
??CrossCallReturnLabel_14:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_0
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_1
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        CLR     C
        MOV     A,R0
        SUBB    A,#0xc
        MOV     A,R1
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     R3,A
        LCALL   ??GL_DrawLineTo?relay
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,?V0 + 2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 3
        MOV     R5,A
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72
//  415 
//  416 /*********************************************************************
//  417 *
//  418 *       GUI_DrawPolygon
//  419 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  420 void GUI_DrawPolygon(const GUI_POINT* pPoints, int NumPoints, int x0, int y0) {
GUI_DrawPolygon:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function GUI_DrawPolygon
        CODE
        FUNCALL GUI_DrawPolygon, GL_DrawPolygon
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  421   halIntState_t state;
//  422   GUI_LOCK(state);
//  423   #if (GUI_WINSUPPORT)
//  424     WM_ADDORG(x0,y0);
//  425     WM_ITERATE_START(NULL); {
//  426   #endif
//  427   GL_DrawPolygon (pPoints, NumPoints, x0, y0);
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ??GL_DrawPolygon?relay
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock73
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     A,#0xe
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond77 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_23
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_24
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_2
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+-2
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_3
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+-2
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     R6,A
        CLR     0xa8.7
        ; Setup parameters for call to function GL_DrawLine
        ; Setup parameters for call to function GL_DrawPolygon
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
//  428   #if (GUI_WINSUPPORT)
//  429     } WM_ITERATE_END();
//  430   #endif
//  431   GUI_UNLOCK(state);
//  432 }
//  433 
//  434 /*********************************************************************
//  435 *
//  436 *       Draw Line to group
//  437 *
//  438 **********************************************************************
//  439 */
//  440 /*********************************************************************
//  441 *
//  442 *       GL_DrawLineRelNM
//  443 */
//  444 static void GL_DrawLineRelNM(int dx, int dy) {
//  445   GL_DrawLine (GUI_Context.DrawPosX,    GUI_Context.DrawPosY, 
//  446                GUI_Context.DrawPosX+dx, GUI_Context.DrawPosY+dy); 
//  447 }
//  448 
//  449 /*********************************************************************
//  450 *
//  451 *       GUI_DrawLineRel
//  452 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  453 void GUI_DrawLineRel(int dx, int dy) {
GUI_DrawLineRel:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function GUI_DrawLineRel
        CODE
        FUNCALL GUI_DrawLineRel, GL_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_DrawLineRel, GUI_MoveRel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  454   halIntState_t state;
//  455   GUI_LOCK(state);
        MOV     A,0xa8
        MOV     ?V0 + 2,A
        CLR     0xa8.7
//  456   #if (GUI_WINSUPPORT)
//  457     WM_ITERATE_START(NULL); {
//  458   #endif
//  459   GL_DrawLineRelNM(dx,dy);
        MOV     DPTR,#GUI_Context + 31
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_86:
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function GL_DrawLine
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     ?V0 + 4,A
        MOV     A,R5
        ADDC    A,?V0 + 1
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        ADD     A,R6
        MOV     ?V0 + 4,A
        MOV     A,R3
        ADDC    A,R7
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??GL_DrawLine?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  460   #if (GUI_WINSUPPORT)
//  461     } WM_ITERATE_END();
//  462   #endif
//  463   GUI_MoveRel(dx,dy);
        ; Setup parameters for call to function GUI_MoveRel
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GUI_MoveRel?relay
//  464   GUI_UNLOCK(state);
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  465 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock86
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+-2
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+-2
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+-2
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
//  466 
//  467 /*********************************************************************
//  468 *
//  469 *       GL_DrawLineTo
//  470 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  471 void GL_DrawLineTo(int x, int y) {
GL_DrawLineTo:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function GL_DrawLineTo
        CODE
        FUNCALL GL_DrawLineTo, GL_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  472   GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
        ; Setup parameters for call to function GL_DrawLine
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  473   GUI_Context.DrawPosX = x;
        MOV     DPTR,#GUI_Context + 31
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  474   GUI_Context.DrawPosY = y;
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  475 }
        SJMP    ??Subroutine42_0
        CFI EndBlock cfiBlock101
//  476 
//  477 /*********************************************************************
//  478 *
//  479 *       GL_DrawLineToNM
//  480 */
//  481 static void GL_DrawLineToNM(int x, int y) {
//  482   GL_DrawLine (GUI_Context.DrawPosX, GUI_Context.DrawPosY, x, y); 
//  483 }
//  484 
//  485 /*********************************************************************
//  486 *
//  487 *       GUI_DrawLineTo
//  488 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  489 void GUI_DrawLineTo(int x, int y) {
GUI_DrawLineTo:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function GUI_DrawLineTo
        CODE
        FUNCALL GUI_DrawLineTo, GL_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_DrawLineTo, GL_MoveTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  490   halIntState_t state;
//  491   GUI_LOCK(state);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  492   #if (GUI_WINSUPPORT)
//  493     WM_ADDORG(x,y);
//  494     WM_ITERATE_START(NULL); {
//  495   #endif
//  496   GL_DrawLineToNM(x,y);
        ; Setup parameters for call to function GL_DrawLine
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  497   #if (GUI_WINSUPPORT)
//  498     } WM_ITERATE_END();
//  499   #endif
//  500   GL_MoveTo(x,y);
        ; Setup parameters for call to function GL_MoveTo
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??GL_MoveTo?relay
//  501   GUI_UNLOCK(state);
        SJMP    ??Subroutine41_0
        CFI EndBlock cfiBlock102
        REQUIRE _A_IEN0
//  502 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV     DPTR,#GUI_Context + 33
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#GUI_Context + 31
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??GL_DrawLine?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock106
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        CFI EndBlock cfiBlock107
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock108
//  503 
//  504 /*********************************************************************
//  505 *
//  506 *       GUI_MoveRel
//  507 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 void GUI_MoveRel(int dx, int dy) { /*tbd: GL_LinePos. */
GUI_MoveRel:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function GUI_MoveRel
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  509   halIntState_t state;
//  510   GUI_LOCK(state);
        MOV     A,0xa8
        MOV     R0,A
        CLR     0xa8.7
//  511   GUI_Context.DrawPosX += dx;
        MOV     DPTR,#GUI_Context + 31
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOVX    @DPTR,A
//  512   GUI_Context.DrawPosY += dy;
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOVX    @DPTR,A
//  513   GUI_UNLOCK(state);
        MOV     A,R0
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  514 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock109
        REQUIRE _A_IEN0
//  515 
//  516 /*********************************************************************
//  517 *
//  518 *       GL_MoveTo
//  519 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  520 void GL_MoveTo(int x, int y) {
GL_MoveTo:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function GL_MoveTo
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  521   GUI_Context.DrawPosX = x;
        MOV     DPTR,#GUI_Context + 31
        LCALL   ?Subroutine26 & 0xFFFF
//  522   GUI_Context.DrawPosY = y;
??CrossCallReturnLabel_43:
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  523 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond115) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond115) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond115) CFA_SP SP+-5
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117
//  524 
//  525 /*********************************************************************
//  526 *
//  527 *       GUI_MoveTo
//  528 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  529 void GUI_MoveTo(int x, int y) {
GUI_MoveTo:
        CFI Block cfiBlock118 Using cfiCommon0
        CFI Function GUI_MoveTo
        CODE
        FUNCALL GUI_MoveTo, GL_MoveTo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  530   halIntState_t state;
//  531   GUI_LOCK(state);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  532   #if (GUI_WINSUPPORT)
//  533     WM_ADDORG(x,y);
//  534   #endif
//  535   GL_MoveTo(x,y);
        ; Setup parameters for call to function GL_MoveTo
        LCALL   ??GL_MoveTo?relay
        CFI EndBlock cfiBlock118
//  536   GUI_UNLOCK(state);
        REQUIRE ?Subroutine0
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine0
//  537 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        CFI EndBlock cfiBlock119
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock120
//  538 
//  539 /*********************************************************************
//  540 *
//  541 *       Rectangle filling / inverting
//  542 *
//  543 **********************************************************************
//  544 */
//  545 /*********************************************************************
//  546 *
//  547 *       _DrawRect
//  548 */
//  549 static void _DrawRect(int x0, int y0, int x1, int y1) {
//  550   LCD_DrawHLine(x0, y0, x1);
//  551   LCD_DrawHLine(x0, y1, x1);
//  552   LCD_DrawVLine(x0, y0 + 1, y1 - 1);
//  553   LCD_DrawVLine(x1, y0 + 1, y1 - 1);
//  554 }
//  555 
//  556 /*********************************************************************
//  557 *
//  558 *       GUI_DrawRect
//  559 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void GUI_DrawRect(int x0, int y0, int x1, int y1) {
GUI_DrawRect:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function GUI_DrawRect
        CODE
        FUNCALL GUI_DrawRect, LCD_DrawHLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_DrawRect, LCD_DrawHLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_DrawRect, LCD_DrawVLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_DrawRect, LCD_DrawVLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
//  561   #if (GUI_WINSUPPORT)
//  562     int Off;
//  563     GUI_RECT r;
//  564   #endif
//  565   halIntState_t state;
//  566   GUI_LOCK(state);
??CrossCallReturnLabel_54:
        MOV     ?V0 + 4,A
        CLR     0xa8.7
//  567   #if (GUI_WINSUPPORT)
//  568     Off = GUI_Context.PenSize -1;
//  569     WM_ADDORG(x0,y0);
//  570     WM_ADDORG(x1,y1);
//  571     r.x0 = x0 - Off;
//  572     r.x1 = x1 + Off;
//  573     r.y0 = y0 - Off;
//  574     r.y1 = y1 + Off;
//  575     WM_ITERATE_START(&r); {
//  576   #endif
//  577   _DrawRect(x0, y0, x1, y1);
        ; Setup parameters for call to function LCD_DrawHLine
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??LCD_DrawHLine?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        ; Setup parameters for call to function LCD_DrawHLine
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??LCD_DrawHLine?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 2
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function LCD_DrawVLine
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??LCD_DrawVLine?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        ; Setup parameters for call to function LCD_DrawVLine
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??LCD_DrawVLine?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  578   #if (GUI_WINSUPPORT)
//  579     } WM_ITERATE_END();
//  580   #endif
//  581   GUI_UNLOCK(state);
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  582 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock121
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_12
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,0xa8
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125
//  583 
//  584 /*********************************************************************
//  585 *
//  586 *       DrawLine, internal, 1 pixel
//  587 *
//  588 **********************************************************************
//  589 */
//  590 /*********************************************************************
//  591 *
//  592 *       GL_DrawLine1
//  593 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  594 void GL_DrawLine1(int x0, int y0, int x1, int y1) {
GL_DrawLine1:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function GL_DrawLine1
        CODE
        FUNCALL GL_DrawLine1, GL_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, _SwapInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, _SwapInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, _SwapInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, _SwapInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, _SwapInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, LCD_DrawPixel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, LCD_DrawPixel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, LCD_DrawPixel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawLine1, LCD_DrawPixel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  595   int xdiff = x1-x0;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_64:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine25 & 0xFFFF
//  596   int ydiff = y1-y0;
??CrossCallReturnLabel_75:
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_65:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  597   int xdiffby2;
//  598   int i;
//  599   char Swapped =0;
??CrossCallReturnLabel_73:
        MOV     ?V0 + 10,#0x0
//  600 /* check if no line */
//  601   if (!(xdiff|ydiff)) {
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??GL_DrawLine1_0
//  602     GL_DrawPoint(x0,y0);
        ; Setup parameters for call to function GL_DrawPoint
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  603     return;
??CrossCallReturnLabel_26:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 27)
//  604   }
//  605 #if 0
//  606 /* check if horizontal line */
//  607   if (!xdiff) {
//  608     GL_DrawVLine(x0,y0,y1);
//  609     return;
//  610   }
//  611 /* check if vertical line */
//  612   if (!ydiff) {
//  613     GL_DrawHLine(y0,x0,x1);
//  614     return;
//  615   }
//  616 #endif
//  617 /* check if we swap x and y for calculation */
//  618   if (Abs(xdiff) < Abs(ydiff)) {
??GL_DrawLine1_0:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        JNC     ??GL_DrawLine1_1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R2,A
        CLR     A
        SUBB    A,R1
        SJMP    ??GL_DrawLine1_2
??GL_DrawLine1_1:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??GL_DrawLine1_2:
        MOV     R3,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,#0x2
        JNC     ??GL_DrawLine1_3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_66:
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,R1
        SJMP    ??GL_DrawLine1_4
??GL_DrawLine1_3:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
??GL_DrawLine1_4:
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??GL_DrawLine1_5
//  619     _SwapInt(&xdiff,&ydiff);
        ; Setup parameters for call to function _SwapInt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_SwapInt?relay
//  620     _SwapInt(&x0,&y0);
        ; Setup parameters for call to function _SwapInt
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_SwapInt?relay
//  621     _SwapInt(&x1,&y1);
        ; Setup parameters for call to function _SwapInt
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_SwapInt?relay
//  622     Swapped =1;
        MOV     ?V0 + 10,#0x1
//  623   }
//  624 /* make sure line direction is positive */
//  625   if (xdiff!=Abs(xdiff)) {
??GL_DrawLine1_5:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        JNC     ??GL_DrawLine1_6
        MOV     R1,A
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,R1
??GL_DrawLine1_6:
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??GL_DrawLine1_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??GL_DrawLine1_7:
        JZ      ??GL_DrawLine1_8
//  626     xdiff = -xdiff;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine25 & 0xFFFF
//  627     ydiff = -ydiff;
??CrossCallReturnLabel_76:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
//  628     _SwapInt(&x0,&x1);
??CrossCallReturnLabel_74:
        ; Setup parameters for call to function _SwapInt
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_SwapInt?relay
//  629     _SwapInt(&y0,&y1);
        ; Setup parameters for call to function _SwapInt
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_SwapInt?relay
//  630   }
//  631   xdiffby2 = xdiff/2;
??GL_DrawLine1_8:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 8,R0
        MOV     ?V0 + 9,R1
//  632   if (ydiff<0)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_36:
        JNC     ??GL_DrawLine1_9
//  633     xdiffby2 = -xdiffby2;
        CLR     C
        CLR     A
        SUBB    A,?V0 + 8
        MOV     R0,A
        CLR     A
        SUBB    A,?V0 + 9
        MOV     R1,A
        MOV     ?V0 + 8,R0
        MOV     ?V0 + 9,R1
//  634 /* Draw pixel by pixel solid*/
//  635   if (GUI_Context.LineStyle == GUI_LS_SOLID) {
??GL_DrawLine1_9:
        MOV     DPTR,#GUI_Context + 19
        MOVX    A,@DPTR
        MOV     R6,#0x0
        MOV     R7,#0x0
        JZ      $+5
        LJMP    ??GL_DrawLine1_10 & 0xFFFF
//  636     for (i=0; i<=xdiff; i++) {
        SJMP    ??GL_DrawLine1_11
//  637       I32 l = ((I32)ydiff)*i+xdiffby2;
//  638       int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
//  639       if (!Swapped)
//  640         LCD_HL_DrawPixel(x0+i, y);
//  641       else
//  642         LCD_HL_DrawPixel(y, x0+i);
??GL_DrawLine1_12:
        ; Setup parameters for call to function LCD_DrawPixel
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R5,A
??GL_DrawLine1_13:
        LCALL   ??LCD_DrawPixel?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??GL_DrawLine1_11:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        JNC     $+5
        LJMP    ??CrossCallReturnLabel_26 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?L_MUL
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?SL_GE_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        JC      ??GL_DrawLine1_14
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
??GL_DrawLine1_14:
        MOV     DPTR,#__Constant_7fff
        MOV     R0,#?V0 + 0
        LCALL   ?SL_GE_X
        MOV     A,#0x4
        JC      ??GL_DrawLine1_15
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        SJMP    ??CrossCallReturnLabel_34
??GL_DrawLine1_15:
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?L_DIV_MOD
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     R3,A
        MOV     A,?V0 + 10
        MOV     C,0xE0 /* A   */.0
        JNC     $+5
        LJMP    ??GL_DrawLine1_12 & 0xFFFF
        ; Setup parameters for call to function LCD_DrawPixel
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R3,A
        LJMP    ??GL_DrawLine1_13 & 0xFFFF
//  643     }
//  644 /* Draw pixel by pixel with fill style */
//  645   } else {
//  646     for (i=0; i<=xdiff; i++) {
//  647       long l = ((long)ydiff)*i+xdiffby2;
//  648       int y = (ABS(l)<32767) ? (y0 + ((int)l)/xdiff) : (y0 + l/xdiff);
//  649       if (!_SetLineColor(i)) {
//  650         if (!Swapped)
//  651           LCD_HL_DrawPixel(x0+i, y);
//  652         else
//  653           LCD_HL_DrawPixel(y, x0+i);
??GL_DrawLine1_16:
        ; Setup parameters for call to function LCD_DrawPixel
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
??GL_DrawLine1_17:
        LCALL   ??LCD_DrawPixel?relay
??GL_DrawLine1_18:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??GL_DrawLine1_10:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        JNC     $+5
        LJMP    ??CrossCallReturnLabel_26 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?L_MUL
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?SL_GE_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        JC      ??GL_DrawLine1_19
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
??GL_DrawLine1_19:
        MOV     DPTR,#__Constant_7fff
        MOV     R0,#?V0 + 0
        LCALL   ?SL_GE_X
        MOV     A,#0x4
        JC      ??GL_DrawLine1_20
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        SJMP    ??GL_DrawLine1_21
??GL_DrawLine1_20:
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?L_DIV_MOD
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
??GL_DrawLine1_21:
        MOV     ?V0 + 1,A
        MOV     DPTR,#GUI_Context + 19
        MOVX    A,@DPTR
        DEC     A
        JNZ     $+5
        LJMP    ??GL_DrawLine1_22 & 0xFFFF
        DEC     A
        JZ      ??GL_DrawLine1_23
        DEC     A
        JZ      ??GL_DrawLine1_24
        DEC     A
        JNZ     ??GL_DrawLine1_25
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_82:
        JNC     $+5
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
        MOV     A,R0
        ADD     A,#-0x10
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x2
        MOV     A,R3
        SUBB    A,#0x0
        JNC     $+5
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
        MOV     A,R0
        ADD     A,#-0x14
??GL_DrawLine1_26:
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x2
        MOV     A,R1
        SUBB    A,#0x0
        JNC     $+5
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
        SJMP    ??GL_DrawLine1_25
??GL_DrawLine1_24:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x14
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_83:
        JNC     $+5
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
        MOV     A,R0
        ADD     A,#-0x10
        SJMP    ??GL_DrawLine1_26
??GL_DrawLine1_23:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        CLR     C
        MOV     A,R2
        SUBB    A,#0x2
        MOV     A,R3
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        JNC     $+5
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
??GL_DrawLine1_25:
        MOV     A,?V0 + 10
        MOV     C,0xE0 /* A   */.0
        JNC     $+5
        LJMP    ??GL_DrawLine1_16 & 0xFFFF
        ; Setup parameters for call to function LCD_DrawPixel
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R3,A
        LJMP    ??GL_DrawLine1_17 & 0xFFFF
//  654       }
//  655     }
//  656   }
??GL_DrawLine1_22:
        MOV     A,R6
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        CLR     C
        MOV     A,R2
        SUBB    A,#0xc
        MOV     A,R3
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_81:
        JNC     ??GL_DrawLine1_25
        LJMP    ??GL_DrawLine1_18 & 0xFFFF
        CFI EndBlock cfiBlock126
//  657 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        MOV     ?V0 + 0,?V0 + 8
        MOV     A,?V0 + 9
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond130 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker132 Using cfiCommon1
        CFI (cfiPicker132) NoFunction
        CFI (cfiPicker132) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond133 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_36
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_9
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_10
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_14
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_33
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_34
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??GL_DrawPoint?relay
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R6
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker157 Using cfiCommon1
        CFI (cfiPicker157) NoFunction
        CFI (cfiPicker157) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiPicker157

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond158 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker160 Using cfiCommon1
        CFI (cfiPicker160) NoFunction
        CFI (cfiPicker160) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiPicker160

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond161 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+-2
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker163 Using cfiCommon1
        CFI (cfiPicker163) NoFunction
        CFI (cfiPicker163) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiPicker163

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond164 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     ?V0 + 0,R6
        MOV     A,R7
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_90:
        RET
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_46
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_0
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_1
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV     ?V0 + 1,A
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_3
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+-2
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_45
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_46
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_0
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_1
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178
//  658 
//  659 /*********************************************************************
//  660 *
//  661 *       Draw point
//  662 *
//  663 **********************************************************************
//  664 */
//  665 /*********************************************************************
//  666 *
//  667 *       GL_DrawPoint
//  668 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  669 void GL_DrawPoint(int x, int y) {
GL_DrawPoint:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function GL_DrawPoint
        CODE
        FUNCALL GL_DrawPoint, LCD_DrawPixel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GL_DrawPoint, GL_FillCircle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  670   if (GUI_Context.PenSize == 1) {
        MOV     DPTR,#GUI_Context + 17
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GL_DrawPoint_0
//  671     LCD_HL_DrawPixel(x, y);
        ; Setup parameters for call to function LCD_DrawPixel
        LCALL   ??LCD_DrawPixel?relay
        SJMP    ??GL_DrawPoint_1
//  672   } else {
//  673     GL_FillCircle(x, y, (GUI_Context.PenSize - 1) / 2);
??GL_DrawPoint_0:
        ; Setup parameters for call to function GL_FillCircle
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GL_FillCircle?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  674   }
//  675 }
??GL_DrawPoint_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock179
//  676 
//  677 /*********************************************************************
//  678 *
//  679 *       GUI_DrawPoint
//  680 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  681 void GUI_DrawPoint(int x, int y) {
GUI_DrawPoint:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI Function GUI_DrawPoint
        CODE
        FUNCALL GUI_DrawPoint, GL_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  682   halIntState_t state;
//  683   GUI_LOCK(state);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  684   #if (GUI_WINSUPPORT)
//  685     WM_ADDORG(x, y);
//  686     WM_ITERATE_START(NULL); {
//  687   #endif
//  688   GL_DrawPoint(x, y);
        ; Setup parameters for call to function GL_DrawPoint
        LCALL   ??GL_DrawPoint?relay
//  689   #if (GUI_WINSUPPORT)
//  690     } WM_ITERATE_END();
//  691   #endif
//  692   GUI_UNLOCK(state);
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock180
        REQUIRE _A_IEN0
//  693 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_20:
        DD 32

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2:
        DD 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_200:
        DD 512

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_7fff:
        DD 32767

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_SwapInt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _SwapInt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_sin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_sin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_cos?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_cos

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_atan2?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _atan2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_DrawLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_DrawLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_DrawPolygon?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_DrawPolygon

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawPolygon?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawPolygon

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawLineRel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawLineRel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_DrawLineTo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_DrawLineTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawLineTo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawLineTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_MoveRel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_MoveRel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_MoveTo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_MoveTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_MoveTo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_MoveTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawRect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawRect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_DrawLine1?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_DrawLine1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GL_DrawPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GL_DrawPoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_DrawPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_DrawPoint

        END
//  694 
//  695 /*************************** End of file ****************************/
// 
// 3 419 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//    88 bytes in segment XDATA_ROM_C
// 
// 3 527 bytes of CODE  memory
//    68 bytes of CONST memory (+ 20 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//
//Errors: none
//Warnings: none
