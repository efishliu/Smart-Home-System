###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:53 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCDRLE4.c                                        #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCDRLE4.c -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCDRLE #
#                          4.lst                                              #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCDRLE4 #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCDRLE4.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCDRLE4.c
     16          Purpose     : Drawing routines for run length encoded bitmaps
     17                        with 4bpp
     18          ---------------------------END-OF-HEADER------------------------------
     19          */
     20          
     21          #include <stddef.h>           /* needed for definition of NULL */
     22          #include "LCD.h"
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DrawBitmap_RLE4
     34          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     35          static void _DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR* pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE4:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7406         MOV     A,#0x6
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7427         MOV     A,#0x27
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 3,A
   \   00002A   7429         MOV     A,#0x29
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 10,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 11,A
   \   000036   742B         MOV     A,#0x2b
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   742D         MOV     A,#0x2d
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 14,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 15,A
   \   00004C   742F         MOV     A,#0x2f
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V0 + 12,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V0 + 13,A
     36            const LCD_PIXELINDEX* pTrans =NULL;
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
     37            char NoTrans = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
   \   000061   90....       MOV     DPTR,#GUI_Context + 12
   \   000064   E0           MOVX    A,@DPTR
   \   000065   A2E1         MOV     C,0xE0 /* A   */.1
   \   000067   4004         JC      ??_DrawBitmap_RLE4_0
   \   000069   D2F0         SETB    B.0
   \   00006B   8002         SJMP    ??_DrawBitmap_RLE4_1
   \                     ??_DrawBitmap_RLE4_0:
   \   00006D   C2F0         CLR     B.0
   \                     ??_DrawBitmap_RLE4_1:
   \   00006F   A2F0         MOV     C,B.0
   \   000071   E4           CLR     A
   \   000072   33           RLC     A
   \   000073   C0E0         PUSH    A
   \   000075   7405         MOV     A,#0x5
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
     38            LCD_PIXELINDEX aColorIndex[2];
     39            LCD_PIXELINDEX PixelIndex;
     40            int xi,y;
     41            int xL, yL;
     42            char IsMagnified = ((yMag | xMag) != 1);
   \   00007D   E5..         MOV     A,?V0 + 12
   \   00007F   45..         ORL     A,?V0 + 14
   \   000081   F8           MOV     R0,A
   \   000082   E5..         MOV     A,?V0 + 13
   \   000084   45..         ORL     A,?V0 + 15
   \   000086   F9           MOV     R1,A
   \   000087   7401         MOV     A,#0x1
   \   000089   68           XRL     A,R0
   \   00008A   7001         JNZ     ??_DrawBitmap_RLE4_2
   \   00008C   E9           MOV     A,R1
   \                     ??_DrawBitmap_RLE4_2:
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   6004         JZ      ??_DrawBitmap_RLE4_3
   \   000095   7401         MOV     A,#0x1
   \   000097   8001         SJMP    ??_DrawBitmap_RLE4_4
   \                     ??_DrawBitmap_RLE4_3:
   \   000099   E4           CLR     A
   \                     ??_DrawBitmap_RLE4_4:
   \   00009A   F0           MOVX    @DPTR,A
     43            aColorIndex[0] = LCD_ACOLORINDEX[0];
   \   00009B   90....       MOV     DPTR,#GUI_Context
   \   00009E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000A1   7409         MOV     A,#0x9
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E8           MOV     A,R0
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   E9           MOV     A,R1
   \   0000AA   F0           MOVX    @DPTR,A
     44            aColorIndex[1] = LCD_ACOLORINDEX[1];
   \   0000AB   90....       MOV     DPTR,#GUI_Context + 2
   \   0000AE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000B1   740B         MOV     A,#0xb
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   E8           MOV     A,R0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F0           MOVX    @DPTR,A
     45            /* Handle color translation */
     46            if ((pLogPal) && (pLogPal->pPalEntries)) {
   \   0000BB   EA           MOV     A,R2
   \   0000BC   4B           ORL     A,R3
   \   0000BD   6026         JZ      ??_DrawBitmap_RLE4_5
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C9   601A         JZ      ??_DrawBitmap_RLE4_5
     47              if ((pTrans = LCD_GetpPalConvTable(pLogPal)) == NULL) {
   \   0000CB                ; Setup parameters for call to function LCD_GetpPalConvTable
   \   0000CB   12....       LCALL   ??LCD_GetpPalConvTable?relay
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   EA           MOV     A,R2
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   EB           MOV     A,R3
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   7401         MOV     A,#0x1
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ?Subroutine3 & 0xFFFF
     48                return;
     49              }
     50            }
   \                     ??CrossCallReturnLabel_8:
   \   0000E0   7003         JNZ     $+5
   \   0000E2   02....       LJMP    ??_DrawBitmap_RLE4_6 & 0xFFFF
     51           /* Check if we can limit the number of lines due to clipping) */
     52            if (yMag == 1) {
   \                     ??_DrawBitmap_RLE4_5:
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   65..         XRL     A,?V0 + 12
   \   0000E9   7002         JNZ     ??_DrawBitmap_RLE4_7
   \   0000EB   E5..         MOV     A,?V0 + 13
   \                     ??_DrawBitmap_RLE4_7:
   \   0000ED   702A         JNZ     ??_DrawBitmap_RLE4_8
     53              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1)
   \   0000EF   7403         MOV     A,#0x3
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000F7   08           INC     R0
   \   0000F8   E9           MOV     A,R1
   \   0000F9   3400         ADDC    A,#0x0
   \   0000FB   F9           MOV     R1,A
   \   0000FC   C3           CLR     C
   \   0000FD   E8           MOV     A,R0
   \   0000FE   95..         SUBB    A,?V0 + 2
   \   000100   E9           MOV     A,R1
   \   000101   95..         SUBB    A,?V0 + 3
   \   000103   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000105   65D0         XRL     A,PSW
   \   000107   33           RLC     A
   \   000108   500F         JNC     ??_DrawBitmap_RLE4_8
     54                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ?Subroutine2 & 0xFFFF
     55            }
   \                     ??CrossCallReturnLabel_6:
   \   000112   F5..         MOV     ?V0 + 2,A
   \   000114   E9           MOV     A,R1
   \   000115   3400         ADDC    A,#0x0
   \   000117   F5..         MOV     ?V0 + 3,A
     56            /* Repeat until we have reached bottom */
     57            for (xi=0, y = 0; y < ysize; ) {
   \                     ??_DrawBitmap_RLE4_8:
   \   000119   7E00         MOV     R6,#0x0
   \   00011B   7F00         MOV     R7,#0x0
   \   00011D   8E..         MOV     ?V0 + 4,R6
   \   00011F   8E..         MOV     ?V0 + 5,R6
   \                     ??_DrawBitmap_RLE4_9:
   \   000121   C3           CLR     C
   \   000122   E5..         MOV     A,?V0 + 4
   \   000124   95..         SUBB    A,?V0 + 2
   \   000126   E5..         MOV     A,?V0 + 5
   \   000128   95..         SUBB    A,?V0 + 3
   \   00012A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00012C   65D0         XRL     A,PSW
   \   00012E   33           RLC     A
   \   00012F   4003         JC      $+5
   \   000131   02....       LJMP    ??_DrawBitmap_RLE4_10 & 0xFFFF
     58              U8 Cmd,Data;
     59              Cmd= *pPixel++;
   \   000134   85..82       MOV     DPL,?V0 + 10
   \   000137   85..83       MOV     DPH,?V0 + 11
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F5..         MOV     ?V0 + 7,A
   \   00013D   A3           INC     DPTR
     60              Data = *pPixel++;
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V0 + 6,A
   \   000141   A3           INC     DPTR
   \   000142   8582..       MOV     ?V0 + 10,DPL
   \   000145   8583..       MOV     ?V0 + 11,DPH
     61              if (Cmd) {
   \   000148   E5..         MOV     A,?V0 + 7
   \   00014A   7003         JNZ     $+5
   \   00014C   02....       LJMP    ??CrossCallReturnLabel_41 & 0xFFFF
     62                LCD_SetColorIndex(pTrans ? *(pTrans+Data) : Data);
   \   00014F   7401         MOV     A,#0x1
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000157   601E         JZ      ??_DrawBitmap_RLE4_11
   \   000159   E5..         MOV     A,?V0 + 6
   \   00015B   C3           CLR     C
   \   00015C   33           RLC     A
   \   00015D   F8           MOV     R0,A
   \   00015E   E4           CLR     A
   \   00015F   33           RLC     A
   \   000160   F9           MOV     R1,A
   \   000161   7401         MOV     A,#0x1
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   E0           MOVX    A,@DPTR
   \   000167   28           ADD     A,R0
   \   000168   FA           MOV     R2,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   39           ADDC    A,R1
   \   00016C   8A82         MOV     DPL,R2
   \   00016E   F583         MOV     DPH,A
   \   000170   E0           MOVX    A,@DPTR
   \   000171   FA           MOV     R2,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   FB           MOV     R3,A
   \   000175   8007         SJMP    ??_DrawBitmap_RLE4_12
   \                     ??_DrawBitmap_RLE4_11:
   \   000177   85..82       MOV     DPL,?V0 + 6
   \   00017A   AA82         MOV     R2,DPL
   \   00017C   7B00         MOV     R3,#0x0
   \                     ??_DrawBitmap_RLE4_12:
   \   00017E                ; Setup parameters for call to function LCD_SetColorIndex
   \   00017E   12....       LCALL   ??LCD_SetColorIndex?relay
     63                while (Cmd) {
     64                  int xi1 = xi+Cmd;
   \                     ??_DrawBitmap_RLE4_13:
   \   000181   85....       MOV     ?V0 + 0,?V0 + 7
   \   000184   EE           MOV     A,R6
   \   000185   25..         ADD     A,?V0 + 0
   \   000187   F5..         MOV     ?V0 + 0,A
   \   000189   EF           MOV     A,R7
   \   00018A   3400         ADDC    A,#0x0
   \   00018C   F5..         MOV     ?V0 + 1,A
     65                  if (xi1>=xsize)
   \   00018E   7425         MOV     A,#0x25
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000196   C3           CLR     C
   \   000197   E5..         MOV     A,?V0 + 0
   \   000199   98           SUBB    A,R0
   \   00019A   E5..         MOV     A,?V0 + 1
   \   00019C   99           SUBB    A,R1
   \   00019D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00019F   65D0         XRL     A,PSW
   \   0001A1   33           RLC     A
   \   0001A2   400C         JC      ??_DrawBitmap_RLE4_14
     66                    xi1 = xsize;
   \   0001A4   7425         MOV     A,#0x25
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F5..         MOV     ?V0 + 0,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F5..         MOV     ?V0 + 1,A
     67                  Cmd -= (xi1-xi);
   \                     ??_DrawBitmap_RLE4_14:
   \   0001B0   EE           MOV     A,R6
   \   0001B1   F9           MOV     R1,A
   \   0001B2   A8..         MOV     R0,?V0 + 0
   \   0001B4   E5..         MOV     A,?V0 + 7
   \   0001B6   C3           CLR     C
   \   0001B7   98           SUBB    A,R0
   \   0001B8   29           ADD     A,R1
   \   0001B9   F5..         MOV     ?V0 + 7,A
     68                  if (Data || NoTrans) {  /* Skip transparent pixels */
   \   0001BB   E5..         MOV     A,?V0 + 6
   \   0001BD   700D         JNZ     ??_DrawBitmap_RLE4_15
   \   0001BF   7405         MOV     A,#0x5
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX    A,@DPTR
   \   0001C5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C7   4003         JC      $+5
   \   0001C9   02....       LJMP    ??_DrawBitmap_RLE4_16 & 0xFFFF
     69                    if (IsMagnified) {
   \                     ??_DrawBitmap_RLE4_15:
   \   0001CC   85..82       MOV     DPL,?XSP + 0
   \   0001CF   85..83       MOV     DPH,?XSP + 1
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001D5   5061         JNC     ??_DrawBitmap_RLE4_17
     70                      xL = xMag * xi + x0;
   \   0001D7   A8..         MOV     R0,?V0 + 14
   \   0001D9   8F..         MOV     ?V0 + 9,R7
   \   0001DB   E8           MOV     A,R0
   \   0001DC   89F0         MOV     B,R1
   \   0001DE   A4           MUL     AB
   \   0001DF   C8           XCH     A,R0
   \   0001E0   AAF0         MOV     R2,B
   \   0001E2   85..F0       MOV     B,?V0 + 9
   \   0001E5   A4           MUL     AB
   \   0001E6   2A           ADD     A,R2
   \   0001E7   FA           MOV     R2,A
   \   0001E8   89F0         MOV     B,R1
   \   0001EA   E5..         MOV     A,?V0 + 15
   \   0001EC   A4           MUL     AB
   \   0001ED   2A           ADD     A,R2
   \   0001EE   F9           MOV     R1,A
   \   0001EF   7406         MOV     A,#0x6
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL   ?Subroutine0 & 0xFFFF
     71                      yL = yMag * y + y0;
     72                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
     73                    } else {
   \                     ??CrossCallReturnLabel_0:
   \   0001F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000200   A8..         MOV     R0,?V0 + 14
   \   000202   E5..         MOV     A,?V0 + 0
   \   000204   C3           CLR     C
   \   000205   9E           SUBB    A,R6
   \   000206   F5..         MOV     ?V0 + 8,A
   \   000208   E5..         MOV     A,?V0 + 1
   \   00020A   9F           SUBB    A,R7
   \   00020B   F5..         MOV     ?V0 + 9,A
   \   00020D   E8           MOV     A,R0
   \   00020E   85..F0       MOV     B,?V0 + 8
   \   000211   A4           MUL     AB
   \   000212   C8           XCH     A,R0
   \   000213   AEF0         MOV     R6,B
   \   000215   85..F0       MOV     B,?V0 + 9
   \   000218   A4           MUL     AB
   \   000219   2E           ADD     A,R6
   \   00021A   FE           MOV     R6,A
   \   00021B   85..F0       MOV     B,?V0 + 8
   \   00021E   E5..         MOV     A,?V0 + 15
   \   000220   A4           MUL     AB
   \   000221   2E           ADD     A,R6
   \   000222   F9           MOV     R1,A
   \   000223   EA           MOV     A,R2
   \   000224   28           ADD     A,R0
   \   000225   F8           MOV     R0,A
   \   000226   EB           MOV     A,R3
   \   000227   39           ADDC    A,R1
   \   000228   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00022B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022E   12....       LCALL   ??LCD_FillRect?relay
   \   000231   7404         MOV     A,#0x4
   \   000233   12....       LCALL   ?DEALLOC_XSTACK8
   \   000236   802D         SJMP    ??_DrawBitmap_RLE4_16
     74                      LCD_DrawHLine(x0+xi, y + y0, xi1+x0-1);
   \                     ??_DrawBitmap_RLE4_17:
   \   000238                ; Setup parameters for call to function LCD_DrawHLine
   \   000238   7406         MOV     A,#0x6
   \   00023A   12....       LCALL   ?XSTACK_DISP0_8
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   25..         ADD     A,?V0 + 0
   \   000240   F8           MOV     R0,A
   \   000241   A3           INC     DPTR
   \   000242   E0           MOVX    A,@DPTR
   \   000243   35..         ADDC    A,?V0 + 1
   \   000245   12....       LCALL   ?Subroutine9 & 0xFFFF
     75                    }
     76                  }
   \                     ??CrossCallReturnLabel_27:
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024B   7405         MOV     A,#0x5
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000253   12....       LCALL   ?XSTACK_DISP0_8
   \   000256   E0           MOVX    A,@DPTR
   \   000257   2E           ADD     A,R6
   \   000258   FA           MOV     R2,A
   \   000259   A3           INC     DPTR
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   3F           ADDC    A,R7
   \   00025C   FB           MOV     R3,A
   \   00025D   12....       LCALL   ??LCD_DrawHLine?relay
   \   000260   7402         MOV     A,#0x2
   \   000262   12....       LCALL   ?DEALLOC_XSTACK8
     77                  xi =xi1;
   \                     ??_DrawBitmap_RLE4_16:
   \   000265   AE..         MOV     R6,?V0 + 0
   \   000267   AF..         MOV     R7,?V0 + 1
     78                  if (xi1==xsize) {
   \   000269   7425         MOV     A,#0x25
   \   00026B   12....       LCALL   ?XSTACK_DISP0_8
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   65..         XRL     A,?V0 + 0
   \   000271   7004         JNZ     ??_DrawBitmap_RLE4_18
   \   000273   A3           INC     DPTR
   \   000274   E0           MOVX    A,@DPTR
   \   000275   65..         XRL     A,?V0 + 1
   \                     ??_DrawBitmap_RLE4_18:
   \   000277   7007         JNZ     ??_DrawBitmap_RLE4_19
     79                    y++;
   \   000279   12....       LCALL   ??Subroutine16_0 & 0xFFFF
     80                    xi=0;
   \                     ??CrossCallReturnLabel_43:
   \   00027C   7E00         MOV     R6,#0x0
   \   00027E   7F00         MOV     R7,#0x0
     81                  }
     82                }
   \                     ??_DrawBitmap_RLE4_19:
   \   000280   E5..         MOV     A,?V0 + 7
   \   000282   6003         JZ      $+5
   \   000284   02....       LJMP    ??_DrawBitmap_RLE4_13 & 0xFFFF
   \   000287   02....       LJMP    ??_DrawBitmap_RLE4_9 & 0xFFFF
     83              } else {
     84                while (Data--) {
     85                  U8 Index = *pPixel++;
     86                  if ((Index>>4) || NoTrans) {  /* Skip transparent pixels */
     87                    PixelIndex = pTrans ? *(pTrans+(Index>>4)) : (Index>>4);
     88                    if (IsMagnified) {
     89                      LCD_SetColorIndex(PixelIndex);
     90                      xL = xMag * xi + x0;
     91                      yL = yMag * y + y0;
     92                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
     93                    } else {
     94                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
     95                    }
     96                  }
     97                  if (++xi >= xsize) {
     98                    xi=0; y++;
     99                  }
    100                  if (Data-- == 0)
    101                    break;
    102                  if ((Index&15) || NoTrans) {  /* Skip transparent pixels */
    103                    PixelIndex = pTrans ? *(pTrans+(Index&15)) : (Index&15);
    104                    if (IsMagnified) {
    105                      LCD_SetColorIndex(PixelIndex);
    106                      xL = xMag * xi + x0;
    107                      yL = yMag * y + y0;
    108                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
    109                    } else {
    110                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
   \                     ??_DrawBitmap_RLE4_20:
   \   00028A                ; Setup parameters for call to function LCD_SetPixelIndex
   \   00028A   8A..         MOV     ?V0 + 0,R2
   \   00028C   8B..         MOV     ?V0 + 1,R3
   \   00028E   78..         MOV     R0,#?V0 + 0
   \   000290   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000293   7405         MOV     A,#0x5
   \   000295   12....       LCALL   ?XSTACK_DISP0_8
   \   000298   12....       LCALL   ?Subroutine4 & 0xFFFF
    111                    }
   \                     ??CrossCallReturnLabel_13:
   \   00029B   12....       LCALL   ?XSTACK_DISP0_8
   \   00029E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0002A1   12....       LCALL   ?DEALLOC_XSTACK8
    112                  }
    113                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE4_21:
   \   0002A4   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0002AD   4003         JC      ??CrossCallReturnLabel_41
    114                    xi=0; y++;
   \   0002AF   12....       LCALL   ?Subroutine10 & 0xFFFF
    115                  }
   \                     ??CrossCallReturnLabel_41:
   \   0002B2   7408         MOV     A,#0x8
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   E5..         MOV     A,?V0 + 6
   \   0002B9   F0           MOVX    @DPTR,A
   \   0002BA   14           DEC     A
   \   0002BB   F5..         MOV     ?V0 + 6,A
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   7003         JNZ     $+5
   \   0002C0   02....       LJMP    ??_DrawBitmap_RLE4_9 & 0xFFFF
   \   0002C3   85..82       MOV     DPL,?V0 + 10
   \   0002C6   85..83       MOV     DPH,?V0 + 11
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   F5..         MOV     ?V0 + 0,A
   \   0002CC   A3           INC     DPTR
   \   0002CD   8582..       MOV     ?V0 + 10,DPL
   \   0002D0   8583..       MOV     ?V0 + 11,DPH
   \   0002D3   74F0         MOV     A,#-0x10
   \   0002D5   55..         ANL     A,?V0 + 0
   \   0002D7   700D         JNZ     ??_DrawBitmap_RLE4_22
   \   0002D9   7405         MOV     A,#0x5
   \   0002DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002E1   4003         JC      $+5
   \   0002E3   02....       LJMP    ??_DrawBitmap_RLE4_23 & 0xFFFF
   \                     ??_DrawBitmap_RLE4_22:
   \   0002E6   7401         MOV     A,#0x1
   \   0002E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002EE   6014         JZ      ??_DrawBitmap_RLE4_24
   \   0002F0   E5..         MOV     A,?V0 + 0
   \   0002F2   13           RRC     A
   \   0002F3   13           RRC     A
   \   0002F4   13           RRC     A
   \   0002F5   541F         ANL     A,#0x1f
   \   0002F7   54FE         ANL     A,#0xfe
   \   0002F9   F8           MOV     R0,A
   \   0002FA   E4           CLR     A
   \   0002FB   04           INC     A
   \   0002FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FF   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000302   8008         SJMP    ??_DrawBitmap_RLE4_25
   \                     ??_DrawBitmap_RLE4_24:
   \   000304   E5..         MOV     A,?V0 + 0
   \   000306   C4           SWAP    A
   \   000307   540F         ANL     A,#0xf
   \   000309   FA           MOV     R2,A
   \   00030A   7B00         MOV     R3,#0x0
   \                     ??_DrawBitmap_RLE4_25:
   \   00030C   85..82       MOV     DPL,?XSP + 0
   \   00030F   85..83       MOV     DPH,?XSP + 1
   \   000312   E0           MOVX    A,@DPTR
   \   000313   A2E0         MOV     C,0xE0 /* A   */.0
   \   000315   5047         JNC     ??_DrawBitmap_RLE4_26
   \   000317                ; Setup parameters for call to function LCD_SetColorIndex
   \   000317   12....       LCALL   ??LCD_SetColorIndex?relay
   \   00031A   A8..         MOV     R0,?V0 + 14
   \   00031C   8E..         MOV     ?V0 + 8,R6
   \   00031E   8F..         MOV     ?V0 + 9,R7
   \   000320   E8           MOV     A,R0
   \   000321   85..F0       MOV     B,?V0 + 8
   \   000324   A4           MUL     AB
   \   000325   C8           XCH     A,R0
   \   000326   AAF0         MOV     R2,B
   \   000328   85..F0       MOV     B,?V0 + 9
   \   00032B   A4           MUL     AB
   \   00032C   2A           ADD     A,R2
   \   00032D   FA           MOV     R2,A
   \   00032E   85..F0       MOV     B,?V0 + 8
   \   000331   E5..         MOV     A,?V0 + 15
   \   000333   A4           MUL     AB
   \   000334   2A           ADD     A,R2
   \   000335   F9           MOV     R1,A
   \   000336   7406         MOV     A,#0x6
   \   000338   12....       LCALL   ?XSTACK_DISP0_8
   \   00033B   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00033E   12....       LCALL   ?XSTACK_DISP0_8
   \   000341   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000344   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000347   EA           MOV     A,R2
   \   000348   25..         ADD     A,?V0 + 14
   \   00034A   F8           MOV     R0,A
   \   00034B   EB           MOV     A,R3
   \   00034C   35..         ADDC    A,?V0 + 15
   \   00034E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000351   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000354   12....       LCALL   ??LCD_FillRect?relay
   \   000357   7404         MOV     A,#0x4
   \   000359   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035C   801A         SJMP    ??_DrawBitmap_RLE4_23
   \                     ??_DrawBitmap_RLE4_26:
   \   00035E                ; Setup parameters for call to function LCD_SetPixelIndex
   \   00035E   8A..         MOV     ?V0 + 8,R2
   \   000360   8B..         MOV     ?V0 + 9,R3
   \   000362   78..         MOV     R0,#?V0 + 8
   \   000364   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000367   7405         MOV     A,#0x5
   \   000369   12....       LCALL   ?XSTACK_DISP0_8
   \   00036C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00036F   12....       LCALL   ?XSTACK_DISP0_8
   \   000372   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000375   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??_DrawBitmap_RLE4_23:
   \   000378   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00037B   12....       LCALL   ?XSTACK_DISP0_8
   \   00037E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000381   4003         JC      ??CrossCallReturnLabel_42
   \   000383   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000386   85....       MOV     ?V0 + 7,?V0 + 6
   \   000389   74FF         MOV     A,#-0x1
   \   00038B   25..         ADD     A,?V0 + 7
   \   00038D   F5..         MOV     ?V0 + 6,A
   \   00038F   04           INC     A
   \   000390   7003         JNZ     $+5
   \   000392   02....       LJMP    ??_DrawBitmap_RLE4_9 & 0xFFFF
   \   000395   740F         MOV     A,#0xf
   \   000397   55..         ANL     A,?V0 + 0
   \   000399   700D         JNZ     ??_DrawBitmap_RLE4_27
   \   00039B   7405         MOV     A,#0x5
   \   00039D   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003A3   4003         JC      $+5
   \   0003A5   02....       LJMP    ??_DrawBitmap_RLE4_21 & 0xFFFF
   \                     ??_DrawBitmap_RLE4_27:
   \   0003A8   7401         MOV     A,#0x1
   \   0003AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AD   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0003B0   6011         JZ      ??_DrawBitmap_RLE4_28
   \   0003B2   E5..         MOV     A,?V0 + 0
   \   0003B4   540F         ANL     A,#0xf
   \   0003B6   C3           CLR     C
   \   0003B7   33           RLC     A
   \   0003B8   F8           MOV     R0,A
   \   0003B9   E4           CLR     A
   \   0003BA   04           INC     A
   \   0003BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BE   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0003C1   8007         SJMP    ??_DrawBitmap_RLE4_29
   \                     ??_DrawBitmap_RLE4_28:
   \   0003C3   E5..         MOV     A,?V0 + 0
   \   0003C5   540F         ANL     A,#0xf
   \   0003C7   FA           MOV     R2,A
   \   0003C8   7B00         MOV     R3,#0x0
   \                     ??_DrawBitmap_RLE4_29:
   \   0003CA   85..82       MOV     DPL,?XSP + 0
   \   0003CD   85..83       MOV     DPH,?XSP + 1
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003D3   4003         JC      $+5
   \   0003D5   02....       LJMP    ??_DrawBitmap_RLE4_20 & 0xFFFF
   \   0003D8                ; Setup parameters for call to function LCD_SetColorIndex
   \   0003D8   12....       LCALL   ??LCD_SetColorIndex?relay
   \   0003DB   A8..         MOV     R0,?V0 + 14
   \   0003DD   8E..         MOV     ?V0 + 0,R6
   \   0003DF   8F..         MOV     ?V0 + 1,R7
   \   0003E1   E8           MOV     A,R0
   \   0003E2   85..F0       MOV     B,?V0 + 0
   \   0003E5   A4           MUL     AB
   \   0003E6   C8           XCH     A,R0
   \   0003E7   AAF0         MOV     R2,B
   \   0003E9   85..F0       MOV     B,?V0 + 1
   \   0003EC   A4           MUL     AB
   \   0003ED   2A           ADD     A,R2
   \   0003EE   FA           MOV     R2,A
   \   0003EF   85..F0       MOV     B,?V0 + 0
   \   0003F2   E5..         MOV     A,?V0 + 15
   \   0003F4   A4           MUL     AB
   \   0003F5   2A           ADD     A,R2
   \   0003F6   F9           MOV     R1,A
   \   0003F7   7406         MOV     A,#0x6
   \   0003F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FC   12....       LCALL   ?Subroutine0 & 0xFFFF
    116                }
    117              }
    118            }
   \                     ??CrossCallReturnLabel_2:
   \   0003FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000402   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000405   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000408   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040B   EA           MOV     A,R2
   \   00040C   25..         ADD     A,?V0 + 14
   \   00040E   F8           MOV     R0,A
   \   00040F   EB           MOV     A,R3
   \   000410   35..         ADDC    A,?V0 + 15
   \   000412   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000415   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000418   12....       LCALL   ??LCD_FillRect?relay
   \   00041B   7404         MOV     A,#0x4
   \   00041D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000420   02....       LJMP    ??_DrawBitmap_RLE4_21 & 0xFFFF
    119            LCD_ACOLORINDEX[0] = aColorIndex[0];
   \                     ??_DrawBitmap_RLE4_10:
   \   000423   7409         MOV     A,#0x9
   \   000425   12....       LCALL   ?XSTACK_DISP0_8
   \   000428   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00042B   90....       MOV     DPTR,#GUI_Context
   \   00042E   E8           MOV     A,R0
   \   00042F   F0           MOVX    @DPTR,A
   \   000430   A3           INC     DPTR
   \   000431   E9           MOV     A,R1
   \   000432   F0           MOVX    @DPTR,A
    120            LCD_ACOLORINDEX[1] = aColorIndex[1];
   \   000433   740B         MOV     A,#0xb
   \   000435   12....       LCALL   ?XSTACK_DISP0_8
   \   000438   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00043B   90....       MOV     DPTR,#GUI_Context + 2
   \   00043E   E8           MOV     A,R0
   \   00043F   F0           MOVX    @DPTR,A
   \   000440   A3           INC     DPTR
   \   000441   E9           MOV     A,R1
   \   000442   F0           MOVX    @DPTR,A
    121          }
   \                     ??_DrawBitmap_RLE4_6:
   \   000443   740D         MOV     A,#0xd
   \   000445   12....       LCALL   ?DEALLOC_XSTACK8
   \   000448   7F10         MOV     R7,#0x10
   \   00044A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   7425         MOV     A,#0x25
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V0 + 1,A
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7E00         MOV     R6,#0x0
   \   000002   7F00         MOV     R7,#0x0
   \   000004                REQUIRE ??Subroutine16_0
   \   000004                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2E           ADD     A,R6
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??LCD_SetPixelIndex?relay
   \   00000A   7402         MOV     A,#0x2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   C3           CLR     C
   \   000004   EE           MOV     A,R6
   \   000005   98           SUBB    A,R0
   \   000006   EF           MOV     A,R7
   \   000007   99           SUBB    A,R1
   \   000008   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000A   65D0         XRL     A,PSW
   \   00000C   33           RLC     A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   8A82         MOV     DPL,R2
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 5
   \   000008   FD           MOV     R5,A
   \   000009   7408         MOV     A,#0x8
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   7583..       MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
   \   000006   7582..       MOV     DPL,#(GUI_Context + 10) & 0xff
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C3           CLR     C
   \   00000B   98           SUBB    A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   99           SUBB    A,R1
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   2401         ADD     A,#0x1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 8,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V0 + 9,A
   \   00000B   78..         MOV     R0,#?V0 + 8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FC           MOV     R4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FD           MOV     R5,A
   \   000007                ; Setup parameters for call to function LCD_FillRect
   \   000007                ; Setup parameters for call to function LCD_FillRect
   \   000007                ; Setup parameters for call to function LCD_FillRect
   \   000007   EC           MOV     A,R4
   \   000008   25..         ADD     A,?V0 + 12
   \   00000A   F8           MOV     R0,A
   \   00000B   ED           MOV     A,R5
   \   00000C   35..         ADDC    A,?V0 + 13
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   A8..         MOV     R0,?V0 + 12
   \   000009   E8           MOV     A,R0
   \   00000A   85..F0       MOV     B,?V0 + 4
   \   00000D   A4           MUL     AB
   \   00000E   C8           XCH     A,R0
   \   00000F   ACF0         MOV     R4,B
   \   000011   85..F0       MOV     B,?V0 + 5
   \   000014   A4           MUL     AB
   \   000015   2C           ADD     A,R4
   \   000016   FC           MOV     R4,A
   \   000017   85..F0       MOV     B,?V0 + 4
   \   00001A   E5..         MOV     A,?V0 + 13
   \   00001C   A4           MUL     AB
   \   00001D   2C           ADD     A,R4
   \   00001E   F9           MOV     R1,A
   \   00001F   7403         MOV     A,#0x3
   \   000021   22           RET
    122          
    123          /*********************************************************************
    124          *
    125          *       Public data
    126          *
    127          **********************************************************************
    128          */
    129          /*********************************************************************
    130          *
    131          *       GUI_BitmapMethodsRLE4
    132          */

   \                                 In  segment XDATA_ROM_C, align 1
    133          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE4 = {
   \                     GUI_BitmapMethodsRLE4:
   \   000000   ....         DW ??_DrawBitmap_RLE4?relay
   \   000002   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_RLE4?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_RLE4
    134            _DrawBitmap_RLE4,
    135            NULL
    136          };
    137          
    138          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     _DrawBitmap_RLE4              2      0     53
       -> LCD_GetpPalConvTable     0      0     74
       -> LCD_SetColorIndex        0      0     74
       -> LCD_FillRect             0      0     82
       -> LCD_DrawHLine            0      0     78
       -> LCD_SetPixelIndex        0      0     78
       -> LCD_SetColorIndex        0      0     74
       -> LCD_FillRect             0      0     82
       -> LCD_SetPixelIndex        0      0     78
       -> LCD_SetColorIndex        0      0     74
       -> LCD_FillRect             0      0     82


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _DrawBitmap_RLE4         1101
     ?Subroutine12              11
     ?Subroutine11              14
     ?Subroutine10               4
     ??Subroutine16_0           13
     ?Subroutine9                4
     ?Subroutine8                4
     ?Subroutine14               6
     ?Subroutine7               13
     ?Subroutine6               14
     ?Subroutine5               17
     ?Subroutine4               12
     ?Subroutine3                6
     ?Subroutine2               21
     ?Subroutine1                7
     ?Subroutine15              14
     ?Subroutine13              15
     ?Subroutine0               34
     GUI_BitmapMethodsRLE4       4
     ??_DrawBitmap_RLE4?relay    6

 
 1 310 bytes in segment BANKED_CODE
     6 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_ROM_C
 
 1 316 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
