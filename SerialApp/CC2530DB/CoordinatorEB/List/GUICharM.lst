###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:33 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUICharM.c                                       #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUICharM.c -D             #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUICha #
#                          rM.lst                                             #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUIChar #
#                          M.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUICharM.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUIChar.C
     16          Purpose     : Implementation of memory devices
     17          ----------------------------------------------------------------------
     18          Version-Date---Author-Explanation
     19          ----------------------------------------------------------------------
     20          */
     21          
     22          #include <stddef.h>           /* needed for definition of NULL */
     23          #include "GUI_Private.h"
     24           
     25          /*********************************************************************
     26          *
     27          *       Public code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       GUIMONO_DispChar
     34          *
     35          * Purpose:
     36          *   This is the routine that displays a character. It is used by all
     37          *   other routines which display characters as a subroutine.
     38          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     39          void GUIMONO_DispChar(U16P c) {
   \                     GUIMONO_DispChar:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     40            int c0, c1;
     41            const unsigned char GUI_UNI_PTR * pd;
     42            int x = GUI_Context.DispPosX;
   \   00000A   90....       MOV     DPTR,#GUI_Context + 27
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 10,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 11,A
     43            int y = GUI_Context.DispPosY;
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 5,A
     44            /* do some checking if drawing is actually necessary ... */
     45            const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
   \   00001C   90....       MOV     DPTR,#GUI_Context + 21
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   240E         ADD     A,#0xe
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   3400         ADDC    A,#0x0
   \   000027   F9           MOV     R1,A
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 9,A
     46            unsigned int FirstChar = pMono->FirstChar;
   \   000033   85..82       MOV     DPL,?V0 + 8
   \   000036   F583         MOV     DPH,A
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine3 & 0xFFFF
     47            /* translate character into 2 characters to display : c0,c1 */
     48            /* Check if regular character first. */
     49            if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
   \                     ??CrossCallReturnLabel_2:
   \   000041   403C         JC      ??GUIMONO_DispChar_0
   \   000043   85..82       MOV     DPL,?V0 + 8
   \   000046   85..83       MOV     DPH,?V0 + 9
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   C3           CLR     C
   \   000052   E0           MOVX    A,@DPTR
   \   000053   9A           SUBB    A,R2
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   9B           SUBB    A,R3
   \   000057   4026         JC      ??GUIMONO_DispChar_0
     50              pd = pMono->pData;
   \   000059   85..82       MOV     DPL,?V0 + 8
   \   00005C   85..83       MOV     DPH,?V0 + 9
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FC           MOV     R4,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FD           MOV     R5,A
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   EC           MOV     A,R4
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   ED           MOV     A,R5
   \   00006D   F0           MOVX    @DPTR,A
     51              c0 = ((int)c) - FirstChar;
   \   00006E   EA           MOV     A,R2
   \   00006F   C3           CLR     C
   \   000070   98           SUBB    A,R0
   \   000071   F5..         MOV     ?V0 + 6,A
   \   000073   EB           MOV     A,R3
   \   000074   99           SUBB    A,R1
   \   000075   F5..         MOV     ?V0 + 7,A
     52              c1 = -1;
   \   000077   75..FF       MOV     ?V0 + 14,#-0x1
   \   00007A   75..FF       MOV     ?V0 + 15,#-0x1
   \   00007D   807E         SJMP    ??GUIMONO_DispChar_1
     53            } else {
     54              /* Check if character is in translation table */
     55              GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti = pMono->pTrans;
   \                     ??GUIMONO_DispChar_0:
   \   00007F   85..82       MOV     DPL,?V0 + 8
   \   000082   85..83       MOV     DPH,?V0 + 9
   \   000085   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000088   FC           MOV     R4,A
   \   000089   E9           MOV     A,R1
   \   00008A   FD           MOV     R5,A
     56              pd = pMono->pTransData;
   \   00008B   85..82       MOV     DPL,?V0 + 8
   \   00008E   85..83       MOV     DPH,?V0 + 9
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000096   7403         MOV     A,#0x3
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   E8           MOV     A,R0
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   E9           MOV     A,R1
   \   00009F   F0           MOVX    @DPTR,A
     57              if (pti) {
   \   0000A0   EC           MOV     A,R4
   \   0000A1   4D           ORL     A,R5
   \   0000A2   7003         JNZ     $+5
   \   0000A4   02....       LJMP    ??GUIMONO_DispChar_2 & 0xFFFF
     58                FirstChar = pti->FirstChar;
     59                if ((c >= (U16P)FirstChar) && (c <= (U16P)pti->LastChar)) {
   \   0000A7   8C82         MOV     DPL,R4
   \   0000A9   8D83         MOV     DPH,R5
   \   0000AB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000AE   5003         JNC     $+5
   \   0000B0   02....       LJMP    ??GUIMONO_DispChar_2 & 0xFFFF
   \   0000B3   8C82         MOV     DPL,R4
   \   0000B5   8D83         MOV     DPH,R5
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   C3           CLR     C
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   9A           SUBB    A,R2
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   9B           SUBB    A,R3
   \   0000BF   5003         JNC     $+5
   \   0000C1   02....       LJMP    ??GUIMONO_DispChar_2 & 0xFFFF
     60                  GUI_FONT_TRANSLIST const GUI_UNI_PTR * ptl;
     61                  c -= pti->FirstChar;
     62                  ptl = pti->pList;
     63                  ptl += c;
   \   0000C4   EA           MOV     A,R2
   \   0000C5   C3           CLR     C
   \   0000C6   98           SUBB    A,R0
   \   0000C7   F5..         MOV     ?V0 + 0,A
   \   0000C9   EB           MOV     A,R3
   \   0000CA   99           SUBB    A,R1
   \   0000CB   F5..         MOV     ?V0 + 1,A
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   78..         MOV     R0,#?V0 + 0
   \   0000D1   12....       LCALL   ?S_SHL
   \   0000D4   8C82         MOV     DPL,R4
   \   0000D6   8D83         MOV     DPH,R5
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   25..         ADD     A,?V0 + 0
   \   0000DF   F8           MOV     R0,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   35..         ADDC    A,?V0 + 1
   \   0000E4   F9           MOV     R1,A
     64                  c0  = ptl->c0;
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F5..         MOV     ?V0 + 6,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F5..         MOV     ?V0 + 7,A
     65                  c1  = ptl->c1;
   \   0000F0   8882         MOV     DPL,R0
   \   0000F2   8983         MOV     DPH,R1
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F5..         MOV     ?V0 + 14,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F5..         MOV     ?V0 + 15,A
     66                } else {
     67                  c0 = c1 = -1;
     68                }
     69              } else {
     70                c0 = c1 = -1;
     71              }
     72            }
     73            /* Draw first character if it is valid */
     74            if (c0!=-1) {
   \                     ??GUIMONO_DispChar_1:
   \   0000FD   74FF         MOV     A,#-0x1
   \   0000FF   65..         XRL     A,?V0 + 6
   \   000101   7004         JNZ     ??GUIMONO_DispChar_3
   \   000103   74FF         MOV     A,#-0x1
   \   000105   65..         XRL     A,?V0 + 7
   \                     ??GUIMONO_DispChar_3:
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??GUIMONO_DispChar_2 & 0xFFFF
   \   00010C   90....       MOV     DPTR,#GUI_Context + 21
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F8           MOV     R0,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F583         MOV     DPH,A
   \   000115   8882         MOV     DPL,R0
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F8           MOV     R0,A
   \   000123   7900         MOV     R1,#0x0
   \   000125   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000128   F5..         MOV     ?V0 + 2,A
   \   00012A   E8           MOV     A,R0
   \   00012B   85..F0       MOV     B,?V0 + 2
   \   00012E   A4           MUL     AB
   \   00012F   F5..         MOV     ?V0 + 0,A
   \   000131   E5F0         MOV     A,B
   \   000133   F5..         MOV     ?V0 + 1,A
     75              int BytesPerChar = GUI_Context.pAFont->YSize*pMono->BytesPerLine;
     76              GUI_DRAWMODE DrawMode;
     77              int XSize = pMono->XSize;
   \   000135   85..82       MOV     DPL,?V0 + 8
   \   000138   85..83       MOV     DPH,?V0 + 9
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FE           MOV     R6,A
     78              int YSize = GUI_Context.pAFont->YSize;
   \   000147   88..         MOV     ?V0 + 2,R0
   \   000149   89..         MOV     ?V0 + 3,R1
     79              /* Select the right drawing mode */
     80              DrawMode = GUI_Context.TextMode;
   \   00014B   90....       MOV     DPTR,#GUI_Context + 35
   \   00014E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   E8           MOV     A,R0
   \   000158   F0           MOVX    @DPTR,A
   \   000159   A3           INC     DPTR
   \   00015A   E9           MOV     A,R1
   \   00015B   F0           MOVX    @DPTR,A
     81              /* call drawing routine */
     82              {
     83                U8 OldMode = LCD_SetDrawMode(DrawMode);
   \   00015C                ; Setup parameters for call to function LCD_SetDrawMode
   \   00015C   85..82       MOV     DPL,?XSP + 0
   \   00015F   85..83       MOV     DPH,?XSP + 1
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FA           MOV     R2,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??LCD_SetDrawMode?relay
   \   00016A   7402         MOV     A,#0x2
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   EA           MOV     A,R2
   \   000170   F0           MOVX    @DPTR,A
     84                LCD_DrawBitmap( x, y,
     85                                   XSize, YSize,
     86                                   GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
     87                                   1,     /* Bits per Pixel */
     88                                   pMono->BytesPerLine,
     89                                   pd + c0* BytesPerChar,
     90                                   &LCD_BKCOLORINDEX
     91                                   );
   \   000171   90....       MOV     DPTR,#GUI_Context + 21
   \   000174   E0           MOVX    A,@DPTR
   \   000175   FA           MOV     R2,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   FB           MOV     R3,A
   \   000179                ; Setup parameters for call to function LCD_DrawBitmap
   \   000179   75....       MOV     ?V0 + 12,#GUI_Context & 0xff
   \   00017C   75....       MOV     ?V0 + 13,#(GUI_Context >> 8) & 0xff
   \   00017F   78..         MOV     R0,#?V0 + 12
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000184   E5..         MOV     A,?V0 + 6
   \   000186   85..F0       MOV     B,?V0 + 0
   \   000189   A4           MUL     AB
   \   00018A   C5..         XCH     A,?V0 + 6
   \   00018C   A8F0         MOV     R0,B
   \   00018E   85..F0       MOV     B,?V0 + 1
   \   000191   A4           MUL     AB
   \   000192   28           ADD     A,R0
   \   000193   F8           MOV     R0,A
   \   000194   85..F0       MOV     B,?V0 + 0
   \   000197   E5..         MOV     A,?V0 + 7
   \   000199   A4           MUL     AB
   \   00019A   28           ADD     A,R0
   \   00019B   F5..         MOV     ?V0 + 7,A
   \   00019D   7405         MOV     A,#0x5
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   25..         ADD     A,?V0 + 6
   \   0001A5   F5..         MOV     ?V0 + 6,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   35..         ADDC    A,?V0 + 7
   \   0001AB   F5..         MOV     ?V0 + 7,A
   \   0001AD   78..         MOV     R0,#?V0 + 6
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B2   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001B5   F5..         MOV     ?V0 + 6,A
   \   0001B7   75..00       MOV     ?V0 + 7,#0x0
   \   0001BA   78..         MOV     R0,#?V0 + 6
   \   0001BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BF   75..01       MOV     ?V0 + 6,#0x1
   \   0001C2   78..         MOV     R0,#?V0 + 6
   \   0001C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C7   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001CA   F5..         MOV     ?V0 + 6,A
   \   0001CC   78..         MOV     R0,#?V0 + 6
   \   0001CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D1   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001D4   F5..         MOV     ?V0 + 6,A
   \   0001D6   78..         MOV     R0,#?V0 + 6
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DB   78..         MOV     R0,#?V0 + 2
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E0   8E..         MOV     ?V0 + 6,R6
   \   0001E2   78..         MOV     R0,#?V0 + 6
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E7   AC..         MOV     R4,?V0 + 4
   \   0001E9   AD..         MOV     R5,?V0 + 5
   \   0001EB   AA..         MOV     R2,?V0 + 10
   \   0001ED   AB..         MOV     R3,?V0 + 11
   \   0001EF   12....       LCALL   ??LCD_DrawBitmap?relay
   \   0001F2   7410         MOV     A,#0x10
   \   0001F4   12....       LCALL   ?DEALLOC_XSTACK8
     92                if (c1 != -1) {
   \   0001F7   74FF         MOV     A,#-0x1
   \   0001F9   65..         XRL     A,?V0 + 14
   \   0001FB   7004         JNZ     ??GUIMONO_DispChar_4
   \   0001FD   74FF         MOV     A,#-0x1
   \   0001FF   65..         XRL     A,?V0 + 15
   \                     ??GUIMONO_DispChar_4:
   \   000201   7003         JNZ     $+5
   \   000203   02....       LJMP    ??GUIMONO_DispChar_5 & 0xFFFF
     93                  LCD_SetDrawMode(DrawMode | LCD_DRAWMODE_TRANS);
   \   000206                ; Setup parameters for call to function LCD_SetDrawMode
   \   000206   85..82       MOV     DPL,?XSP + 0
   \   000209   85..83       MOV     DPH,?XSP + 1
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   4402         ORL     A,#0x2
   \   00020F   12....       LCALL   ?Subroutine6 & 0xFFFF
     94                  LCD_DrawBitmap( x, y,
     95                                     XSize, YSize,
     96                                     GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
     97                                     1,     /* Bits per Pixel */
     98                                     pMono->BytesPerLine,
     99                                     pd + c1* BytesPerChar,
    100                                     &LCD_BKCOLORINDEX
    101                                     );
    102                }
   \                     ??CrossCallReturnLabel_8:
   \   000212   FA           MOV     R2,A
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   FB           MOV     R3,A
   \   000216                ; Setup parameters for call to function LCD_DrawBitmap
   \   000216   75....       MOV     ?V0 + 6,#GUI_Context & 0xff
   \   000219   75....       MOV     ?V0 + 7,#(GUI_Context >> 8) & 0xff
   \   00021C   78..         MOV     R0,#?V0 + 6
   \   00021E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000221   E5..         MOV     A,?V0 + 14
   \   000223   85..F0       MOV     B,?V0 + 0
   \   000226   A4           MUL     AB
   \   000227   C5..         XCH     A,?V0 + 14
   \   000229   A8F0         MOV     R0,B
   \   00022B   85..F0       MOV     B,?V0 + 1
   \   00022E   A4           MUL     AB
   \   00022F   28           ADD     A,R0
   \   000230   F8           MOV     R0,A
   \   000231   85..F0       MOV     B,?V0 + 0
   \   000234   E5..         MOV     A,?V0 + 15
   \   000236   A4           MUL     AB
   \   000237   28           ADD     A,R0
   \   000238   F5..         MOV     ?V0 + 15,A
   \   00023A   7405         MOV     A,#0x5
   \   00023C   12....       LCALL   ?XSTACK_DISP0_8
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   25..         ADD     A,?V0 + 14
   \   000242   F5..         MOV     ?V0 + 0,A
   \   000244   A3           INC     DPTR
   \   000245   E0           MOVX    A,@DPTR
   \   000246   35..         ADDC    A,?V0 + 15
   \   000248   F5..         MOV     ?V0 + 1,A
   \   00024A   78..         MOV     R0,#?V0 + 0
   \   00024C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000252   F5..         MOV     ?V0 + 0,A
   \   000254   75..00       MOV     ?V0 + 1,#0x0
   \   000257   78..         MOV     R0,#?V0 + 0
   \   000259   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025C   75..01       MOV     ?V0 + 0,#0x1
   \   00025F   78..         MOV     R0,#?V0 + 0
   \   000261   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000264   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000267   F5..         MOV     ?V0 + 0,A
   \   000269   78..         MOV     R0,#?V0 + 0
   \   00026B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000271   F5..         MOV     ?V0 + 0,A
   \   000273   78..         MOV     R0,#?V0 + 0
   \   000275   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000278   78..         MOV     R0,#?V0 + 2
   \   00027A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027D   8E..         MOV     ?V0 + 0,R6
   \   00027F   78..         MOV     R0,#?V0 + 0
   \   000281   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000284   AC..         MOV     R4,?V0 + 4
   \   000286   AD..         MOV     R5,?V0 + 5
   \   000288   AA..         MOV     R2,?V0 + 10
   \   00028A   AB..         MOV     R3,?V0 + 11
   \   00028C   12....       LCALL   ??LCD_DrawBitmap?relay
   \   00028F   7410         MOV     A,#0x10
   \   000291   12....       LCALL   ?DEALLOC_XSTACK8
    103                /* Fill empty pixel lines */
    104                if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
   \                     ??GUIMONO_DispChar_5:
   \   000294   90....       MOV     DPTR,#GUI_Context + 21
   \   000297   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00029A   240B         ADD     A,#0xb
   \   00029C   F582         MOV     DPL,A
   \   00029E   E9           MOV     A,R1
   \   00029F   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0002A2   FA           MOV     R2,A
   \   0002A3   8882         MOV     DPL,R0
   \   0002A5   8983         MOV     DPH,R1
   \   0002A7   A3           INC     DPTR
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   A3           INC     DPTR
   \   0002AB   A3           INC     DPTR
   \   0002AC   A3           INC     DPTR
   \   0002AD   A3           INC     DPTR
   \   0002AE   A3           INC     DPTR
   \   0002AF   A3           INC     DPTR
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   C3           CLR     C
   \   0002B3   9A           SUBB    A,R2
   \   0002B4   4003         JC      $+5
   \   0002B6   02....       LJMP    ??GUIMONO_DispChar_6 & 0xFFFF
    105                  if (DrawMode != LCD_DRAWMODE_TRANS) {
   \   0002B9   85..82       MOV     DPL,?XSP + 0
   \   0002BC   85..83       MOV     DPH,?XSP + 1
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   6402         XRL     A,#0x2
   \   0002C2   7002         JNZ     ??GUIMONO_DispChar_7
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \                     ??GUIMONO_DispChar_7:
   \   0002C6   6071         JZ      ??GUIMONO_DispChar_6
    106                    LCD_SetDrawMode(DrawMode ^ LCD_DRAWMODE_REV);  /* Reverse so we can fill with BkColor */
   \   0002C8                ; Setup parameters for call to function LCD_SetDrawMode
   \   0002C8   85..82       MOV     DPL,?XSP + 0
   \   0002CB   85..83       MOV     DPH,?XSP + 1
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   6404         XRL     A,#0x4
   \   0002D1   12....       LCALL   ?Subroutine6 & 0xFFFF
    107                    LCD_FillRect(x, 
    108                                 y + GUI_Context.pAFont->YSize * GUI_Context.pAFont->YDist, 
    109                                 x + XSize * GUI_Context.pAFont->XMag, 
    110                                 y + GUI_Context.pAFont->YDist);
    111                  }
    112                }
   \                     ??CrossCallReturnLabel_9:
   \   0002D4   FC           MOV     R4,A
   \   0002D5   A3           INC     DPTR
   \   0002D6   E0           MOVX    A,@DPTR
   \   0002D7   FD           MOV     R5,A
   \   0002D8   EC           MOV     A,R4
   \   0002D9   240B         ADD     A,#0xb
   \   0002DB   F582         MOV     DPL,A
   \   0002DD   ED           MOV     A,R5
   \   0002DE   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002E1   FA           MOV     R2,A
   \   0002E2                ; Setup parameters for call to function LCD_FillRect
   \   0002E2   E5..         MOV     A,?V0 + 4
   \   0002E4   2A           ADD     A,R2
   \   0002E5   F5..         MOV     ?V0 + 0,A
   \   0002E7   E5..         MOV     A,?V0 + 5
   \   0002E9   3400         ADDC    A,#0x0
   \   0002EB   F5..         MOV     ?V0 + 1,A
   \   0002ED   78..         MOV     R0,#?V0 + 0
   \   0002EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F2   EC           MOV     A,R4
   \   0002F3   240C         ADD     A,#0xc
   \   0002F5   F582         MOV     DPL,A
   \   0002F7   ED           MOV     A,R5
   \   0002F8   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0002FB   F5..         MOV     ?V0 + 0,A
   \   0002FD   EE           MOV     A,R6
   \   0002FE   85..F0       MOV     B,?V0 + 0
   \   000301   A4           MUL     AB
   \   000302   FE           MOV     R6,A
   \   000303   AFF0         MOV     R7,B
   \   000305   E5..         MOV     A,?V0 + 10
   \   000307   2E           ADD     A,R6
   \   000308   F5..         MOV     ?V0 + 0,A
   \   00030A   E5..         MOV     A,?V0 + 11
   \   00030C   3F           ADDC    A,R7
   \   00030D   F5..         MOV     ?V0 + 1,A
   \   00030F   78..         MOV     R0,#?V0 + 0
   \   000311   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000314   8C82         MOV     DPL,R4
   \   000316   8D83         MOV     DPH,R5
   \   000318   A3           INC     DPTR
   \   000319   A3           INC     DPTR
   \   00031A   A3           INC     DPTR
   \   00031B   A3           INC     DPTR
   \   00031C   A3           INC     DPTR
   \   00031D   A3           INC     DPTR
   \   00031E   A3           INC     DPTR
   \   00031F   A3           INC     DPTR
   \   000320   A3           INC     DPTR
   \   000321   A3           INC     DPTR
   \   000322   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000325   E5..         MOV     A,?V0 + 4
   \   000327   2A           ADD     A,R2
   \   000328   FC           MOV     R4,A
   \   000329   E5..         MOV     A,?V0 + 5
   \   00032B   3B           ADDC    A,R3
   \   00032C   FD           MOV     R5,A
   \   00032D   AA..         MOV     R2,?V0 + 10
   \   00032F   AB..         MOV     R3,?V0 + 11
   \   000331   12....       LCALL   ??LCD_FillRect?relay
   \   000334   7404         MOV     A,#0x4
   \   000336   12....       LCALL   ?DEALLOC_XSTACK8
    113                LCD_SetDrawMode(OldMode);
   \                     ??GUIMONO_DispChar_6:
   \   000339                ; Setup parameters for call to function LCD_SetDrawMode
   \   000339   7402         MOV     A,#0x2
   \   00033B   12....       LCALL   ?XSTACK_DISP0_8
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   FA           MOV     R2,A
   \   000340   7B00         MOV     R3,#0x0
   \   000342   12....       LCALL   ??LCD_SetDrawMode?relay
    114              } 
    115            }
    116          //houhh 20061119...
    117          //  GUI_Context.DispPosX+=pMono->XDist;
    118            GUI_Context.DispPosX+=pMono->XDist * GUI_Context.pAFont->XMag;
   \                     ??GUIMONO_DispChar_2:
   \   000345   E5..         MOV     A,?V0 + 8
   \   000347   240B         ADD     A,#0xb
   \   000349   F582         MOV     DPL,A
   \   00034B   E5..         MOV     A,?V0 + 9
   \   00034D   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000350   F8           MOV     R0,A
   \   000351   90....       MOV     DPTR,#GUI_Context + 21
   \   000354   E0           MOVX    A,@DPTR
   \   000355   240C         ADD     A,#0xc
   \   000357   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00035A   F5..         MOV     ?V0 + 0,A
   \   00035C   E8           MOV     A,R0
   \   00035D   85..F0       MOV     B,?V0 + 0
   \   000360   A4           MUL     AB
   \   000361   F8           MOV     R0,A
   \   000362   A9F0         MOV     R1,B
   \   000364   90....       MOV     DPTR,#GUI_Context + 27
   \   000367   E0           MOVX    A,@DPTR
   \   000368   28           ADD     A,R0
   \   000369   F0           MOVX    @DPTR,A
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   39           ADDC    A,R1
   \   00036D   F0           MOVX    @DPTR,A
    119          
    120          }
   \   00036E   7405         MOV     A,#0x5
   \   000370   12....       LCALL   ?DEALLOC_XSTACK8
   \   000373   7F10         MOV     R7,#0x10
   \   000375   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 9
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??LCD_SetDrawMode?relay
   \   000007   90....       MOV     DPTR,#GUI_Context + 21
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   C3           CLR     C
   \   000004   EA           MOV     A,R2
   \   000005   98           SUBB    A,R0
   \   000006   EB           MOV     A,R3
   \   000007   99           SUBB    A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   240D         ADD     A,#0xd
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   EA           MOV     A,R2
   \   000004   85..F0       MOV     B,?V0 + 0
   \   000007   A4           MUL     AB
   \   000008   FA           MOV     R2,A
   \   000009   ABF0         MOV     R3,B
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET
    121          
    122          /*********************************************************************
    123          *
    124          *       GUIMONO_GetCharDistX
    125          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          int GUIMONO_GetCharDistX(U16P c) {
   \                     GUIMONO_GetCharDistX:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    127            const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
    128            GUI_USE_PARA(c);
    129          //  return pMono->XDist;
    130          //houhh 20061119...
    131            return pMono->XDist*GUI_Context.pAFont->XMag;
   \   000005   90....       MOV     DPTR,#GUI_Context + 21
   \   000008   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000B   240E         ADD     A,#0xe
   \   00000D   F582         MOV     DPL,A
   \   00000F   E9           MOV     A,R1
   \   000010   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000013   240B         ADD     A,#0xb
   \   000015   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000018   FA           MOV     R2,A
   \   000019   E8           MOV     A,R0
   \   00001A   240C         ADD     A,#0xc
   \   00001C   F582         MOV     DPL,A
   \   00001E   E9           MOV     A,R1
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000026   7F02         MOV     R7,#0x2
   \   000028   02....       LJMP    ?BANKED_LEAVE_XDATA
    132          
    133          }
    134          
    135          /*********************************************************************
    136          *
    137          *       GUIMONO_GetFontInfo
    138          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          void GUIMONO_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
   \                     GUIMONO_GetFontInfo:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    140            GUI_USE_PARA(pFont);
    141            pfi->Flags = GUI_FONTINFO_FLAG_MONO;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   7402         MOV     A,#0x2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    142          }
   \   00000E                REQUIRE ?Subroutine0
   \   00000E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    143          
    144          /*********************************************************************
    145          *
    146          *       GUIMONO_IsInFont
    147          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          char GUIMONO_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
   \                     GUIMONO_IsInFont:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    149            const GUI_FONT_MONO GUI_UNI_PTR * pMono = pFont->p.pMono;
   \   000004   EA           MOV     A,R2
   \   000005   240E         ADD     A,#0xe
   \   000007   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
    150            unsigned int FirstChar = pMono->FirstChar;
    151            /* Check if regular character first. */
    152            if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00001B   4018         JC      ??GUIMONO_IsInFont_0
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   C3           CLR     C
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   9C           SUBB    A,R4
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   9D           SUBB    A,R5
   \   00002F   4004         JC      ??GUIMONO_IsInFont_0
    153              return 1;  /* Yes, we have it ! */
   \                     ??GUIMONO_IsInFont_1:
   \   000031   7901         MOV     R1,#0x1
   \   000033   8023         SJMP    ??GUIMONO_IsInFont_2
    154            } else {
    155             /* Check if character is in translation table */
    156              GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti;
    157              pti = pMono->pTrans;
   \                     ??GUIMONO_IsInFont_0:
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   12....       LCALL   ?Subroutine1 & 0xFFFF
    158              if (pti) {
   \                     ??CrossCallReturnLabel_23:
   \   00003C   49           ORL     A,R1
   \   00003D   6017         JZ      ??GUIMONO_IsInFont_3
    159                if ((c >= pti->FirstChar) && (c <= pti->LastChar)) {
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   12....       LCALL   ?Subroutine4 & 0xFFFF
    160                  return 1;  /* Yes, we have it ! */
    161                }
    162              }
    163            }
   \                     ??CrossCallReturnLabel_5:
   \   000046   400E         JC      ??GUIMONO_IsInFont_3
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   C3           CLR     C
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   9C           SUBB    A,R4
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   9D           SUBB    A,R5
   \   000054   50DB         JNC     ??GUIMONO_IsInFont_1
    164            return 0;  /* No, we can not display this character */
   \                     ??GUIMONO_IsInFont_3:
   \   000056   7900         MOV     R1,#0x0
   \                     ??GUIMONO_IsInFont_2:
   \   000058   80..         SJMP    ?Subroutine0
    165          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   C3           CLR     C
   \   000006   EC           MOV     A,R4
   \   000007   9A           SUBB    A,R2
   \   000008   ED           MOV     A,R5
   \   000009   9B           SUBB    A,R3
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUIMONO_DispChar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUIMONO_DispChar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUIMONO_GetCharDistX?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUIMONO_GetCharDistX

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUIMONO_GetFontInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUIMONO_GetFontInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUIMONO_IsInFont?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUIMONO_IsInFont
    166          
    167          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function             ISTACK PSTACK XSTACK
     --------             ------ ------ ------
     GUIMONO_DispChar         1      0     45
       -> LCD_SetDrawMode     0      0     58
       -> LCD_DrawBitmap      0      0     90
       -> LCD_SetDrawMode     0      0     58
       -> LCD_DrawBitmap      0      0     90
       -> LCD_SetDrawMode     0      0     58
       -> LCD_FillRect        0      0     66
       -> LCD_SetDrawMode     0      0     58
     GUIMONO_GetCharDistX     0      0     10
     GUIMONO_GetFontInfo      2      0      0
     GUIMONO_IsInFont         2      0      0


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     GUIMONO_DispChar              888
     ?Subroutine8                   12
     ?Subroutine7                   14
     ?Subroutine6                   12
     ?Subroutine3                    9
     ?Subroutine10                   6
     ?Subroutine9                    3
     ??Subroutine11_0                3
     ??Subroutine12_0                6
     ?Subroutine5                   12
     ?Subroutine2                   12
     ?Subroutine1                    4
     ??Subroutine13_0                5
     GUIMONO_GetCharDistX           43
     GUIMONO_GetFontInfo            14
     ?Subroutine0                    7
     GUIMONO_IsInFont               90
     ?Subroutine4                   11
     ??GUIMONO_DispChar?relay        6
     ??GUIMONO_GetCharDistX?relay    6
     ??GUIMONO_GetFontInfo?relay     6
     ??GUIMONO_IsInFont?relay        6

 
 1 151 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
 
 1 175 bytes of CODE memory

Errors: none
Warnings: none
