///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jun/2016  16:18:49 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\C /
//                          ore\GUI_BMP.c                                     /
//    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Components\uCGUI\Core\GUI_BMP.c -D           /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D     /
//                          LCD_SUPPORTED -D NV_INIT -lC                      /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\    /
//                          -lA F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ /
//                          ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Utilities\SerialApp\CC2530DB\CoordinatorEB\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\ -I                    /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\Public\ -I          /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\uCGUI\MultiLayer\ -I       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโล /
//                          ฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\Coordinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\ZMain\TI2530DB\ -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\ -I                       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\single_chip\ -I           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z /
//                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม /
//                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 /
//                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\GUI /
//                          _BMP.s51                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GUI_BMP

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_IOR
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_GE_X
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345

        PUBLIC ??GUI_BMP_Draw?relay
        FUNCTION ??GUI_BMP_Draw?relay,0203H
        PUBLIC ??GUI_BMP_GetXSize?relay
        FUNCTION ??GUI_BMP_GetXSize?relay,0203H
        PUBLIC ??GUI_BMP_GetYSize?relay
        FUNCTION ??GUI_BMP_GetYSize?relay,0203H
        FUNCTION ??_DrawBitmap_24bpp?relay,0203H
        FUNCTION ??_DrawBitmap_Pal?relay,0203H
        FUNCTION ??_GetStep?relay,0203H
        PUBLIC GUI_BMP_Draw
        FUNCTION GUI_BMP_Draw,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC GUI_BMP_GetXSize
        FUNCTION GUI_BMP_GetXSize,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC GUI_BMP_GetYSize
        FUNCTION GUI_BMP_GetYSize,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK _A_IEN0
        FUNCTION _DrawBitmap_24bpp,021203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION _DrawBitmap_Pal,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 46, STACK
        FUNCTION _GetStep,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK __Constant_401
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
LCD_Color2Index     SYMBOL "LCD_Color2Index"
LCD_DrawBitmap      SYMBOL "LCD_DrawBitmap"
LCD_SetPixelIndex   SYMBOL "LCD_SetPixelIndex"
GUI__Read32         SYMBOL "GUI__Read32"
labs                SYMBOL "labs"
GUI__Read16         SYMBOL "GUI__Read16"
??GUI__Read16?relay SYMBOL "?relay", GUI__Read16
??GUI__Read32?relay SYMBOL "?relay", GUI__Read32
??LCD_Color2Index?relay SYMBOL "?relay", LCD_Color2Index
??LCD_DrawBitmap?relay SYMBOL "?relay", LCD_DrawBitmap
??LCD_SetPixelIndex?relay SYMBOL "?relay", LCD_SetPixelIndex
??labs?relay        SYMBOL "?relay", labs
GUI_BMP_Draw        SYMBOL "GUI_BMP_Draw"
??GUI_BMP_Draw?relay SYMBOL "?relay", GUI_BMP_Draw
GUI_BMP_GetXSize    SYMBOL "GUI_BMP_GetXSize"
??GUI_BMP_GetXSize?relay SYMBOL "?relay", GUI_BMP_GetXSize
GUI_BMP_GetYSize    SYMBOL "GUI_BMP_GetYSize"
??GUI_BMP_GetYSize?relay SYMBOL "?relay", GUI_BMP_GetYSize

        EXTERN LCD_Color2Index
        FUNCTION LCD_Color2Index,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_DrawBitmap
        FUNCTION LCD_DrawBitmap,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_SetPixelIndex
        FUNCTION LCD_SetPixelIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GUI__Read32
        FUNCTION GUI__Read32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN labs
        FUNCTION labs,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GUI__Read16
        FUNCTION GUI__Read16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??GUI__Read16?relay
        FUNCTION ??GUI__Read16?relay,00H
        EXTERN ??GUI__Read32?relay
        FUNCTION ??GUI__Read32?relay,00H
        EXTERN ??LCD_Color2Index?relay
        FUNCTION ??LCD_Color2Index?relay,00H
        EXTERN ??LCD_DrawBitmap?relay
        FUNCTION ??LCD_DrawBitmap?relay,00H
        EXTERN ??LCD_SetPixelIndex?relay
        FUNCTION ??LCD_SetPixelIndex?relay,00H
        EXTERN ??labs?relay
        FUNCTION ??labs?relay,00H
        EXTERN LCD__aConvTable

// F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUI_BMP.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/GUI
//    4 *                        Universal graphic software for embedded applications
//    5 *
//    6 *                       (c) Copyright 2002, Micrium Inc., Weston, FL
//    7 *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
//    8 *
//    9 *              ตC/GUI is protected by international copyright laws. Knowledge of the
//   10 *              source code may not be used to write a similar product. This file may
//   11 *              only be used in accordance with a license and should not be redistributed
//   12 *              in any way. We appreciate your understanding and fairness.
//   13 *
//   14 ----------------------------------------------------------------------
//   15 File        : GUI_BMP.c
//   16 Purpose     : Implementation of GUI_BMP... functions
//   17 ---------------------------END-OF-HEADER------------------------------
//   18 */
//   19 
//   20 #include <stdlib.h>
//   21 
//   22 #include "GUI_Private.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   23 
//   24 /*********************************************************************
//   25 *
//   26 *       Static functions
//   27 *
//   28 **********************************************************************
//   29 */
//   30 /*********************************************************************
//   31 *
//   32 *       _GetStep
//   33 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   34 static int _GetStep(int * pYSize, int * pY) {
_GetStep:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function _GetStep
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   35   if (*pYSize > 0) {
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     DPL,R2
        MOV     DPH,R3
        JC      ??_GetStep_0
//   36     *pY = *pYSize - 1;
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   37     return -1;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??_GetStep_1
//   38   } else if (*pYSize < 0) {
??_GetStep_0:
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_29:
        JNC     ??_GetStep_2
//   39     *pYSize = -*pYSize;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        CLR     C
        CLR     A
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   40     *pY = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   41     return 1;
        MOV     R2,#0x1
        MOV     R3,A
        SJMP    ??_GetStep_1
//   42   } else {
//   43     return 0;
??_GetStep_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??_GetStep_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   44   }
//   45 }
//   46 
//   47 /*********************************************************************
//   48 *
//   49 *       _DrawBitmap_Pal
//   50 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   51 static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
_DrawBitmap_Pal:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function _DrawBitmap_Pal
        CODE
        FUNCALL _DrawBitmap_Pal, _GetStep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_Pal, LCD_Color2Index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_Pal, LCD_DrawBitmap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//   52   int i, y, Step;
//   53   int BytesPerLine = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//   54   Step = _GetStep(&YSize, &y);
        ; Setup parameters for call to function _GetStep
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_GetStep?relay
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   55   if (!Step) {
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??_DrawBitmap_Pal_0
//   56     return 1;
        MOV     R2,#0x1
        LJMP    ??_DrawBitmap_Pal_1 & 0xFFFF
//   57   }
//   58   for (i = 0; i < NumColors; i++) {
??_DrawBitmap_Pal_0:
        MOV     ?V0 + 14,#0x0
        MOV     ?V0 + 15,#0x0
        SJMP    ??_DrawBitmap_Pal_2
//   59     U8 r, g, b;
//   60     b = *(pData);
??_DrawBitmap_Pal_3:
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
//   61     g = *(pData + 1);
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   62     r = *(pData + 2);
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
//   63     pData += 4;
        MOV     A,?V0 + 12
        ADD     A,#0x4
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     ?V0 + 13,A
//   64     LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
        ; Setup parameters for call to function LCD_Color2Index
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     A,R1
        LCALL   ?Subroutine10 & 0xFFFF
//   65   }
??CrossCallReturnLabel_20:
        LCALL   ?L_IOR
        MOV     ?V0 + 4,R2
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??LCD_Color2Index?relay
        MOV     A,?V0 + 14
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,?V0 + 15
        RLC     A
        MOV     R1,A
        MOV     A,#LCD__aConvTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(LCD__aConvTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,?V0 + 14
        ADD     A,#0x1
        MOV     ?V0 + 14,A
        MOV     A,?V0 + 15
        ADDC    A,#0x0
        MOV     ?V0 + 15,A
??_DrawBitmap_Pal_2:
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        CLR     C
        MOV     A,?V0 + 14
        SUBB    A,R0
        MOV     A,?V0 + 15
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmap_Pal_3 & 0xFFFF
//   66   switch (Bpp) {
        MOV     ?V0 + 4,?V0 + 2
        MOV     ?V0 + 5,?V0 + 3
        MOV     R0,#?V0 + 4
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for _DrawBitmap_Pal>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??_DrawBitmap_Pal_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??_DrawBitmap_Pal_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??_DrawBitmap_Pal_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??_DrawBitmap_Pal_7
        CODE
//   67     case 1:
//   68       BytesPerLine = ((XSize + 31) >> 5) << 2;
??_DrawBitmap_Pal_4:
        MOV     A,R6
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,R7
??_DrawBitmap_Pal_8:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?SS_SHR
        MOV     A,?V0 + 0
        ANL     A,#0xfc
        MOV     ?V0 + 0,A
//   69       break;
        LJMP    ??_DrawBitmap_Pal_7 & 0xFFFF
//   70     case 4:
//   71       BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
??_DrawBitmap_Pal_5:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SJMP    ??_DrawBitmap_Pal_8
//   72       break;
//   73     case 8:
//   74       BytesPerLine = ((XSize +  3) >> 2) << 2;
??_DrawBitmap_Pal_6:
        MOV     A,R6
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0xfc
        MOV     ?V0 + 0,A
        MOV     A,R1
        MOV     ?V0 + 1,A
//   75       break;
        LJMP    ??_DrawBitmap_Pal_7 & 0xFFFF
//   76   }
//   77   for (; (y < YSize) && (y >= 0); y += Step) {
//   78     LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
??_DrawBitmap_Pal_9:
        ; Setup parameters for call to function LCD_DrawBitmap
        MOV     ?V0 + 4,#LCD__aConvTable & 0xff
        MOV     ?V0 + 5,#(LCD__aConvTable >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ??LCD_DrawBitmap?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   79     pData += BytesPerLine;
        MOV     A,?V0 + 12
        ADD     A,?V0 + 0
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 13
        ADDC    A,?V0 + 1
        MOV     ?V0 + 13,A
//   80   }
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
??_DrawBitmap_Pal_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        JNC     ??_DrawBitmap_Pal_10
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_30:
        JC      $+5
        LJMP    ??_DrawBitmap_Pal_9 & 0xFFFF
//   81   return 0;
??_DrawBitmap_Pal_10:
        MOV     R2,#0x0
??_DrawBitmap_Pal_1:
        MOV     R3,#0x0
        MOV     A,#0x6
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   82 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Valid
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+-2
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+-2
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        CLR     C
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
//   83 
//   84 /*********************************************************************
//   85 *
//   86 *       _DrawBitmap_24bpp
//   87 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
_DrawBitmap_24bpp:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function _DrawBitmap_24bpp
        CODE
        FUNCALL _DrawBitmap_24bpp, _GetStep
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_24bpp, LCD_Color2Index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmap_24bpp, LCD_SetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 15,A
//   89   int x, y, BytesPerLine, Step;
//   90   Step = _GetStep(&YSize, &y);
        ; Setup parameters for call to function _GetStep
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_GetStep?relay
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
//   91   if (!Step) {
        MOV     A,R2
        ORL     A,?V0 + 13
        JNZ     ??_DrawBitmap_24bpp_0
//   92     return 1;
        MOV     R2,#0x1
        LJMP    ??_DrawBitmap_24bpp_1 & 0xFFFF
//   93   }
//   94   BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
??_DrawBitmap_24bpp_0:
        MOV     A,?V0 + 14
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x18
        MOV     A,?V0 + 15
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,R1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?SS_SHR
        MOV     A,?V0 + 0
        ANL     A,#0xfc
        MOV     ?V0 + 0,A
        LJMP    ??_DrawBitmap_24bpp_2 & 0xFFFF
//   95   for (; (y < YSize) && (y >= 0); y += Step) {
//   96     for (x = 0; x < XSize; x++) {
//   97       const U8 * pColor = pData + 3 * x;
??_DrawBitmap_24bpp_3:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x3
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     R3,A
//   98       U8 r, g, b;
//   99       b = *(pColor);
//  100       g = *(pColor + 1);
//  101       r = *(pColor + 2);
//  102       LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
        ; Setup parameters for call to function LCD_Color2Index
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine10 & 0xFFFF
//  103     }
??CrossCallReturnLabel_21:
        LCALL   ?L_IOR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??LCD_Color2Index?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        ; Setup parameters for call to function LCD_SetPixelIndex
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R3,A
        LCALL   ??LCD_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??_DrawBitmap_24bpp_4:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 14
        MOV     A,R7
        SUBB    A,?V0 + 15
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmap_24bpp_3 & 0xFFFF
//  104     pData += BytesPerLine;
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 12
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 13
        MOVX    @DPTR,A
??_DrawBitmap_24bpp_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        JNC     ??_DrawBitmap_24bpp_5
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_31:
        JC      ??_DrawBitmap_24bpp_5
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??_DrawBitmap_24bpp_4
//  105   }
//  106   return 0;
??_DrawBitmap_24bpp_5:
        MOV     R2,#0x0
??_DrawBitmap_24bpp_1:
        MOV     R3,#0x0
        MOV     A,#0x4
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock24
//  107 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV     ?V0 + 4,A
        CLR     A
        XCH     A,?V0 + 4
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
//  108 
//  109 /*********************************************************************
//  110 *
//  111 *       Public code
//  112 *
//  113 **********************************************************************
//  114 */
//  115 /*********************************************************************
//  116 *
//  117 *       GUI_BMP_GetXSize
//  118 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 int GUI_BMP_GetXSize(const void * pBMP) {
GUI_BMP_GetXSize:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function GUI_BMP_GetXSize
        CODE
        FUNCALL GUI_BMP_GetXSize, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  120   const U8 * pSrc = (const U8 *)pBMP;
//  121   if (!pBMP) {
        MOV     A,R2
        ORL     A,R3
        JNZ     ??GUI_BMP_GetXSize_0
//  122     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_18
//  123   }
//  124   pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
??GUI_BMP_GetXSize_0:
        MOV     A,R2
        ADD     A,#0x12
        LCALL   ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock34
//  125   return GUI__Read32(&pSrc);
??CrossCallReturnLabel_18:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  126 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35
//  127 
//  128 /*********************************************************************
//  129 *
//  130 *       GUI_BMP_GetYSize
//  131 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 int GUI_BMP_GetYSize(const void * pBMP) {
GUI_BMP_GetYSize:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function GUI_BMP_GetYSize
        CODE
        FUNCALL GUI_BMP_GetYSize, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_GetYSize, labs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  133   const U8 * pSrc = (const U8 *)pBMP;
//  134   if (!pBMP) {
        MOV     A,R2
        ORL     A,R3
        JNZ     ??GUI_BMP_GetYSize_0
//  135     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??GUI_BMP_GetYSize_1
//  136   }
//  137   pSrc += 22;
??GUI_BMP_GetYSize_0:
        MOV     A,R2
        ADD     A,#0x16
        LCALL   ?Subroutine8 & 0xFFFF
//  138   return labs((int)GUI__Read32(&pSrc));
??CrossCallReturnLabel_19:
        MOV     A,R3
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        LCALL   ??labs?relay
??GUI_BMP_GetYSize_1:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock36
//  139 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
//  140 
//  141 /*********************************************************************
//  142 *
//  143 *       GUI_BMP_Draw
//  144 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
GUI_BMP_Draw:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function GUI_BMP_Draw
        CODE
        FUNCALL GUI_BMP_Draw, GUI__Read16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, GUI__Read16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, GUI__Read32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, _DrawBitmap_Pal
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GUI_BMP_Draw, _DrawBitmap_24bpp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 15,A
//  146   #if (GUI_WINSUPPORT)
//  147     GUI_RECT r;
//  148   #endif
//  149   int Ret = 0;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine16_0 & 0xFFFF
//  150   I32 Width, Height;
//  151   U16 BitCount, Type;
//  152   U32 ClrUsed, Compression;
//  153   int NumColors;
//  154   const U8 * pSrc = (const U8 *)pBMP;
??CrossCallReturnLabel_34:
        LCALL   ?Subroutine9 & 0xFFFF
//  155   Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
??CrossCallReturnLabel_32:
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI__Read16?relay
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  156   pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
//  157   /* get values from BITMAPINFOHEADER */
//  158   pSrc += 4;
??CrossCallReturnLabel_33:
        MOVX    A,@DPTR
        ADD     A,#0x10
        LCALL   ?Subroutine2 & 0xFFFF
//  159   Width       = GUI__Read32(&pSrc);
??CrossCallReturnLabel_0:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  160   Height      = GUI__Read32(&pSrc);
        ; Setup parameters for call to function GUI__Read32
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI__Read32?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  161   pSrc += 2;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x2
        LCALL   ?Subroutine5 & 0xFFFF
//  162   BitCount    = GUI__Read16(&pSrc);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function GUI__Read16
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI__Read16?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
//  163   Compression = GUI__Read32(&pSrc);
        ; Setup parameters for call to function GUI__Read32
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI__Read32?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  164   pSrc += 12;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0xc
        LCALL   ?Subroutine2 & 0xFFFF
//  165   ClrUsed     = GUI__Read32(&pSrc);
??CrossCallReturnLabel_1:
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
//  166   pSrc += 4;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x4
        LCALL   ?Subroutine5 & 0xFFFF
//  167   /* calculate number of colors */
//  168   switch (BitCount) {
??CrossCallReturnLabel_11:
        MOV     ?V0 + 12,R6
        MOV     ?V0 + 13,R7
        MOV     R0,#?V0 + 12
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GUI_BMP_Draw>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_4
        CODE
//  169     case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
??GUI_BMP_Draw_4:
        MOV     R2,#0x1
        MOV     R3,#0x0
        LJMP    ??CrossCallReturnLabel_17 & 0xFFFF
//  170     case 1:   NumColors = 2;   break;
??GUI_BMP_Draw_0:
        MOV     R4,#0x2
??GUI_BMP_Draw_5:
        MOV     R5,#0x0
??GUI_BMP_Draw_6:
        MOV     R1,?V0 + 9
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        MOV     A,?V0 + 8
        ORL     A,R1
        ORL     A,R2
        ORL     A,R3
        JZ      ??GUI_BMP_Draw_7
//  171     case 4:   NumColors = 16;  break;
//  172     case 8:   NumColors = 256; break;
//  173     case 24:  NumColors = 0;   break;
//  174     default:
//  175       return 1; /* biBitCount should be 1, 4, 8 or 24 */
//  176   }
//  177   if (NumColors && ClrUsed) {
//  178     NumColors = ClrUsed;
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
//  179   }
//  180   /* check validity of bmp */
//  181   if ((NumColors > LCD_MAX_LOG_COLORS) ||
//  182       (Type != 0x4d42)                 || /* 'BM' */
//  183       (Compression)                    || /* only uncompressed bitmaps */
//  184       (Width  > 1024)                  ||
//  185       (Height > 1024)) {
        CLR     C
        MOV     A,R4
        SUBB    A,#0x1
        MOV     A,R5
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??GUI_BMP_Draw_4
??GUI_BMP_Draw_7:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x42
        JNZ     ??GUI_BMP_Draw_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4d
??GUI_BMP_Draw_8:
        JNZ     ??GUI_BMP_Draw_4
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        ORL     A,?V0 + 10
        ORL     A,?V0 + 11
        JNZ     ??GUI_BMP_Draw_4
        MOV     DPTR,#__Constant_401
        MOV     R0,#?V0 + 0
        LCALL   ?SL_GE_X
        JC      ??GUI_BMP_Draw_4
        MOV     DPTR,#__Constant_401
        MOV     R0,#?V0 + 4
        LCALL   ?SL_GE_X
        JC      ??GUI_BMP_Draw_4
//  186     return 1;
//  187   }
//  188   /* start output */
//  189   halIntState_t state;
//  190   GUI_LOCK(state);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 10,A
        CLR     0xa8.7
//  191   #if (GUI_WINSUPPORT)
//  192     WM_ADDORG(x0,y0);
//  193     r.x1 = (r.x0 = x0) + Width - 1;
//  194     r.y1 = (r.y0 = y0) + Height - 1;
//  195     WM_ITERATE_START(&r) {
//  196   #endif
//  197   /* Show bitmap */
//  198   switch (BitCount) {
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     R0,#?V0 + 8
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GUI_BMP_Draw>_1`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GUI_BMP_Draw_11
        CODE
//  199     case 1:
//  200     case 4:
//  201     case 8:
//  202       Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
??GUI_BMP_Draw_9:
        ; Setup parameters for call to function _DrawBitmap_Pal
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 9,R5
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R0,#?V0 + 14
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??_DrawBitmap_Pal?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        SJMP    ??GUI_BMP_Draw_12
??GUI_BMP_Draw_1:
        MOV     R4,#0x10
        LJMP    ??GUI_BMP_Draw_5 & 0xFFFF
??GUI_BMP_Draw_2:
        MOV     R4,#0x0
        MOV     R5,#0x1
        LJMP    ??GUI_BMP_Draw_6 & 0xFFFF
??GUI_BMP_Draw_3:
        MOV     R4,#0x0
        MOV     R5,#0x0
        LJMP    ??GUI_BMP_Draw_7 & 0xFFFF
//  203       break;
//  204     case 24:
//  205       Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
??GUI_BMP_Draw_10:
        ; Setup parameters for call to function _DrawBitmap_24bpp
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R0,#?V0 + 14
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??_DrawBitmap_24bpp?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
??GUI_BMP_Draw_12:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  206       break;
//  207   }
//  208   #if (GUI_WINSUPPORT)
//  209     } WM_ITERATE_END();
//  210   #endif
//  211   GUI_UNLOCK(state);
??GUI_BMP_Draw_11:
        MOV     A,?V0 + 10
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  212   return Ret;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0xc
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock40
        REQUIRE _A_IEN0
//  213 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function GUI__Read16
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_11
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_18
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_19
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_0
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_1
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_19
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_0
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_1
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function GUI__Read32
        ; Setup parameters for call to function labs
        ; Setup parameters for call to function GUI__Read32
        ; Setup parameters for call to function GUI__Read32
        ; Setup parameters for call to function GUI__Read32
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI__Read32?relay
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_401:
        DD 1025

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_GetStep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _GetStep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_DrawBitmap_Pal?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _DrawBitmap_Pal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_DrawBitmap_24bpp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _DrawBitmap_24bpp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_BMP_GetXSize?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_BMP_GetXSize

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_BMP_GetYSize?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_BMP_GetYSize

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GUI_BMP_Draw?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GUI_BMP_Draw

        END
//  214 
//  215 /*************************** End of file ****************************/
// 
// 1 668 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_ROM_C
// 
// 1 704 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//
//Errors: none
//Warnings: none
