###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:49 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUI_BMP.c                                        #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUI_BMP.c -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUI_BM #
#                          P.lst                                              #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUI_BMP #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUI_BMP.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_BMP.c
     16          Purpose     : Implementation of GUI_BMP... functions
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stdlib.h>
     21          
     22          #include "GUI_Private.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     23          
     24          /*********************************************************************
     25          *
     26          *       Static functions
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _GetStep
     33          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          static int _GetStep(int * pYSize, int * pY) {
   \                     _GetStep:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     35            if (*pYSize > 0) {
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   C3           CLR     C
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   9401         SUBB    A,#0x1
   \   00000D   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   4018         JC      ??_GetStep_0
     36              *pY = *pYSize - 1;
   \   000016   E0           MOVX    A,@DPTR
   \   000017   24FF         ADD     A,#-0x1
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   34FF         ADDC    A,#-0x1
   \   00001E   F9           MOV     R1,A
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   F0           MOVX    @DPTR,A
     37              return -1;
   \   000028   7AFF         MOV     R2,#-0x1
   \   00002A   7BFF         MOV     R3,#-0x1
   \   00002C   802D         SJMP    ??_GetStep_1
     38            } else if (*pYSize < 0) {
   \                     ??_GetStep_0:
   \   00002E   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000031   5024         JNC     ??_GetStep_2
     39              *pYSize = -*pYSize;
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00003A   C3           CLR     C
   \   00003B   E4           CLR     A
   \   00003C   98           SUBB    A,R0
   \   00003D   F8           MOV     R0,A
   \   00003E   E4           CLR     A
   \   00003F   99           SUBB    A,R1
   \   000040   F9           MOV     R1,A
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
     40              *pY = 0;
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   F0           MOVX    @DPTR,A
     41              return 1;
   \   000052   7A01         MOV     R2,#0x1
   \   000054   FB           MOV     R3,A
   \   000055   8004         SJMP    ??_GetStep_1
     42            } else {
     43              return 0;
   \                     ??_GetStep_2:
   \   000057   7A00         MOV     R2,#0x0
   \   000059   7B00         MOV     R3,#0x0
   \                     ??_GetStep_1:
   \   00005B   7F01         MOV     R7,#0x1
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
     44            }
     45          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   C3           CLR     C
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   9400         SUBB    A,#0x0
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   22           RET
     46          
     47          /*********************************************************************
     48          *
     49          *       _DrawBitmap_Pal
     50          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     51          static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
   \                     _DrawBitmap_Pal:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8A..         MOV     ?V0 + 12,R2
   \   000016   8B..         MOV     ?V0 + 13,R3
   \   000018   7420         MOV     A,#0x20
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FF           MOV     R7,A
   \   000022   7424         MOV     A,#0x24
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 2,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 3,A
     52            int i, y, Step;
     53            int BytesPerLine = 0;
   \   00002E   75..00       MOV     ?V0 + 0,#0x0
   \   000031   75..00       MOV     ?V0 + 1,#0x0
     54            Step = _GetStep(&YSize, &y);
   \   000034                ; Setup parameters for call to function _GetStep
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   AC82         MOV     R4,DPL
   \   00003C   AD83         MOV     R5,DPH
   \   00003E   7422         MOV     A,#0x22
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   AA82         MOV     R2,DPL
   \   000045   AB83         MOV     R3,DPH
   \   000047   12....       LCALL   ??_GetStep?relay
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   EA           MOV     A,R2
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   EB           MOV     A,R3
   \   000053   F0           MOVX    @DPTR,A
     55            if (!Step) {
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   7005         JNZ     ??_DrawBitmap_Pal_0
     56              return 1;
   \   000060   7A01         MOV     R2,#0x1
   \   000062   02....       LJMP    ??_DrawBitmap_Pal_1 & 0xFFFF
     57            }
     58            for (i = 0; i < NumColors; i++) {
   \                     ??_DrawBitmap_Pal_0:
   \   000065   75..00       MOV     ?V0 + 14,#0x0
   \   000068   75..00       MOV     ?V0 + 15,#0x0
   \   00006B   8074         SJMP    ??_DrawBitmap_Pal_2
     59              U8 r, g, b;
     60              b = *(pData);
   \                     ??_DrawBitmap_Pal_3:
   \   00006D   85..82       MOV     DPL,?V0 + 12
   \   000070   85..83       MOV     DPH,?V0 + 13
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V0 + 8,A
     61              g = *(pData + 1);
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
     62              r = *(pData + 2);
   \   000079   85..82       MOV     DPL,?V0 + 12
   \   00007C   85..83       MOV     DPH,?V0 + 13
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
     63              pData += 4;
   \   000083   E5..         MOV     A,?V0 + 12
   \   000085   2404         ADD     A,#0x4
   \   000087   F5..         MOV     ?V0 + 12,A
   \   000089   E5..         MOV     A,?V0 + 13
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   F5..         MOV     ?V0 + 13,A
     64              LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
   \   00008F                ; Setup parameters for call to function LCD_Color2Index
   \   00008F   E4           CLR     A
   \   000090   F5..         MOV     ?V0 + 9,A
   \   000092   F5..         MOV     ?V0 + 10,A
   \   000094   F5..         MOV     ?V0 + 11,A
   \   000096   7410         MOV     A,#0x10
   \   000098   78..         MOV     R0,#?V0 + 8
   \   00009A   12....       LCALL   ?L_SHL
   \   00009D   E9           MOV     A,R1
   \   00009E   12....       LCALL   ?Subroutine10 & 0xFFFF
     65            }
   \                     ??CrossCallReturnLabel_20:
   \   0000A1   12....       LCALL   ?L_IOR
   \   0000A4   8A..         MOV     ?V0 + 4,R2
   \   0000A6   E4           CLR     A
   \   0000A7   F5..         MOV     ?V0 + 5,A
   \   0000A9   F5..         MOV     ?V0 + 6,A
   \   0000AB   F5..         MOV     ?V0 + 7,A
   \   0000AD   78..         MOV     R0,#?V0 + 8
   \   0000AF   79..         MOV     R1,#?V0 + 4
   \   0000B1   12....       LCALL   ?L_IOR
   \   0000B4   AB..         MOV     R3,?V0 + 9
   \   0000B6   AC..         MOV     R4,?V0 + 10
   \   0000B8   AD..         MOV     R5,?V0 + 11
   \   0000BA   12....       LCALL   ??LCD_Color2Index?relay
   \   0000BD   E5..         MOV     A,?V0 + 14
   \   0000BF   C3           CLR     C
   \   0000C0   33           RLC     A
   \   0000C1   F8           MOV     R0,A
   \   0000C2   E5..         MOV     A,?V0 + 15
   \   0000C4   33           RLC     A
   \   0000C5   F9           MOV     R1,A
   \   0000C6   74..         MOV     A,#LCD__aConvTable & 0xff
   \   0000C8   28           ADD     A,R0
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   74..         MOV     A,#(LCD__aConvTable >> 8) & 0xff
   \   0000CD   39           ADDC    A,R1
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   EB           MOV     A,R3
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   E5..         MOV     A,?V0 + 14
   \   0000D7   2401         ADD     A,#0x1
   \   0000D9   F5..         MOV     ?V0 + 14,A
   \   0000DB   E5..         MOV     A,?V0 + 15
   \   0000DD   3400         ADDC    A,#0x0
   \   0000DF   F5..         MOV     ?V0 + 15,A
   \                     ??_DrawBitmap_Pal_2:
   \   0000E1   7426         MOV     A,#0x26
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E9   C3           CLR     C
   \   0000EA   E5..         MOV     A,?V0 + 14
   \   0000EC   98           SUBB    A,R0
   \   0000ED   E5..         MOV     A,?V0 + 15
   \   0000EF   99           SUBB    A,R1
   \   0000F0   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000F2   65D0         XRL     A,PSW
   \   0000F4   33           RLC     A
   \   0000F5   5003         JNC     $+5
   \   0000F7   02....       LJMP    ??_DrawBitmap_Pal_3 & 0xFFFF
     66            switch (Bpp) {
   \   0000FA   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000FD   85....       MOV     ?V0 + 5,?V0 + 3
   \   000100   78..         MOV     R0,#?V0 + 4
   \   000102   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for _DrawBitmap_Pal>_0`:
   \   000105   0000         DW        0
   \   000107   0300         DW        3
   \   000109   0100         DW        1
   \   00010B   ....         DW        ??_DrawBitmap_Pal_4
   \   00010D   0400         DW        4
   \   00010F   ....         DW        ??_DrawBitmap_Pal_5
   \   000111   0800         DW        8
   \   000113   ....         DW        ??_DrawBitmap_Pal_6
   \   000115   ....         DW        ??_DrawBitmap_Pal_7
     67              case 1:
     68                BytesPerLine = ((XSize + 31) >> 5) << 2;
   \                     ??_DrawBitmap_Pal_4:
   \   000117   EE           MOV     A,R6
   \   000118   241F         ADD     A,#0x1f
   \   00011A   F5..         MOV     ?V0 + 0,A
   \   00011C   EF           MOV     A,R7
   \                     ??_DrawBitmap_Pal_8:
   \   00011D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000120   12....       LCALL   ?SS_SHR
   \   000123   E5..         MOV     A,?V0 + 0
   \   000125   54FC         ANL     A,#0xfc
   \   000127   F5..         MOV     ?V0 + 0,A
     69                break;
   \   000129   02....       LJMP    ??_DrawBitmap_Pal_7 & 0xFFFF
     70              case 4:
     71                BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
   \                     ??_DrawBitmap_Pal_5:
   \   00012C   8E..         MOV     ?V0 + 0,R6
   \   00012E   8F..         MOV     ?V0 + 1,R7
   \   000130   7402         MOV     A,#0x2
   \   000132   78..         MOV     R0,#?V0 + 0
   \   000134   12....       LCALL   ?S_SHL
   \   000137   E5..         MOV     A,?V0 + 0
   \   000139   241F         ADD     A,#0x1f
   \   00013B   F5..         MOV     ?V0 + 0,A
   \   00013D   E5..         MOV     A,?V0 + 1
   \   00013F   80DC         SJMP    ??_DrawBitmap_Pal_8
     72                break;
     73              case 8:
     74                BytesPerLine = ((XSize +  3) >> 2) << 2;
   \                     ??_DrawBitmap_Pal_6:
   \   000141   EE           MOV     A,R6
   \   000142   2403         ADD     A,#0x3
   \   000144   F8           MOV     R0,A
   \   000145   EF           MOV     A,R7
   \   000146   3400         ADDC    A,#0x0
   \   000148   F9           MOV     R1,A
   \   000149   E8           MOV     A,R0
   \   00014A   54FC         ANL     A,#0xfc
   \   00014C   F5..         MOV     ?V0 + 0,A
   \   00014E   E9           MOV     A,R1
   \   00014F   F5..         MOV     ?V0 + 1,A
     75                break;
   \   000151   02....       LJMP    ??_DrawBitmap_Pal_7 & 0xFFFF
     76            }
     77            for (; (y < YSize) && (y >= 0); y += Step) {
     78              LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
   \                     ??_DrawBitmap_Pal_9:
   \   000154                ; Setup parameters for call to function LCD_DrawBitmap
   \   000154   75....       MOV     ?V0 + 4,#LCD__aConvTable & 0xff
   \   000157   75....       MOV     ?V0 + 5,#(LCD__aConvTable >> 8) & 0xff
   \   00015A   78..         MOV     R0,#?V0 + 4
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015F   78..         MOV     R0,#?V0 + 12
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   8E..         MOV     ?V0 + 4,R6
   \   000166   8F..         MOV     ?V0 + 5,R7
   \   000168   78..         MOV     R0,#?V0 + 4
   \   00016A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016D   78..         MOV     R0,#?V0 + 2
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000172   75..01       MOV     ?V0 + 4,#0x1
   \   000175   75..00       MOV     ?V0 + 5,#0x0
   \   000178   78..         MOV     R0,#?V0 + 4
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017D   78..         MOV     R0,#?V0 + 4
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000182   78..         MOV     R0,#?V0 + 4
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   8E..         MOV     ?V0 + 4,R6
   \   000189   8F..         MOV     ?V0 + 5,R7
   \   00018B   78..         MOV     R0,#?V0 + 4
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   742E         MOV     A,#0x2e
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000198   7410         MOV     A,#0x10
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   28           ADD     A,R0
   \   00019F   FC           MOV     R4,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   39           ADDC    A,R1
   \   0001A3   FD           MOV     R5,A
   \   0001A4   7414         MOV     A,#0x14
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001AC   12....       LCALL   ??LCD_DrawBitmap?relay
   \   0001AF   7410         MOV     A,#0x10
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
     79              pData += BytesPerLine;
   \   0001B4   E5..         MOV     A,?V0 + 12
   \   0001B6   25..         ADD     A,?V0 + 0
   \   0001B8   F5..         MOV     ?V0 + 12,A
   \   0001BA   E5..         MOV     A,?V0 + 13
   \   0001BC   35..         ADDC    A,?V0 + 1
   \   0001BE   F5..         MOV     ?V0 + 13,A
     80            }
   \   0001C0   7402         MOV     A,#0x2
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001C8   85..82       MOV     DPL,?XSP + 0
   \   0001CB   85..83       MOV     DPH,?XSP + 1
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   28           ADD     A,R0
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   39           ADDC    A,R1
   \   0001D4   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmap_Pal_7:
   \   0001D5   85..82       MOV     DPL,?XSP + 0
   \   0001D8   85..83       MOV     DPH,?XSP + 1
   \   0001DB   C082         PUSH    DPL
   \   0001DD   C083         PUSH    DPH
   \   0001DF   7422         MOV     A,#0x22
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001E7   D083         POP     DPH
   \   0001E9   D082         POP     DPL
   \   0001EB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001EE   5008         JNC     ??_DrawBitmap_Pal_10
   \   0001F0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001F3   4003         JC      $+5
   \   0001F5   02....       LJMP    ??_DrawBitmap_Pal_9 & 0xFFFF
     81            return 0;
   \                     ??_DrawBitmap_Pal_10:
   \   0001F8   7A00         MOV     R2,#0x0
   \                     ??_DrawBitmap_Pal_1:
   \   0001FA   7B00         MOV     R3,#0x0
   \   0001FC   7406         MOV     A,#0x6
   \   0001FE                REQUIRE ?Subroutine0
   \   0001FE                ; // Fall through to label ?Subroutine0
     82          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine14_0
   \   000006                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   7403         MOV     A,#0x3
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   E4           CLR     A
   \   000003   C5..         XCH     A,?V0 + 4
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   33           RLC     A
   \   000008   95E0         SUBB    A,0xE0 /* A   */
   \   00000A   F5..         MOV     ?V0 + 6,A
   \   00000C   F5..         MOV     ?V0 + 7,A
   \   00000E   78..         MOV     R0,#?V0 + 8
   \   000010   79..         MOV     R1,#?V0 + 4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     83          
     84          /*********************************************************************
     85          *
     86          *       _DrawBitmap_24bpp
     87          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     88          static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
   \                     _DrawBitmap_24bpp:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8A..         MOV     ?V0 + 2,R2
   \   000016   8B..         MOV     ?V0 + 3,R3
   \   000018   741E         MOV     A,#0x1e
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 14,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 15,A
     89            int x, y, BytesPerLine, Step;
     90            Step = _GetStep(&YSize, &y);
   \   000024                ; Setup parameters for call to function _GetStep
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7420         MOV     A,#0x20
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   AA82         MOV     R2,DPL
   \   000035   AB83         MOV     R3,DPH
   \   000037   12....       LCALL   ??_GetStep?relay
   \   00003A   8A..         MOV     ?V0 + 12,R2
   \   00003C   8B..         MOV     ?V0 + 13,R3
     91            if (!Step) {
   \   00003E   EA           MOV     A,R2
   \   00003F   45..         ORL     A,?V0 + 13
   \   000041   7005         JNZ     ??_DrawBitmap_24bpp_0
     92              return 1;
   \   000043   7A01         MOV     R2,#0x1
   \   000045   02....       LJMP    ??_DrawBitmap_24bpp_1 & 0xFFFF
     93            }
     94            BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
   \                     ??_DrawBitmap_24bpp_0:
   \   000048   E5..         MOV     A,?V0 + 14
   \   00004A   75F018       MOV     B,#0x18
   \   00004D   A4           MUL     AB
   \   00004E   F8           MOV     R0,A
   \   00004F   AAF0         MOV     R2,B
   \   000051   75F018       MOV     B,#0x18
   \   000054   E5..         MOV     A,?V0 + 15
   \   000056   A4           MUL     AB
   \   000057   2A           ADD     A,R2
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   241F         ADD     A,#0x1f
   \   00005C   F5..         MOV     ?V0 + 0,A
   \   00005E   E9           MOV     A,R1
   \   00005F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000062   12....       LCALL   ?SS_SHR
   \   000065   E5..         MOV     A,?V0 + 0
   \   000067   54FC         ANL     A,#0xfc
   \   000069   F5..         MOV     ?V0 + 0,A
   \   00006B   02....       LJMP    ??_DrawBitmap_24bpp_2 & 0xFFFF
     95            for (; (y < YSize) && (y >= 0); y += Step) {
     96              for (x = 0; x < XSize; x++) {
     97                const U8 * pColor = pData + 3 * x;
   \                     ??_DrawBitmap_24bpp_3:
   \   00006E   EE           MOV     A,R6
   \   00006F   F8           MOV     R0,A
   \   000070   EF           MOV     A,R7
   \   000071   F9           MOV     R1,A
   \   000072   E8           MOV     A,R0
   \   000073   75F003       MOV     B,#0x3
   \   000076   A4           MUL     AB
   \   000077   F8           MOV     R0,A
   \   000078   AAF0         MOV     R2,B
   \   00007A   75F003       MOV     B,#0x3
   \   00007D   E9           MOV     A,R1
   \   00007E   A4           MUL     AB
   \   00007F   2A           ADD     A,R2
   \   000080   F9           MOV     R1,A
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   28           ADD     A,R0
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 3
   \   000087   39           ADDC    A,R1
   \   000088   FB           MOV     R3,A
     98                U8 r, g, b;
     99                b = *(pColor);
    100                g = *(pColor + 1);
    101                r = *(pColor + 2);
    102                LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
   \   000089                ; Setup parameters for call to function LCD_Color2Index
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F5..         MOV     ?V0 + 8,A
   \   000090   E4           CLR     A
   \   000091   F5..         MOV     ?V0 + 9,A
   \   000093   F5..         MOV     ?V0 + 10,A
   \   000095   F5..         MOV     ?V0 + 11,A
   \   000097   7410         MOV     A,#0x10
   \   000099   78..         MOV     R0,#?V0 + 8
   \   00009B   12....       LCALL   ?L_SHL
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   12....       LCALL   ?Subroutine10 & 0xFFFF
    103              }
   \                     ??CrossCallReturnLabel_21:
   \   0000A3   12....       LCALL   ?L_IOR
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F5..         MOV     ?V0 + 4,A
   \   0000AF   E4           CLR     A
   \   0000B0   F5..         MOV     ?V0 + 5,A
   \   0000B2   F5..         MOV     ?V0 + 6,A
   \   0000B4   F5..         MOV     ?V0 + 7,A
   \   0000B6   78..         MOV     R0,#?V0 + 8
   \   0000B8   79..         MOV     R1,#?V0 + 4
   \   0000BA   12....       LCALL   ?L_IOR
   \   0000BD   AA..         MOV     R2,?V0 + 8
   \   0000BF   AB..         MOV     R3,?V0 + 9
   \   0000C1   AC..         MOV     R4,?V0 + 10
   \   0000C3   AD..         MOV     R5,?V0 + 11
   \   0000C5   12....       LCALL   ??LCD_Color2Index?relay
   \   0000C8   8A..         MOV     ?V0 + 4,R2
   \   0000CA   8B..         MOV     ?V0 + 5,R3
   \   0000CC                ; Setup parameters for call to function LCD_SetPixelIndex
   \   0000CC   78..         MOV     R0,#?V0 + 4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   741E         MOV     A,#0x1e
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   28           ADD     A,R0
   \   0000E0   FC           MOV     R4,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   39           ADDC    A,R1
   \   0000E4   FD           MOV     R5,A
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   2E           ADD     A,R6
   \   0000EC   FA           MOV     R2,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   3F           ADDC    A,R7
   \   0000F0   FB           MOV     R3,A
   \   0000F1   12....       LCALL   ??LCD_SetPixelIndex?relay
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2401         ADD     A,#0x1
   \   0000FC   0E           INC     R6
   \   0000FD   EF           MOV     A,R7
   \   0000FE   3400         ADDC    A,#0x0
   \   000100   FF           MOV     R7,A
   \                     ??_DrawBitmap_24bpp_4:
   \   000101   C3           CLR     C
   \   000102   EE           MOV     A,R6
   \   000103   95..         SUBB    A,?V0 + 14
   \   000105   EF           MOV     A,R7
   \   000106   95..         SUBB    A,?V0 + 15
   \   000108   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00010A   65D0         XRL     A,PSW
   \   00010C   33           RLC     A
   \   00010D   5003         JNC     $+5
   \   00010F   02....       LJMP    ??_DrawBitmap_24bpp_3 & 0xFFFF
    104              pData += BytesPerLine;
   \   000112   E5..         MOV     A,?V0 + 2
   \   000114   25..         ADD     A,?V0 + 0
   \   000116   F5..         MOV     ?V0 + 2,A
   \   000118   E5..         MOV     A,?V0 + 3
   \   00011A   35..         ADDC    A,?V0 + 1
   \   00011C   F5..         MOV     ?V0 + 3,A
   \   00011E   85..82       MOV     DPL,?XSP + 0
   \   000121   85..83       MOV     DPH,?XSP + 1
   \   000124   E0           MOVX    A,@DPTR
   \   000125   25..         ADD     A,?V0 + 12
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   35..         ADDC    A,?V0 + 13
   \   00012C   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmap_24bpp_2:
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   C082         PUSH    DPL
   \   000135   C083         PUSH    DPH
   \   000137   7420         MOV     A,#0x20
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00013F   D083         POP     DPH
   \   000141   D082         POP     DPL
   \   000143   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000146   500B         JNC     ??_DrawBitmap_24bpp_5
   \   000148   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00014B   4006         JC      ??_DrawBitmap_24bpp_5
   \   00014D   7E00         MOV     R6,#0x0
   \   00014F   7F00         MOV     R7,#0x0
   \   000151   80AE         SJMP    ??_DrawBitmap_24bpp_4
    105            }
    106            return 0;
   \                     ??_DrawBitmap_24bpp_5:
   \   000153   7A00         MOV     R2,#0x0
   \                     ??_DrawBitmap_24bpp_1:
   \   000155   7B00         MOV     R3,#0x0
   \   000157   7404         MOV     A,#0x4
   \   000159   02....       LJMP    ?Subroutine0 & 0xFFFF
    107          }
    108          
    109          /*********************************************************************
    110          *
    111          *       Public code
    112          *
    113          **********************************************************************
    114          */
    115          /*********************************************************************
    116          *
    117          *       GUI_BMP_GetXSize
    118          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          int GUI_BMP_GetXSize(const void * pBMP) {
   \                     GUI_BMP_GetXSize:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    120            const U8 * pSrc = (const U8 *)pBMP;
    121            if (!pBMP) {
   \   00000A   EA           MOV     A,R2
   \   00000B   4B           ORL     A,R3
   \   00000C   7006         JNZ     ??GUI_BMP_GetXSize_0
    122              return 0;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   8006         SJMP    ??CrossCallReturnLabel_18
    123            }
    124            pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
   \                     ??GUI_BMP_GetXSize_0:
   \   000014   EA           MOV     A,R2
   \   000015   2412         ADD     A,#0x12
   \   000017   12....       LCALL   ?Subroutine8 & 0xFFFF
    125            return GUI__Read32(&pSrc);
   \                     ??CrossCallReturnLabel_18:
   \   00001A                REQUIRE ?Subroutine1
   \   00001A                ; // Fall through to label ?Subroutine1
    126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F04         MOV     R7,#0x4
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   EB           MOV     A,R3
   \   000002   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003                ; Setup parameters for call to function GUI__Read32
   \   000003                ; Setup parameters for call to function labs
   \   000003                ; Setup parameters for call to function GUI__Read32
   \   000003                ; Setup parameters for call to function GUI__Read32
   \   000003                ; Setup parameters for call to function GUI__Read32
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   AA82         MOV     R2,DPL
   \   00000B   AB83         MOV     R3,DPH
   \   00000D   12....       LCALL   ??GUI__Read32?relay
   \   000010   22           RET
    127          
    128          /*********************************************************************
    129          *
    130          *       GUI_BMP_GetYSize
    131          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          int GUI_BMP_GetYSize(const void * pBMP) {
   \                     GUI_BMP_GetYSize:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    133            const U8 * pSrc = (const U8 *)pBMP;
    134            if (!pBMP) {
   \   00000A   EA           MOV     A,R2
   \   00000B   4B           ORL     A,R3
   \   00000C   7006         JNZ     ??GUI_BMP_GetYSize_0
    135              return 0;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   800F         SJMP    ??GUI_BMP_GetYSize_1
    136            }
    137            pSrc += 22;
   \                     ??GUI_BMP_GetYSize_0:
   \   000014   EA           MOV     A,R2
   \   000015   2416         ADD     A,#0x16
   \   000017   12....       LCALL   ?Subroutine8 & 0xFFFF
    138            return labs((int)GUI__Read32(&pSrc));
   \                     ??CrossCallReturnLabel_19:
   \   00001A   EB           MOV     A,R3
   \   00001B   33           RLC     A
   \   00001C   95E0         SUBB    A,0xE0 /* A   */
   \   00001E   FC           MOV     R4,A
   \   00001F   FD           MOV     R5,A
   \   000020   12....       LCALL   ??labs?relay
   \                     ??GUI_BMP_GetYSize_1:
   \   000023   80..         SJMP    ?Subroutine1
    139          }
    140          
    141          /*********************************************************************
    142          *
    143          *       GUI_BMP_Draw
    144          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
   \                     GUI_BMP_Draw:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7424         MOV     A,#0x24
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 14,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 15,A
    146            #if (GUI_WINSUPPORT)
    147              GUI_RECT r;
    148            #endif
    149            int Ret = 0;
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    150            I32 Width, Height;
    151            U16 BitCount, Type;
    152            U32 ClrUsed, Compression;
    153            int NumColors;
    154            const U8 * pSrc = (const U8 *)pBMP;
   \                     ??CrossCallReturnLabel_34:
   \   00002B   12....       LCALL   ?Subroutine9 & 0xFFFF
    155            Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
   \                     ??CrossCallReturnLabel_32:
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   \   000032   12....       LCALL   ??GUI__Read16?relay
   \   000035   7406         MOV     A,#0x6
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine9 & 0xFFFF
    156            pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
    157            /* get values from BITMAPINFOHEADER */
    158            pSrc += 4;
   \                     ??CrossCallReturnLabel_33:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   2410         ADD     A,#0x10
   \   000040   12....       LCALL   ?Subroutine2 & 0xFFFF
    159            Width       = GUI__Read32(&pSrc);
   \                     ??CrossCallReturnLabel_0:
   \   000043   8A..         MOV     ?V0 + 0,R2
   \   000045   8B..         MOV     ?V0 + 1,R3
   \   000047   8C..         MOV     ?V0 + 2,R4
   \   000049   8D..         MOV     ?V0 + 3,R5
    160            Height      = GUI__Read32(&pSrc);
   \   00004B                ; Setup parameters for call to function GUI__Read32
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??GUI__Read32?relay
   \   000058   8A..         MOV     ?V0 + 4,R2
   \   00005A   8B..         MOV     ?V0 + 5,R3
   \   00005C   8C..         MOV     ?V0 + 6,R4
   \   00005E   8D..         MOV     ?V0 + 7,R5
    161            pSrc += 2;
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   2402         ADD     A,#0x2
   \   000069   12....       LCALL   ?Subroutine5 & 0xFFFF
    162            BitCount    = GUI__Read16(&pSrc);
   \                     ??CrossCallReturnLabel_10:
   \   00006C                ; Setup parameters for call to function GUI__Read16
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   AA82         MOV     R2,DPL
   \   000074   AB83         MOV     R3,DPH
   \   000076   12....       LCALL   ??GUI__Read16?relay
   \   000079   8A..         MOV     ?V0 + 8,R2
   \   00007B   8B..         MOV     ?V0 + 9,R3
   \   00007D   AE..         MOV     R6,?V0 + 8
   \   00007F   AF..         MOV     R7,?V0 + 9
    163            Compression = GUI__Read32(&pSrc);
   \   000081                ; Setup parameters for call to function GUI__Read32
   \   000081   85..82       MOV     DPL,?XSP + 0
   \   000084   85..83       MOV     DPH,?XSP + 1
   \   000087   AA82         MOV     R2,DPL
   \   000089   AB83         MOV     R3,DPH
   \   00008B   12....       LCALL   ??GUI__Read32?relay
   \   00008E   7408         MOV     A,#0x8
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?XSTORE_R2345
    164            pSrc += 12;
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   240C         ADD     A,#0xc
   \   00009F   12....       LCALL   ?Subroutine2 & 0xFFFF
    165            ClrUsed     = GUI__Read32(&pSrc);
   \                     ??CrossCallReturnLabel_1:
   \   0000A2   8A..         MOV     ?V0 + 8,R2
   \   0000A4   8B..         MOV     ?V0 + 9,R3
   \   0000A6   8C..         MOV     ?V0 + 10,R4
   \   0000A8   8D..         MOV     ?V0 + 11,R5
    166            pSrc += 4;
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   2404         ADD     A,#0x4
   \   0000B3   12....       LCALL   ?Subroutine5 & 0xFFFF
    167            /* calculate number of colors */
    168            switch (BitCount) {
   \                     ??CrossCallReturnLabel_11:
   \   0000B6   8E..         MOV     ?V0 + 12,R6
   \   0000B8   8F..         MOV     ?V0 + 13,R7
   \   0000BA   78..         MOV     R0,#?V0 + 12
   \   0000BC   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GUI_BMP_Draw>_0`:
   \   0000BF   0000         DW        0
   \   0000C1   0400         DW        4
   \   0000C3   0100         DW        1
   \   0000C5   ....         DW        ??GUI_BMP_Draw_0
   \   0000C7   0400         DW        4
   \   0000C9   ....         DW        ??GUI_BMP_Draw_1
   \   0000CB   0800         DW        8
   \   0000CD   ....         DW        ??GUI_BMP_Draw_2
   \   0000CF   1800         DW        24
   \   0000D1   ....         DW        ??GUI_BMP_Draw_3
   \   0000D3   ....         DW        ??GUI_BMP_Draw_4
    169              case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
   \                     ??GUI_BMP_Draw_4:
   \   0000D5   7A01         MOV     R2,#0x1
   \   0000D7   7B00         MOV     R3,#0x0
   \   0000D9   02....       LJMP    ??CrossCallReturnLabel_17 & 0xFFFF
    170              case 1:   NumColors = 2;   break;
   \                     ??GUI_BMP_Draw_0:
   \   0000DC   7C02         MOV     R4,#0x2
   \                     ??GUI_BMP_Draw_5:
   \   0000DE   7D00         MOV     R5,#0x0
   \                     ??GUI_BMP_Draw_6:
   \   0000E0   A9..         MOV     R1,?V0 + 9
   \   0000E2   AA..         MOV     R2,?V0 + 10
   \   0000E4   AB..         MOV     R3,?V0 + 11
   \   0000E6   E5..         MOV     A,?V0 + 8
   \   0000E8   49           ORL     A,R1
   \   0000E9   4A           ORL     A,R2
   \   0000EA   4B           ORL     A,R3
   \   0000EB   6012         JZ      ??GUI_BMP_Draw_7
    171              case 4:   NumColors = 16;  break;
    172              case 8:   NumColors = 256; break;
    173              case 24:  NumColors = 0;   break;
    174              default:
    175                return 1; /* biBitCount should be 1, 4, 8 or 24 */
    176            }
    177            if (NumColors && ClrUsed) {
    178              NumColors = ClrUsed;
   \   0000ED   AC..         MOV     R4,?V0 + 8
   \   0000EF   AD..         MOV     R5,?V0 + 9
    179            }
    180            /* check validity of bmp */
    181            if ((NumColors > LCD_MAX_LOG_COLORS) ||
    182                (Type != 0x4d42)                 || /* 'BM' */
    183                (Compression)                    || /* only uncompressed bitmaps */
    184                (Width  > 1024)                  ||
    185                (Height > 1024)) {
   \   0000F1   C3           CLR     C
   \   0000F2   EC           MOV     A,R4
   \   0000F3   9401         SUBB    A,#0x1
   \   0000F5   ED           MOV     A,R5
   \   0000F6   9401         SUBB    A,#0x1
   \   0000F8   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000FA   65D0         XRL     A,PSW
   \   0000FC   33           RLC     A
   \   0000FD   50D6         JNC     ??GUI_BMP_Draw_4
   \                     ??GUI_BMP_Draw_7:
   \   0000FF   7406         MOV     A,#0x6
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E0           MOVX    A,@DPTR
   \   000105   6442         XRL     A,#0x42
   \   000107   7004         JNZ     ??GUI_BMP_Draw_8
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   644D         XRL     A,#0x4d
   \                     ??GUI_BMP_Draw_8:
   \   00010D   70C6         JNZ     ??GUI_BMP_Draw_4
   \   00010F   7408         MOV     A,#0x8
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   78..         MOV     R0,#?V0 + 8
   \   000116   12....       LCALL   ?L_MOV_X
   \   000119   E5..         MOV     A,?V0 + 8
   \   00011B   45..         ORL     A,?V0 + 9
   \   00011D   45..         ORL     A,?V0 + 10
   \   00011F   45..         ORL     A,?V0 + 11
   \   000121   70B2         JNZ     ??GUI_BMP_Draw_4
   \   000123   90....       MOV     DPTR,#__Constant_401
   \   000126   78..         MOV     R0,#?V0 + 0
   \   000128   12....       LCALL   ?SL_GE_X
   \   00012B   40A8         JC      ??GUI_BMP_Draw_4
   \   00012D   90....       MOV     DPTR,#__Constant_401
   \   000130   78..         MOV     R0,#?V0 + 4
   \   000132   12....       LCALL   ?SL_GE_X
   \   000135   409E         JC      ??GUI_BMP_Draw_4
    186              return 1;
    187            }
    188            /* start output */
    189            halIntState_t state;
    190            GUI_LOCK(state);
   \   000137   A2AF         MOV     C,0xa8.7
   \   000139   E4           CLR     A
   \   00013A   33           RLC     A
   \   00013B   F5..         MOV     ?V0 + 10,A
   \   00013D   C2AF         CLR     0xa8.7
    191            #if (GUI_WINSUPPORT)
    192              WM_ADDORG(x0,y0);
    193              r.x1 = (r.x0 = x0) + Width - 1;
    194              r.y1 = (r.y0 = y0) + Height - 1;
    195              WM_ITERATE_START(&r) {
    196            #endif
    197            /* Show bitmap */
    198            switch (BitCount) {
   \   00013F   8E..         MOV     ?V0 + 8,R6
   \   000141   8F..         MOV     ?V0 + 9,R7
   \   000143   78..         MOV     R0,#?V0 + 8
   \   000145   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GUI_BMP_Draw>_1`:
   \   000148   0000         DW        0
   \   00014A   0400         DW        4
   \   00014C   0100         DW        1
   \   00014E   ....         DW        ??GUI_BMP_Draw_9
   \   000150   0400         DW        4
   \   000152   ....         DW        ??GUI_BMP_Draw_9
   \   000154   0800         DW        8
   \   000156   ....         DW        ??GUI_BMP_Draw_9
   \   000158   1800         DW        24
   \   00015A   ....         DW        ??GUI_BMP_Draw_10
   \   00015C   ....         DW        ??GUI_BMP_Draw_11
    199              case 1:
    200              case 4:
    201              case 8:
    202                Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
   \                     ??GUI_BMP_Draw_9:
   \   00015E                ; Setup parameters for call to function _DrawBitmap_Pal
   \   00015E   8C..         MOV     ?V0 + 8,R4
   \   000160   8D..         MOV     ?V0 + 9,R5
   \   000162   78..         MOV     R0,#?V0 + 8
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   8E..         MOV     ?V0 + 8,R6
   \   000169   8F..         MOV     ?V0 + 9,R7
   \   00016B   78..         MOV     R0,#?V0 + 8
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000170   78..         MOV     R0,#?V0 + 4
   \   000172   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   78..         MOV     R0,#?V0 + 14
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017F   740E         MOV     A,#0xe
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   E0           MOVX    A,@DPTR
   \   000185   FC           MOV     R4,A
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   FD           MOV     R5,A
   \   000189   740A         MOV     A,#0xa
   \   00018B   12....       LCALL   ?XSTACK_DISP0_8
   \   00018E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000191   12....       LCALL   ??_DrawBitmap_Pal?relay
   \   000194   740A         MOV     A,#0xa
   \   000196   12....       LCALL   ?DEALLOC_XSTACK8
   \   000199   803C         SJMP    ??GUI_BMP_Draw_12
   \                     ??GUI_BMP_Draw_1:
   \   00019B   7C10         MOV     R4,#0x10
   \   00019D   02....       LJMP    ??GUI_BMP_Draw_5 & 0xFFFF
   \                     ??GUI_BMP_Draw_2:
   \   0001A0   7C00         MOV     R4,#0x0
   \   0001A2   7D01         MOV     R5,#0x1
   \   0001A4   02....       LJMP    ??GUI_BMP_Draw_6 & 0xFFFF
   \                     ??GUI_BMP_Draw_3:
   \   0001A7   7C00         MOV     R4,#0x0
   \   0001A9   7D00         MOV     R5,#0x0
   \   0001AB   02....       LJMP    ??GUI_BMP_Draw_7 & 0xFFFF
    203                break;
    204              case 24:
    205                Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
   \                     ??GUI_BMP_Draw_10:
   \   0001AE                ; Setup parameters for call to function _DrawBitmap_24bpp
   \   0001AE   78..         MOV     R0,#?V0 + 4
   \   0001B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B3   78..         MOV     R0,#?V0 + 0
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B8   78..         MOV     R0,#?V0 + 14
   \   0001BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BD   740A         MOV     A,#0xa
   \   0001BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   FC           MOV     R4,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FD           MOV     R5,A
   \   0001C7   7406         MOV     A,#0x6
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001CF   12....       LCALL   ??_DrawBitmap_24bpp?relay
   \   0001D2   7406         MOV     A,#0x6
   \   0001D4   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GUI_BMP_Draw_12:
   \   0001D7   7402         MOV     A,#0x2
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   EA           MOV     A,R2
   \   0001DD   F0           MOVX    @DPTR,A
   \   0001DE   A3           INC     DPTR
   \   0001DF   EB           MOV     A,R3
   \   0001E0   F0           MOVX    @DPTR,A
    206                break;
    207            }
    208            #if (GUI_WINSUPPORT)
    209              } WM_ITERATE_END();
    210            #endif
    211            GUI_UNLOCK(state);
   \                     ??GUI_BMP_Draw_11:
   \   0001E1   E5..         MOV     A,?V0 + 10
   \   0001E3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E5   92AF         MOV     0xa8.7,C
    212            return Ret;
   \   0001E7   7402         MOV     A,#0x2
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001EF   740C         MOV     A,#0xc
   \   0001F1   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0001F4                REQUIRE _A_IEN0
    213          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine16_0
   \   000004                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function GUI__Read16
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000006   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_401:
   \   000000   01040000     DD 1025

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_GetStep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _GetStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_Pal?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_Pal

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_24bpp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_24bpp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_BMP_GetXSize?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_BMP_GetXSize

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_BMP_GetYSize?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_BMP_GetYSize

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_BMP_Draw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_BMP_Draw
    214          
    215          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     GUI_BMP_Draw               0      0     48
       -> GUI__Read16           0      0     72
       -> GUI__Read32           0      0     72
       -> GUI__Read32           0      0     72
       -> GUI__Read16           0      0     72
       -> GUI__Read32           0      0     72
       -> GUI__Read32           0      0     72
       -> _DrawBitmap_Pal       0      0     92
       -> _DrawBitmap_24bpp     0      0     84
     GUI_BMP_GetXSize           0      0     14
       -> GUI__Read32           0      0     28
     GUI_BMP_GetYSize           0      0     14
       -> GUI__Read32           0      0     28
       -> labs                  0      0     28
     _DrawBitmap_24bpp          2      0     72
       -> _GetStep              0      0     56
       -> LCD_Color2Index       0      0     56
       -> LCD_SetPixelIndex     0      0     60
     _DrawBitmap_Pal            2      0     92
       -> _GetStep              0      0     60
       -> LCD_Color2Index       0      0     60
       -> LCD_DrawBitmap        0      0     92
     _GetStep                   0      0     39


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_IEN0                      1
     _GetStep                    96
     ?Subroutine4                 6
     ??Subroutine14_0             1
     ??Subroutine15_0            10
     _DrawBitmap_Pal            510
     ?Subroutine0                 8
     ?Subroutine3                 6
     ?Subroutine11                9
     ?Subroutine10               19
     ?Subroutine6                12
     ?Subroutine7                 6
     _DrawBitmap_24bpp          348
     GUI_BMP_GetXSize            26
     ?Subroutine1                10
     ?Subroutine8                 6
     ?Subroutine13               15
     ?Subroutine12               17
     GUI_BMP_GetYSize            37
     GUI_BMP_Draw               500
     ?Subroutine9                 4
     ??Subroutine16_0             8
     ?Subroutine5                 7
     ?Subroutine2                 7
     __Constant_401               4
     ??_GetStep?relay             6
     ??_DrawBitmap_Pal?relay      6
     ??_DrawBitmap_24bpp?relay    6
     ??GUI_BMP_GetXSize?relay     6
     ??GUI_BMP_GetYSize?relay     6
     ??GUI_BMP_Draw?relay         6

 
 1 668 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
 
 1 704 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)

Errors: none
Warnings: none
