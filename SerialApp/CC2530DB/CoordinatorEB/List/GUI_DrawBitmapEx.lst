###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:11 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUI_DrawBitmapEx.c                               #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUI_DrawBitmapEx.c -D     #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUI_Dr #
#                          awBitmapEx.lst                                     #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUI_Dra #
#                          wBitmapEx.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUI_DrawBitmapEx.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_DrawBitmapEx.c
     16          Purpose     : Draws a bitmap with free magnification
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI_Private.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     21          #include "stdlib.h"
     22          
     23          /*********************************************************************
     24          *
     25          *       static code
     26          *
     27          **********************************************************************
     28          */
     29          /*********************************************************************
     30          *
     31          *       GL_DrawBitmapEx
     32          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          static void GL_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
   \                     GL_DrawBitmapEx:
     34                                      int xCenter, int yCenter, int xMag, int yMag) {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   7435         MOV     A,#0x35
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   743B         MOV     A,#0x3b
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 12,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 13,A
     35            LCD_PIXELINDEX Index, IndexPrev = 0;
   \   000034   7413         MOV     A,#0x13
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
     36            LCD_COLOR Color;
     37            int x, y, xi, yi, xSize, ySize, xAct, xStart, xMagAbs, xiMag, yMin, yMax, yEnd, yPrev, yStep;
     38            char Cached, HasTrans = 0;
   \   00003D   740A         MOV     A,#0xa
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
     39            /* Use clipping rect to reduce calculation */
     40            yMin = GUI_Context.ClipRect.y0;
   \   000044   90....       MOV     DPTR,#GUI_Context + 6
   \   000047   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00004A   7419         MOV     A,#0x19
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E8           MOV     A,R0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E9           MOV     A,R1
   \   000053   F0           MOVX    @DPTR,A
     41            yMax = GUI_Context.ClipRect.y1;
   \   000054   90....       MOV     DPTR,#GUI_Context + 10
   \   000057   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00005A   7417         MOV     A,#0x17
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
     42            /* Init some values */
     43            xSize    = pBitmap->XSize;
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00006C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00006F   740F         MOV     A,#0xf
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E9           MOV     A,R1
   \   000078   F0           MOVX    @DPTR,A
     44            ySize    = pBitmap->YSize;
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000081   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000084   7415         MOV     A,#0x15
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E8           MOV     A,R0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   E9           MOV     A,R1
   \   00008D   F0           MOVX    @DPTR,A
     45            xMagAbs  = ((xMag < 0) ? -xMag : xMag);
   \   00008E   7439         MOV     A,#0x39
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   C3           CLR     C
   \   000094   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000097   7439         MOV     A,#0x39
   \   000099   501D         JNC     ??GL_DrawBitmapEx_0
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000A1   F5..         MOV     ?V0 + 0,A
   \   0000A3   E4           CLR     A
   \   0000A4   99           SUBB    A,R1
   \   0000A5   F5..         MOV     ?V0 + 1,A
   \   0000A7   740F         MOV     A,#0xf
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C3           CLR     C
   \   0000AE   9A           SUBB    A,R2
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   9B           SUBB    A,R3
   \   0000B3   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000B6   800E         SJMP    ??GL_DrawBitmapEx_1
   \                     ??GL_DrawBitmapEx_0:
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V0 + 0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F5..         MOV     ?V0 + 1,A
   \   0000C2   8A..         MOV     ?V0 + 4,R2
   \   0000C4   8B..         MOV     ?V0 + 5,R3
   \                     ??GL_DrawBitmapEx_1:
   \   0000C6   E5..         MOV     A,?V0 + 5
   \   0000C8   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000CB   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000CE   E5..         MOV     A,?V0 + 1
   \   0000D0   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000D3   12....       LCALL   ?L_MUL
   \   0000D6   90....       MOV     DPTR,#__Constant_3e8
   \   0000D9   78..         MOV     R0,#?V0 + 8
   \   0000DB   12....       LCALL   ?L_MOV_X
   \   0000DE   78..         MOV     R0,#?V0 + 4
   \   0000E0   79..         MOV     R1,#?V0 + 8
   \   0000E2   12....       LCALL   ?L_DIV_MOD
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   C3           CLR     C
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   95..         SUBB    A,?V0 + 4
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   95..         SUBB    A,?V0 + 5
   \   0000F3   F0           MOVX    @DPTR,A
     46            x0      -= (I32)((xMag < 0) ? xSize - xCenter - 1 : xCenter) * (I32)(xMagAbs) / (I32)(1000);
     47            yEnd     = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \   0000F4   7433         MOV     A,#0x33
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   C082         PUSH    DPL
   \   0000FB   C083         PUSH    DPH
   \   0000FD                ; Setup parameters for call to function GUI__DivideRound32
   \   0000FD   90....       MOV     DPTR,#__Constant_3e8
   \   000100   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000103   743B         MOV     A,#0x3b
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00010B   F5..         MOV     ?V0 + 4,A
   \   00010D   E4           CLR     A
   \   00010E   99           SUBB    A,R1
   \   00010F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000112   85....       MOV     ?V0 + 8,?V0 + 12
   \   000115   E5..         MOV     A,?V0 + 13
   \   000117   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00011A   12....       LCALL   ?L_MUL
   \   00011D   AA..         MOV     R2,?V0 + 4
   \   00011F   AB..         MOV     R3,?V0 + 5
   \   000121   AC..         MOV     R4,?V0 + 6
   \   000123   AD..         MOV     R5,?V0 + 7
   \   000125   12....       LCALL   ??GUI__DivideRound32?relay
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   8A..         MOV     ?V0 + 4,R2
   \   00012F   8B..         MOV     ?V0 + 5,R3
   \   000131   D083         POP     DPH
   \   000133   D082         POP     DPL
   \   000135   12....       LCALL   ?Subroutine10 & 0xFFFF
     48            yPrev    = yEnd + 1;
   \                     ??CrossCallReturnLabel_26:
   \   000138   EE           MOV     A,R6
   \   000139   2401         ADD     A,#0x1
   \   00013B   F5..         MOV     ?V0 + 2,A
   \   00013D   EF           MOV     A,R7
   \   00013E   3400         ADDC    A,#0x0
   \   000140   F5..         MOV     ?V0 + 3,A
     49            yStep = (yMag < 0) ? -1 : 1;
   \   000142   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000145   7411         MOV     A,#0x11
   \   000147   5009         JNC     ??GL_DrawBitmapEx_2
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   74FF         MOV     A,#-0x1
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   8008         SJMP    ??GL_DrawBitmapEx_3
   \                     ??GL_DrawBitmapEx_2:
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   7401         MOV     A,#0x1
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   E4           CLR     A
   \                     ??GL_DrawBitmapEx_3:
   \   00015A   F0           MOVX    @DPTR,A
     50            if (pBitmap->pPal) {
   \   00015B   7402         MOV     A,#0x2
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00016E   E8           MOV     A,R0
   \   00016F   49           ORL     A,R1
   \   000170   6013         JZ      ??GL_DrawBitmapEx_4
     51              if (pBitmap->pPal->HasTrans) {
   \   000172   7402         MOV     A,#0x2
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   6008         JZ      ??GL_DrawBitmapEx_4
     52                HasTrans = 1;
   \   00017D   740A         MOV     A,#0xa
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   7401         MOV     A,#0x1
   \   000184   F0           MOVX    @DPTR,A
     53              }
     54            }
     55            for (yi = 0; yi < ySize; yi++) {
   \                     ??GL_DrawBitmapEx_4:
   \   000185   75..00       MOV     ?V0 + 14,#0x0
   \   000188   75..00       MOV     ?V0 + 15,#0x0
   \   00018B   801C         SJMP    ??GL_DrawBitmapEx_5
     56              y = yEnd;
     57              yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1 - yCenter) * (I32)(yMag)), 1000);
     58              if (y != yPrev) {
     59                yPrev = y;
     60                do {
     61                  if ((y >= yMin) && (y <= yMax)) {
     62                    xStart = -1;
     63                    x      =  0;
     64                    xiMag  =  0;
     65                    Cached =  0;
     66                    for (xi = 0; xi < xSize; xi++) {
     67                      xiMag += xMagAbs;
     68                      if (xiMag >= 1000) {
     69                        xAct  = (xMag > 0) ? xi : xSize - xi - 1;
     70                        Index = GUI_GetBitmapPixelIndex(pBitmap, xAct, yi);
     71                        if (Index != IndexPrev || xStart == -1) {
     72                          if ((Index == 0) && HasTrans) {
     73                            /* Transparent color ... clear cache */
     74                            if (Cached) {
     75                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
     76                              Cached = 0;
     77                            }
     78                          } else {
     79                            /* Another color ... draw contents of cache */
     80                            if (Cached && xStart != -1) {
     81                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
     82                            }
     83                            xStart    = x;
     84                            Cached    = 1;
     85                            if (pBitmap->pMethods) {
     86                              Color = pBitmap->pMethods->pfIndex2Color(Index);
     87                            } else {
     88                              Color = pBitmap->pPal->pPalEntries[Index];
     89                            }
     90                            LCD_SetColorIndex(LCDDEV_L0_Color2Index(Color));
     91                          }
     92                          IndexPrev = Index;
     93                        }
     94                        do {
     95                          x++;
     96                          xiMag -= 1000;
     97                        } while (xiMag >= 1000);
     98                      }
     99                    }
    100                    /* Clear cache */
    101                    if (Cached) {
    102                      LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
    103                    }
    104                  }
    105                  y += yStep;
    106                } while ((yMag < 0) ? (y > yEnd) : (y < yEnd));
   \                     ??GL_DrawBitmapEx_6:
   \   00018D   C3           CLR     C
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   9E           SUBB    A,R6
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   9F           SUBB    A,R7
   \   000193   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000195   65D0         XRL     A,PSW
   \   000197   33           RLC     A
   \   000198   5003         JNC     $+5
   \   00019A   02....       LJMP    ??GL_DrawBitmapEx_7 & 0xFFFF
   \                     ??GL_DrawBitmapEx_8:
   \   00019D   E5..         MOV     A,?V0 + 14
   \   00019F   2401         ADD     A,#0x1
   \   0001A1   F5..         MOV     ?V0 + 14,A
   \   0001A3   E5..         MOV     A,?V0 + 15
   \   0001A5   3400         ADDC    A,#0x0
   \   0001A7   F5..         MOV     ?V0 + 15,A
   \                     ??GL_DrawBitmapEx_5:
   \   0001A9   7415         MOV     A,#0x15
   \   0001AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0001B1   C3           CLR     C
   \   0001B2   E5..         MOV     A,?V0 + 14
   \   0001B4   98           SUBB    A,R0
   \   0001B5   E5..         MOV     A,?V0 + 15
   \   0001B7   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0001BA   4003         JC      $+5
   \   0001BC   02....       LJMP    ??GL_DrawBitmapEx_9 & 0xFFFF
   \   0001BF   85..82       MOV     DPL,?XSP + 0
   \   0001C2   85..83       MOV     DPH,?XSP + 1
   \   0001C5   EE           MOV     A,R6
   \   0001C6   F0           MOVX    @DPTR,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   EF           MOV     A,R7
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   7433         MOV     A,#0x33
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   C082         PUSH    DPL
   \   0001D1   C083         PUSH    DPH
   \   0001D3                ; Setup parameters for call to function GUI__DivideRound32
   \   0001D3   90....       MOV     DPTR,#__Constant_3e8
   \   0001D6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001D9   E5..         MOV     A,?V0 + 14
   \   0001DB   2401         ADD     A,#0x1
   \   0001DD   FA           MOV     R2,A
   \   0001DE   E5..         MOV     A,?V0 + 15
   \   0001E0   3400         ADDC    A,#0x0
   \   0001E2   FB           MOV     R3,A
   \   0001E3   743B         MOV     A,#0x3b
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0001EB   EA           MOV     A,R2
   \   0001EC   C3           CLR     C
   \   0001ED   98           SUBB    A,R0
   \   0001EE   F5..         MOV     ?V0 + 8,A
   \   0001F0   EB           MOV     A,R3
   \   0001F1   99           SUBB    A,R1
   \   0001F2   F5..         MOV     ?V0 + 9,A
   \   0001F4   33           RLC     A
   \   0001F5   95E0         SUBB    A,0xE0 /* A   */
   \   0001F7   F5..         MOV     ?V0 + 10,A
   \   0001F9   F5..         MOV     ?V0 + 11,A
   \   0001FB   85....       MOV     ?V0 + 4,?V0 + 12
   \   0001FE   E5..         MOV     A,?V0 + 13
   \   000200   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000203   78..         MOV     R0,#?V0 + 8
   \   000205   79..         MOV     R1,#?V0 + 4
   \   000207   12....       LCALL   ?L_MUL
   \   00020A   AA..         MOV     R2,?V0 + 8
   \   00020C   AB..         MOV     R3,?V0 + 9
   \   00020E   AC..         MOV     R4,?V0 + 10
   \   000210   AD..         MOV     R5,?V0 + 11
   \   000212   12....       LCALL   ??GUI__DivideRound32?relay
   \   000215   7404         MOV     A,#0x4
   \   000217   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021A   8A..         MOV     ?V0 + 4,R2
   \   00021C   8B..         MOV     ?V0 + 5,R3
   \   00021E   D083         POP     DPH
   \   000220   D082         POP     DPL
   \   000222   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000225   85..82       MOV     DPL,?XSP + 0
   \   000228   85..83       MOV     DPH,?XSP + 1
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   65..         XRL     A,?V0 + 2
   \   00022E   7004         JNZ     ??GL_DrawBitmapEx_10
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   65..         XRL     A,?V0 + 3
   \                     ??GL_DrawBitmapEx_10:
   \   000234   7003         JNZ     $+5
   \   000236   02....       LJMP    ??GL_DrawBitmapEx_8 & 0xFFFF
   \   000239   85..82       MOV     DPL,?XSP + 0
   \   00023C   85..83       MOV     DPH,?XSP + 1
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   F5..         MOV     ?V0 + 2,A
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   F5..         MOV     ?V0 + 3,A
   \                     ??GL_DrawBitmapEx_7:
   \   000246   85..82       MOV     DPL,?XSP + 0
   \   000249   85..83       MOV     DPH,?XSP + 1
   \   00024C   C082         PUSH    DPL
   \   00024E   C083         PUSH    DPH
   \   000250   7419         MOV     A,#0x19
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000258   D083         POP     DPH
   \   00025A   D082         POP     DPL
   \   00025C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00025F   5003         JNC     $+5
   \   000261   02....       LJMP    ??GL_DrawBitmapEx_11 & 0xFFFF
   \   000264   7417         MOV     A,#0x17
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   C082         PUSH    DPL
   \   00026B   C083         PUSH    DPH
   \   00026D   85..82       MOV     DPL,?XSP + 0
   \   000270   85..83       MOV     DPH,?XSP + 1
   \   000273   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000276   D083         POP     DPH
   \   000278   D082         POP     DPL
   \   00027A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00027D   5003         JNC     $+5
   \   00027F   02....       LJMP    ??GL_DrawBitmapEx_11 & 0xFFFF
   \   000282   7406         MOV     A,#0x6
   \   000284   12....       LCALL   ?XSTACK_DISP0_8
   \   000287   74FF         MOV     A,#-0x1
   \   000289   F0           MOVX    @DPTR,A
   \   00028A   A3           INC     DPTR
   \   00028B   F0           MOVX    @DPTR,A
   \   00028C   7408         MOV     A,#0x8
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   E4           CLR     A
   \   000292   F0           MOVX    @DPTR,A
   \   000293   A3           INC     DPTR
   \   000294   F0           MOVX    @DPTR,A
   \   000295   740D         MOV     A,#0xd
   \   000297   12....       LCALL   ?XSTACK_DISP0_8
   \   00029A   E4           CLR     A
   \   00029B   F0           MOVX    @DPTR,A
   \   00029C   A3           INC     DPTR
   \   00029D   F0           MOVX    @DPTR,A
   \   00029E   F5..         MOV     ?V0 + 10,A
   \   0002A0   740B         MOV     A,#0xb
   \   0002A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A5   E4           CLR     A
   \   0002A6   F0           MOVX    @DPTR,A
   \   0002A7   A3           INC     DPTR
   \   0002A8   806A         SJMP    ??CrossCallReturnLabel_49
   \                     ??GL_DrawBitmapEx_12:
   \   0002AA   85....       MOV     ?V0 + 4,?V0 + 8
   \   0002AD   85....       MOV     ?V0 + 5,?V0 + 9
   \   0002B0   7402         MOV     A,#0x2
   \   0002B2   78..         MOV     R0,#?V0 + 4
   \   0002B4   12....       LCALL   ?S_SHL
   \   0002B7   7402         MOV     A,#0x2
   \   0002B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BC   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0002BF   A3           INC     DPTR
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   25..         ADD     A,?V0 + 4
   \   0002C3   F8           MOV     R0,A
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   35..         ADDC    A,?V0 + 5
   \   0002C8   8882         MOV     DPL,R0
   \   0002CA   F583         MOV     DPH,A
   \   0002CC   78..         MOV     R0,#?V0 + 4
   \   0002CE   12....       LCALL   ?L_MOV_X
   \                     ??GL_DrawBitmapEx_13:
   \   0002D1                ; Setup parameters for call to function LCD_SetColorIndex
   \   0002D1                ; Setup parameters for call to function LCD_L0_Color2Index
   \   0002D1   AA..         MOV     R2,?V0 + 4
   \   0002D3   AB..         MOV     R3,?V0 + 5
   \   0002D5   AC..         MOV     R4,?V0 + 6
   \   0002D7   AD..         MOV     R5,?V0 + 7
   \   0002D9   12....       LCALL   ??LCD_L0_Color2Index?relay
   \   0002DC   12....       LCALL   ??LCD_SetColorIndex?relay
   \                     ??GL_DrawBitmapEx_14:
   \   0002DF   7413         MOV     A,#0x13
   \   0002E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E4   E5..         MOV     A,?V0 + 8
   \   0002E6   F0           MOVX    @DPTR,A
   \   0002E7   A3           INC     DPTR
   \   0002E8   E5..         MOV     A,?V0 + 9
   \   0002EA   F0           MOVX    @DPTR,A
   \                     ??GL_DrawBitmapEx_15:
   \   0002EB   7408         MOV     A,#0x8
   \   0002ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F0   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0002F3   F0           MOVX    @DPTR,A
   \   0002F4   740D         MOV     A,#0xd
   \   0002F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   2418         ADD     A,#0x18
   \   0002FC   F0           MOVX    @DPTR,A
   \   0002FD   A3           INC     DPTR
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   34FC         ADDC    A,#-0x4
   \   000301   F0           MOVX    @DPTR,A
   \   000302   740D         MOV     A,#0xd
   \   000304   12....       LCALL   ?XSTACK_DISP0_8
   \   000307   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00030A   50DF         JNC     ??GL_DrawBitmapEx_15
   \                     ??GL_DrawBitmapEx_16:
   \   00030C   740B         MOV     A,#0xb
   \   00030E   12....       LCALL   ?XSTACK_DISP0_8
   \   000311   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000314   F0           MOVX    @DPTR,A
   \   000315   740B         MOV     A,#0xb
   \   000317   12....       LCALL   ?XSTACK_DISP0_8
   \   00031A   C082         PUSH    DPL
   \   00031C   C083         PUSH    DPH
   \   00031E   740F         MOV     A,#0xf
   \   000320   12....       LCALL   ?XSTACK_DISP0_8
   \   000323   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000326   D083         POP     DPH
   \   000328   D082         POP     DPL
   \   00032A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00032D   4003         JC      $+5
   \   00032F   02....       LJMP    ??GL_DrawBitmapEx_17 & 0xFFFF
   \   000332   740D         MOV     A,#0xd
   \   000334   12....       LCALL   ?XSTACK_DISP0_8
   \   000337   E0           MOVX    A,@DPTR
   \   000338   25..         ADD     A,?V0 + 0
   \   00033A   F0           MOVX    @DPTR,A
   \   00033B   A3           INC     DPTR
   \   00033C   E0           MOVX    A,@DPTR
   \   00033D   35..         ADDC    A,?V0 + 1
   \   00033F   F0           MOVX    @DPTR,A
   \   000340   740D         MOV     A,#0xd
   \   000342   12....       LCALL   ?XSTACK_DISP0_8
   \   000345   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000348   40C2         JC      ??GL_DrawBitmapEx_16
   \   00034A   7439         MOV     A,#0x39
   \   00034C   12....       LCALL   ?XSTACK_DISP0_8
   \   00034F   C3           CLR     C
   \   000350   E0           MOVX    A,@DPTR
   \   000351   9401         SUBB    A,#0x1
   \   000353   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000356   400B         JC      ??GL_DrawBitmapEx_18
   \   000358   740B         MOV     A,#0xb
   \   00035A   12....       LCALL   ?XSTACK_DISP0_8
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   FC           MOV     R4,A
   \   00035F   A3           INC     DPTR
   \   000360   E0           MOVX    A,@DPTR
   \   000361   8024         SJMP    ??GL_DrawBitmapEx_19
   \                     ??GL_DrawBitmapEx_18:
   \   000363   740F         MOV     A,#0xf
   \   000365   12....       LCALL   ?XSTACK_DISP0_8
   \   000368   C082         PUSH    DPL
   \   00036A   C083         PUSH    DPH
   \   00036C   740B         MOV     A,#0xb
   \   00036E   12....       LCALL   ?XSTACK_DISP0_8
   \   000371   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000374   D083         POP     DPH
   \   000376   D082         POP     DPL
   \   000378   E0           MOVX    A,@DPTR
   \   000379   C3           CLR     C
   \   00037A   98           SUBB    A,R0
   \   00037B   F8           MOV     R0,A
   \   00037C   A3           INC     DPTR
   \   00037D   E0           MOVX    A,@DPTR
   \   00037E   99           SUBB    A,R1
   \   00037F   F9           MOV     R1,A
   \   000380   E8           MOV     A,R0
   \   000381   24FF         ADD     A,#-0x1
   \   000383   FC           MOV     R4,A
   \   000384   E9           MOV     A,R1
   \   000385   34FF         ADDC    A,#-0x1
   \                     ??GL_DrawBitmapEx_19:
   \   000387   FD           MOV     R5,A
   \   000388                ; Setup parameters for call to function GUI_GetBitmapPixelIndex
   \   000388   78..         MOV     R0,#?V0 + 14
   \   00038A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038D   7404         MOV     A,#0x4
   \   00038F   12....       LCALL   ?XSTACK_DISP0_8
   \   000392   E0           MOVX    A,@DPTR
   \   000393   FA           MOV     R2,A
   \   000394   A3           INC     DPTR
   \   000395   E0           MOVX    A,@DPTR
   \   000396   FB           MOV     R3,A
   \   000397   12....       LCALL   ??GUI_GetBitmapPixelIndex?relay
   \   00039A   7402         MOV     A,#0x2
   \   00039C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00039F   8A..         MOV     ?V0 + 8,R2
   \   0003A1   8B..         MOV     ?V0 + 9,R3
   \   0003A3   7413         MOV     A,#0x13
   \   0003A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A8   E0           MOVX    A,@DPTR
   \   0003A9   65..         XRL     A,?V0 + 8
   \   0003AB   7004         JNZ     ??GL_DrawBitmapEx_20
   \   0003AD   A3           INC     DPTR
   \   0003AE   E0           MOVX    A,@DPTR
   \   0003AF   65..         XRL     A,?V0 + 9
   \                     ??GL_DrawBitmapEx_20:
   \   0003B1   7011         JNZ     ??GL_DrawBitmapEx_21
   \   0003B3   7406         MOV     A,#0x6
   \   0003B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   F4           CPL     A
   \   0003BA   7003         JNZ     ??GL_DrawBitmapEx_22
   \   0003BC   A3           INC     DPTR
   \   0003BD   E0           MOVX    A,@DPTR
   \   0003BE   F4           CPL     A
   \                     ??GL_DrawBitmapEx_22:
   \   0003BF   6003         JZ      $+5
   \   0003C1   02....       LJMP    ??GL_DrawBitmapEx_15 & 0xFFFF
   \                     ??GL_DrawBitmapEx_21:
   \   0003C4   EA           MOV     A,R2
   \   0003C5   45..         ORL     A,?V0 + 9
   \   0003C7   703F         JNZ     ??GL_DrawBitmapEx_23
   \   0003C9   740A         MOV     A,#0xa
   \   0003CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CE   E0           MOVX    A,@DPTR
   \   0003CF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003D1   5035         JNC     ??GL_DrawBitmapEx_23
   \   0003D3   E5..         MOV     A,?V0 + 10
   \   0003D5   7003         JNZ     $+5
   \   0003D7   02....       LJMP    ??GL_DrawBitmapEx_14 & 0xFFFF
   \   0003DA                ; Setup parameters for call to function LCD_DrawHLine
   \   0003DA   7404         MOV     A,#0x4
   \   0003DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DF   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0003E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E5   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0003E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003EB   7402         MOV     A,#0x2
   \   0003ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0003F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0003F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FC   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0003FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000402   75..00       MOV     ?V0 + 10,#0x0
   \   000405   02....       LJMP    ??GL_DrawBitmapEx_14 & 0xFFFF
   \                     ??GL_DrawBitmapEx_23:
   \   000408   E5..         MOV     A,?V0 + 10
   \   00040A   6036         JZ      ??GL_DrawBitmapEx_24
   \   00040C   7406         MOV     A,#0x6
   \   00040E   12....       LCALL   ?XSTACK_DISP0_8
   \   000411   E0           MOVX    A,@DPTR
   \   000412   F4           CPL     A
   \   000413   7003         JNZ     ??GL_DrawBitmapEx_25
   \   000415   A3           INC     DPTR
   \   000416   E0           MOVX    A,@DPTR
   \   000417   F4           CPL     A
   \                     ??GL_DrawBitmapEx_25:
   \   000418   6028         JZ      ??GL_DrawBitmapEx_24
   \   00041A                ; Setup parameters for call to function LCD_DrawHLine
   \   00041A   7404         MOV     A,#0x4
   \   00041C   12....       LCALL   ?XSTACK_DISP0_8
   \   00041F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000422   12....       LCALL   ?XSTACK_DISP0_8
   \   000425   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000428   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00042B   7402         MOV     A,#0x2
   \   00042D   12....       LCALL   ?XSTACK_DISP0_8
   \   000430   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000433   12....       LCALL   ?XSTACK_DISP0_8
   \   000436   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000439   12....       LCALL   ?XSTACK_DISP0_8
   \   00043C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00043F   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GL_DrawBitmapEx_24:
   \   000442   7408         MOV     A,#0x8
   \   000444   12....       LCALL   ?XSTACK_DISP0_8
   \   000447   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00044A   7406         MOV     A,#0x6
   \   00044C   12....       LCALL   ?XSTACK_DISP0_8
   \   00044F   E8           MOV     A,R0
   \   000450   F0           MOVX    @DPTR,A
   \   000451   A3           INC     DPTR
   \   000452   E9           MOV     A,R1
   \   000453   F0           MOVX    @DPTR,A
   \   000454   75..01       MOV     ?V0 + 10,#0x1
   \   000457   7402         MOV     A,#0x2
   \   000459   12....       LCALL   ?XSTACK_DISP0_8
   \   00045C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00045F   F9           MOV     R1,A
   \   000460   E8           MOV     A,R0
   \   000461   49           ORL     A,R1
   \   000462   7003         JNZ     $+5
   \   000464   02....       LJMP    ??GL_DrawBitmapEx_12 & 0xFFFF
   \   000467                ; Setup parameters for indirect call
   \   000467   AA..         MOV     R2,?V0 + 8
   \   000469   AB..         MOV     R3,?V0 + 9
   \   00046B   7402         MOV     A,#0x2
   \   00046D   12....       LCALL   ?XSTACK_DISP0_8
   \   000470   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000473   F583         MOV     DPH,A
   \   000475   8882         MOV     DPL,R0
   \   000477   A3           INC     DPTR
   \   000478   A3           INC     DPTR
   \   000479   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00047C   12....       LCALL   ?CALL_IND
   \   00047F   8A..         MOV     ?V0 + 4,R2
   \   000481   8B..         MOV     ?V0 + 5,R3
   \   000483   8C..         MOV     ?V0 + 6,R4
   \   000485   8D..         MOV     ?V0 + 7,R5
   \   000487   02....       LJMP    ??GL_DrawBitmapEx_13 & 0xFFFF
   \                     ??GL_DrawBitmapEx_17:
   \   00048A   E5..         MOV     A,?V0 + 10
   \   00048C   6028         JZ      ??GL_DrawBitmapEx_11
   \   00048E                ; Setup parameters for call to function LCD_DrawHLine
   \   00048E   7404         MOV     A,#0x4
   \   000490   12....       LCALL   ?XSTACK_DISP0_8
   \   000493   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000496   12....       LCALL   ?XSTACK_DISP0_8
   \   000499   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00049C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00049F   7402         MOV     A,#0x2
   \   0004A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0004A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AA   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0004AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0004B3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GL_DrawBitmapEx_11:
   \   0004B6   7411         MOV     A,#0x11
   \   0004B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004BB   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0004BE   85..82       MOV     DPL,?XSP + 0
   \   0004C1   85..83       MOV     DPH,?XSP + 1
   \   0004C4   E0           MOVX    A,@DPTR
   \   0004C5   28           ADD     A,R0
   \   0004C6   F0           MOVX    @DPTR,A
   \   0004C7   A3           INC     DPTR
   \   0004C8   E0           MOVX    A,@DPTR
   \   0004C9   39           ADDC    A,R1
   \   0004CA   F0           MOVX    @DPTR,A
   \   0004CB   12....       LCALL   ?Subroutine21 & 0xFFFF
    107              }
    108            }
   \                     ??CrossCallReturnLabel_64:
   \   0004CE   85..82       MOV     DPL,?XSP + 0
   \   0004D1   85..83       MOV     DPH,?XSP + 1
   \   0004D4   4003         JC      $+5
   \   0004D6   02....       LJMP    ??GL_DrawBitmapEx_6 & 0xFFFF
   \   0004D9   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0004DC   C3           CLR     C
   \   0004DD   EE           MOV     A,R6
   \   0004DE   98           SUBB    A,R0
   \   0004DF   EF           MOV     A,R7
   \   0004E0   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0004E3   4003         JC      $+5
   \   0004E5   02....       LJMP    ??GL_DrawBitmapEx_8 & 0xFFFF
   \   0004E8   02....       LJMP    ??GL_DrawBitmapEx_7 & 0xFFFF
    109          }
   \                     ??GL_DrawBitmapEx_9:
   \   0004EB   741B         MOV     A,#0x1b
   \   0004ED                REQUIRE ?Subroutine0
   \   0004ED                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 13
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 6,A
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F5..         MOV     ?V0 + 9,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 10,A
   \   000007   F5..         MOV     ?V0 + 11,A
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   79..         MOV     R1,#?V0 + 8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   C3           CLR     C
   \   000006   E4           CLR     A
   \   000007   98           SUBB    A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 5
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7406         MOV     A,#0x6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   94E8         SUBB    A,#-0x18
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   9403         SUBB    A,#0x3
   \   000008   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000A   65D0         XRL     A,PSW
   \   00000C   33           RLC     A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   240C         ADD     A,#0xc
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   99           SUBB    A,R1
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??LCD_DrawHLine?relay
   \   00000A   7402         MOV     A,#0x2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7408         MOV     A,#0x8
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F5..         MOV     ?V0 + 5,A
   \   00000B   22           RET
    110          
    111          /*********************************************************************
    112          *
    113          *       public code
    114          *
    115          **********************************************************************
    116          */
    117          /*********************************************************************
    118          *
    119          *       GUI_DrawBitmapEx
    120          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          void GUI_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
   \                     GUI_DrawBitmapEx:
    122                                int xCenter, int yCenter, int xMag, int yMag) {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8C..         MOV     ?V0 + 14,R4
   \   000017   8D..         MOV     ?V0 + 15,R5
   \   000019   741A         MOV     A,#0x1a
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 10,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 11,A
   \   000025   741C         MOV     A,#0x1c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 8,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 9,A
   \   000031   741E         MOV     A,#0x1e
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 3,A
   \   00003D   7420         MOV     A,#0x20
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FE           MOV     R6,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FF           MOV     R7,A
   \   000047   7422         MOV     A,#0x22
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 1,A
    123            GUI_COLOR OldColor;
    124            #if (GUI_WINSUPPORT)
    125              GUI_RECT r;
    126            #endif
    127            halIntState_t state;
    128            GUI_LOCK(state);
   \   000053   E5A8         MOV     A,0xa8
   \   000055   F5..         MOV     ?V0 + 12,A
   \   000057   C2AF         CLR     0xa8.7
    129            OldColor = GUI_GetColor();
   \   000059                ; Setup parameters for call to function GUI_GetColor
   \   000059   12....       LCALL   ??GUI_GetColor?relay
   \   00005C   8A..         MOV     ?V0 + 4,R2
   \   00005E   8B..         MOV     ?V0 + 5,R3
   \   000060   8C..         MOV     ?V0 + 6,R4
   \   000062   8D..         MOV     ?V0 + 7,R5
    130            #if (GUI_WINSUPPORT)
    131              WM_ADDORG(x0, y0);
    132              if (xMag >= 0) {
    133                r.x0 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
    134                r.x1 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
    135              } else {
    136                r.x1 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
    137                r.x0 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
    138              }
    139              if (yMag >= 0) {
    140                r.y0 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
    141                r.y1 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
    142              } else {
    143                r.y1 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
    144                r.y0 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
    145              }
    146              WM_ITERATE_START(&r) {
    147            #endif
    148            GL_DrawBitmapEx(pBitmap, x0, y0, xCenter, yCenter, xMag, yMag);
   \   000064                ; Setup parameters for call to function GL_DrawBitmapEx
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   8E..         MOV     ?V0 + 0,R6
   \   00006B   8F..         MOV     ?V0 + 1,R7
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   78..         MOV     R0,#?V0 + 2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   78..         MOV     R0,#?V0 + 8
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   78..         MOV     R0,#?V0 + 10
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   AC..         MOV     R4,?V0 + 14
   \   000083   AD..         MOV     R5,?V0 + 15
   \   000085   740A         MOV     A,#0xa
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FA           MOV     R2,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??GL_DrawBitmapEx?relay
   \   000092   740A         MOV     A,#0xa
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
    149            #if (GUI_WINSUPPORT)
    150              } WM_ITERATE_END();
    151            #endif
    152            GUI_SetColor(OldColor);
   \   000097                ; Setup parameters for call to function GUI_SetColor
   \   000097   AA..         MOV     R2,?V0 + 4
   \   000099   AB..         MOV     R3,?V0 + 5
   \   00009B   AC..         MOV     R4,?V0 + 6
   \   00009D   AD..         MOV     R5,?V0 + 7
   \   00009F   12....       LCALL   ??GUI_SetColor?relay
    153            GUI_UNLOCK(state);
   \   0000A2   E5..         MOV     A,?V0 + 12
   \   0000A4   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000A6   92AF         MOV     0xa8.7,C
    154          }
   \   0000A8   7402         MOV     A,#0x2
   \   0000AA   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000AD                REQUIRE _A_IEN0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_DrawBitmapEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_DrawBitmapEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_DrawBitmapEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_DrawBitmapEx
    155          
    156          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     GL_DrawBitmapEx                  2      0     91
       -> GUI__DivideRound32          4      0    110
       -> GUI__DivideRound32          4      0    110
       -> LCD_L0_Color2Index          0      0    102
       -> LCD_SetColorIndex           0      0    102
       -> GUI_GetBitmapPixelIndex     0      0    106
       -> LCD_DrawHLine               0      0    106
       -> LCD_DrawHLine               0      0    106
       -> LCD_DrawHLine               0      0    106
     GUI_DrawBitmapEx                 0      0     46
       -> GUI_GetColor                0      0     52
       -> GL_DrawBitmapEx             0      0     72
       -> GUI_SetColor                0      0     52


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_IEN0                     1
     GL_DrawBitmapEx          1261
     ?Subroutine0                8
     ?Subroutine21               3
     ??Subroutine23_0            8
     ?Subroutine17               2
     ??Subroutine24_0            8
     ?Subroutine16              14
     ?Subroutine15               9
     ?Subroutine14               6
     ?Subroutine13               4
     ?Subroutine22               9
     ?Subroutine12               6
     ?Subroutine11               9
     ?Subroutine10              10
     ?Subroutine9                4
     ?Subroutine8                8
     ?Subroutine7               14
     ?Subroutine6               18
     ?Subroutine5                9
     ?Subroutine19               7
     ?Subroutine4               13
     ?Subroutine3                8
     ?Subroutine2               15
     ?Subroutine18               6
     ?Subroutine1               12
     ?Subroutine20              12
     GUI_DrawBitmapEx          173
     __Constant_3e8              4
     ??GL_DrawBitmapEx?relay     6
     ??GUI_DrawBitmapEx?relay    6

 
 1 656 bytes in segment BANKED_CODE
    12 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
 
 1 668 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)

Errors: none
Warnings: none
