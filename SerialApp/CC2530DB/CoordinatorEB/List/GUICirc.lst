###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:40 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUICirc.c                                        #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUICirc.c -D              #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUICir #
#                          c.lst                                              #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUICirc #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUICirc.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUICirc.C
     16          Purpose     : Circle and ellipse drawing functions
     17          ----------------------------------------------------------------------
     18          Version-Date---Author-Explanation
     19          ----------------------------------------------------------------------
     20          1.00.02 011115 JE     a) GL_FillEllipse, GL_FillCircle, GL_DrawCircle changed
     21          1.00.01 011113 JE     a) GL_DrawEllipse changed
     22          1.00.00 991206 RS     First release
     23          ----------------------------------------------------------------------
     24          Known problems or limitations with current version
     25          ----------------------------------------------------------------------
     26          None.
     27          ----------------------------------------------------------------------
     28          Open issues
     29          ----------------------------------------------------------------------
     30          None
     31          ---------------------------END-OF-HEADER------------------------------
     32          */
     33          
     34          #include <stddef.h>           /* needed for definition of NULL */
     35          #include "GUI_Private.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     36          
     37          /*********************************************************************
     38          *
     39          *       Static code
     40          *
     41          **********************************************************************
     42          */
     43          /*********************************************************************
     44          *
     45          *       Draw8Point
     46          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          static void Draw8Point(int x0,int y0, int xoff, int yoff) {
   \                     Draw8Point:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 7,A
     48            LCD_HL_DrawPixel(x0+xoff,y0+yoff);
   \   000023   EC           MOV     A,R4
   \   000024   25..         ADD     A,?V0 + 6
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   ED           MOV     A,R5
   \   000029   35..         ADDC    A,?V0 + 7
   \   00002B   F5..         MOV     ?V0 + 5,A
   \   00002D                ; Setup parameters for call to function LCD_DrawPixel
   \   00002D   AC..         MOV     R4,?V0 + 4
   \   00002F   FD           MOV     R5,A
   \   000030   EA           MOV     A,R2
   \   000031   2E           ADD     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EB           MOV     A,R3
   \   000034   12....       LCALL   ?Subroutine21 & 0xFFFF
     49            LCD_HL_DrawPixel(x0-xoff,y0+yoff);
     50            LCD_HL_DrawPixel(x0+yoff,y0+xoff);
   \                     ??CrossCallReturnLabel_34:
   \   000037   25..         ADD     A,?V0 + 6
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   E5..         MOV     A,?V0 + 3
   \   00003D   35..         ADDC    A,?V0 + 7
   \   00003F   F5..         MOV     ?V0 + 5,A
   \   000041                ; Setup parameters for call to function LCD_DrawPixel
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   2E           ADD     A,R6
   \   000044   FC           MOV     R4,A
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   3F           ADDC    A,R7
   \   000048   FD           MOV     R5,A
   \   000049   AA..         MOV     R2,?V0 + 4
   \   00004B   AB..         MOV     R3,?V0 + 5
   \   00004D   12....       LCALL   ?Subroutine22 & 0xFFFF
     51            LCD_HL_DrawPixel(x0+yoff,y0-xoff);
   \                     ??CrossCallReturnLabel_36:
   \   000050   AA..         MOV     R2,?V0 + 4
   \   000052   AB..         MOV     R3,?V0 + 5
   \   000054   12....       LCALL   ??LCD_DrawPixel?relay
     52            if (yoff) {
   \   000057   E5..         MOV     A,?V0 + 6
   \   000059   45..         ORL     A,?V0 + 7
   \   00005B   603A         JZ      ??Draw8Point_0
     53              LCD_HL_DrawPixel(x0+xoff,y0-yoff);
   \   00005D   E5..         MOV     A,?V0 + 0
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V0 + 6
   \   000062   F5..         MOV     ?V0 + 4,A
   \   000064   E5..         MOV     A,?V0 + 1
   \   000066   95..         SUBB    A,?V0 + 7
   \   000068   F5..         MOV     ?V0 + 5,A
   \   00006A                ; Setup parameters for call to function LCD_DrawPixel
   \   00006A   AC..         MOV     R4,?V0 + 4
   \   00006C   FD           MOV     R5,A
   \   00006D   E5..         MOV     A,?V0 + 2
   \   00006F   2E           ADD     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   E5..         MOV     A,?V0 + 3
   \   000073   12....       LCALL   ?Subroutine21 & 0xFFFF
     54              LCD_HL_DrawPixel(x0-xoff,y0-yoff);
     55              LCD_HL_DrawPixel(x0-yoff,y0+xoff);
     56              LCD_HL_DrawPixel(x0-yoff,y0-xoff);
     57            }
   \                     ??CrossCallReturnLabel_35:
   \   000076   C3           CLR     C
   \   000077   95..         SUBB    A,?V0 + 6
   \   000079   F5..         MOV     ?V0 + 2,A
   \   00007B   E5..         MOV     A,?V0 + 3
   \   00007D   95..         SUBB    A,?V0 + 7
   \   00007F   F5..         MOV     ?V0 + 3,A
   \   000081                ; Setup parameters for call to function LCD_DrawPixel
   \   000081   E5..         MOV     A,?V0 + 0
   \   000083   2E           ADD     A,R6
   \   000084   FC           MOV     R4,A
   \   000085   E5..         MOV     A,?V0 + 1
   \   000087   3F           ADDC    A,R7
   \   000088   FD           MOV     R5,A
   \   000089   AA..         MOV     R2,?V0 + 2
   \   00008B   AB..         MOV     R3,?V0 + 3
   \   00008D   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000090   AA..         MOV     R2,?V0 + 2
   \   000092   AB..         MOV     R3,?V0 + 3
   \   000094   12....       LCALL   ??LCD_DrawPixel?relay
     58          }
   \                     ??Draw8Point_0:
   \   000097   7F08         MOV     R7,#0x8
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??LCD_DrawPixel?relay
   \   000003                ; Setup parameters for call to function LCD_DrawPixel
   \   000003                ; Setup parameters for call to function LCD_DrawPixel
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   C3           CLR     C
   \   000006   9E           SUBB    A,R6
   \   000007   FC           MOV     R4,A
   \   000008   E5..         MOV     A,?V0 + 1
   \   00000A   9F           SUBB    A,R7
   \   00000B   FD           MOV     R5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   3F           ADDC    A,R7
   \   000001   FB           MOV     R3,A
   \   000002   12....       LCALL   ??LCD_DrawPixel?relay
   \   000005                ; Setup parameters for call to function LCD_DrawPixel
   \   000005                ; Setup parameters for call to function LCD_DrawPixel
   \   000005   AC..         MOV     R4,?V0 + 4
   \   000007   AD..         MOV     R5,?V0 + 5
   \   000009   E5..         MOV     A,?V0 + 2
   \   00000B   C3           CLR     C
   \   00000C   9E           SUBB    A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E   E5..         MOV     A,?V0 + 3
   \   000010   9F           SUBB    A,R7
   \   000011   FB           MOV     R3,A
   \   000012   12....       LCALL   ??LCD_DrawPixel?relay
   \   000015   E5..         MOV     A,?V0 + 2
   \   000017   22           RET
     59          
     60          /*********************************************************************
     61          *
     62          *       Public code, circle
     63          *
     64          **********************************************************************
     65          */
     66          /*********************************************************************
     67          *
     68          *       GL_DrawCircle
     69          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     70          void GL_DrawCircle(int x0, int y0, int r) {
   \                     GL_DrawCircle:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   7420         MOV     A,#0x20
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FC           MOV     R4,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FD           MOV     R5,A
     71            I32 i;
     72            int imax = ((I32)((I32)r*707))/1000+1;
   \   000029   8C..         MOV     ?V0 + 4,R4
   \   00002B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00002E   8C..         MOV     ?V0 + 0,R4
   \   000030   8D..         MOV     ?V0 + 1,R5
   \   000032   F5..         MOV     ?V0 + 2,A
   \   000034   F5..         MOV     ?V0 + 3,A
   \   000036   90....       MOV     DPTR,#__Constant_2c3
   \   000039   78..         MOV     R0,#?V0 + 8
   \   00003B   12....       LCALL   ?L_MOV_X
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   79..         MOV     R1,#?V0 + 8
   \   000042   12....       LCALL   ?L_MUL
   \   000045   90....       MOV     DPTR,#__Constant_3e8
   \   000048   78..         MOV     R0,#?V0 + 8
   \   00004A   12....       LCALL   ?L_MOV_X
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   79..         MOV     R1,#?V0 + 8
   \   000051   12....       LCALL   ?L_DIV_MOD
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   2401         ADD     A,#0x1
   \   000058   FE           MOV     R6,A
   \   000059   E5..         MOV     A,?V0 + 1
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FF           MOV     R7,A
     73            I32 sqmax = (I32)r*(I32)r+(I32)r/2;
   \   00005E   8C..         MOV     ?V0 + 0,R4
   \   000060   8D..         MOV     ?V0 + 1,R5
   \   000062   85....       MOV     ?V0 + 2,?V0 + 6
   \   000065   85....       MOV     ?V0 + 3,?V0 + 7
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   79..         MOV     R1,#?V0 + 4
   \   00006C   12....       LCALL   ?L_MUL
   \   00006F   EC           MOV     A,R4
   \   000070   F8           MOV     R0,A
   \   000071   ED           MOV     A,R5
   \   000072   F9           MOV     R1,A
   \   000073   7A02         MOV     R2,#0x2
   \   000075   7B00         MOV     R3,#0x0
   \   000077   12....       LCALL   ?S_DIV_MOD
   \   00007A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007D   12....       LCALL   ?L_ADD
     74            I32 y=r;
   \   000080   7404         MOV     A,#0x4
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   78..         MOV     R0,#?V0 + 4
   \   000087   12....       LCALL   ?L_MOV_TO_X
     75            Draw8Point(x0,y0,r,0);
   \   00008A                ; Setup parameters for call to function Draw8Point
   \   00008A   E4           CLR     A
   \   00008B   F5..         MOV     ?V0 + 4,A
   \   00008D   F5..         MOV     ?V0 + 5,A
   \   00008F   78..         MOV     R0,#?V0 + 4
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   8C..         MOV     ?V0 + 4,R4
   \   000096   8D..         MOV     ?V0 + 5,R5
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7404         MOV     A,#0x4
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
     76            for (i=1; i<= imax; i++) {
   \   0000AE   90....       MOV     DPTR,#__Constant_1
   \   0000B1   78..         MOV     R0,#?V0 + 4
   \   0000B3   12....       LCALL   ?L_MOV_X
   \   0000B6   02....       LJMP    ??GL_DrawCircle_0 & 0xFFFF
     77              if ((i*i+y*y) >sqmax) {
   \                     ??GL_DrawCircle_1:
   \   0000B9   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000BC   85....       MOV     ?V0 + 9,?V0 + 5
   \   0000BF   85....       MOV     ?V0 + 10,?V0 + 6
   \   0000C2   85....       MOV     ?V0 + 11,?V0 + 7
   \   0000C5   78..         MOV     R0,#?V0 + 8
   \   0000C7   79..         MOV     R1,#?V0 + 4
   \   0000C9   12....       LCALL   ?L_MUL
   \   0000CC   C0..         PUSH    ?V0 + 8
   \   0000CE   C0..         PUSH    ?V0 + 9
   \   0000D0   C0..         PUSH    ?V0 + 10
   \   0000D2   C0..         PUSH    ?V0 + 11
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   78..         MOV     R0,#?V0 + 12
   \   0000DB   12....       LCALL   ?L_MOV_X
   \   0000DE   7404         MOV     A,#0x4
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   78..         MOV     R0,#?V0 + 8
   \   0000E5   12....       LCALL   ?L_MOV_X
   \   0000E8   78..         MOV     R0,#?V0 + 12
   \   0000EA   79..         MOV     R1,#?V0 + 8
   \   0000EC   12....       LCALL   ?L_MUL
   \   0000EF   D0..         POP     ?V0 + 11
   \   0000F1   D0..         POP     ?V0 + 10
   \   0000F3   D0..         POP     ?V0 + 9
   \   0000F5   D0..         POP     ?V0 + 8
   \   0000F7   78..         MOV     R0,#?V0 + 8
   \   0000F9   79..         MOV     R1,#?V0 + 12
   \   0000FB   12....       LCALL   ?L_ADD
   \   0000FE   78..         MOV     R0,#?V0 + 8
   \   000100   79..         MOV     R1,#?V0 + 0
   \   000102   12....       LCALL   ?SL_GT
   \   000105   503D         JNC     ??GL_DrawCircle_2
     78                Draw8Point(x0,y0,i,y);
   \   000107                ; Setup parameters for call to function Draw8Point
   \   000107   7404         MOV     A,#0x4
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   78..         MOV     R0,#?V0 + 8
   \   00010E   12....       LCALL   ?L_MOV_X
   \   000111   78..         MOV     R0,#?V0 + 8
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   85....       MOV     ?V0 + 8,?V0 + 4
   \   000119   85....       MOV     ?V0 + 9,?V0 + 5
   \   00011C   78..         MOV     R0,#?V0 + 8
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000121   7404         MOV     A,#0x4
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
     79                y--;
   \   000132   90....       MOV     DPTR,#__Constant_ffffffff
   \   000135   78..         MOV     R0,#?V0 + 8
   \   000137   12....       LCALL   ?L_MOV_X
   \   00013A   7404         MOV     A,#0x4
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   78..         MOV     R0,#?V0 + 8
   \   000141   12....       LCALL   ?L_ADD_TO_X
     80              }
     81              Draw8Point(x0,y0,i,y);
   \                     ??GL_DrawCircle_2:
   \   000144                ; Setup parameters for call to function Draw8Point
   \   000144   7404         MOV     A,#0x4
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   78..         MOV     R0,#?V0 + 8
   \   00014B   12....       LCALL   ?L_MOV_X
   \   00014E   78..         MOV     R0,#?V0 + 8
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   85....       MOV     ?V0 + 8,?V0 + 4
   \   000156   85....       MOV     ?V0 + 9,?V0 + 5
   \   000159   78..         MOV     R0,#?V0 + 8
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   7404         MOV     A,#0x4
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   12....       LCALL   ?Subroutine17 & 0xFFFF
     82            }
   \                     ??CrossCallReturnLabel_27:
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00016C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016F   90....       MOV     DPTR,#__Constant_1
   \   000172   78..         MOV     R0,#?V0 + 4
   \   000174   12....       LCALL   ?L_ADD_X
   \                     ??GL_DrawCircle_0:
   \   000177   8E..         MOV     ?V0 + 8,R6
   \   000179   EF           MOV     A,R7
   \   00017A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00017D   12....       LCALL   ?SL_GT
   \   000180   4003         JC      $+5
   \   000182   02....       LJMP    ??GL_DrawCircle_1 & 0xFFFF
     83          }
   \   000185   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7406         MOV     A,#0x6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??Draw8Point?relay
   \   000008   7404         MOV     A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   88..         MOV     ?V0 + 8,R0
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   79..         MOV     R1,#?V0 + 8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7408         MOV     A,#0x8
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   78..         MOV     R0,#?V0 + 4
   \   000005   79..         MOV     R1,#?V0 + 8
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 6,A
   \   000007   F5..         MOV     ?V0 + 7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F5..         MOV     ?V0 + 9,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 10,A
   \   000007   F5..         MOV     ?V0 + 11,A
   \   000009   22           RET
     84          
     85          /*********************************************************************
     86          *
     87          *       GUI_DrawCircle
     88          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          void GUI_DrawCircle(int x0, int y0, int r) {
   \                     GUI_DrawCircle:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
     90            #if (GUI_WINSUPPORT)
     91              GUI_RECT Rect;
     92            #endif
     93            halIntState_t state;  
     94            GUI_LOCK(state);
     95            #if (GUI_WINSUPPORT)
     96              WM_ADDORG(x0,y0);
     97              Rect.x0 = x0-r;
     98              Rect.x1 = x0+r;
     99              Rect.y0 = y0-r;
    100              Rect.y1 = y0+r;
    101              WM_ITERATE_START(&Rect); {
    102            #endif
    103              GL_DrawCircle( x0, y0, r);
   \                     ??CrossCallReturnLabel_13:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   12....       LCALL   ??GL_DrawCircle?relay
   \   000013                REQUIRE ?Subroutine1
   \   000013                REQUIRE _A_IEN0
   \   000013                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
    104            #if (GUI_WINSUPPORT)
    105              } WM_ITERATE_END();
    106            #endif
    107            GUI_UNLOCK(state);
   \   000005   EE           MOV     A,R6
   \   000006   A2E7         MOV     C,0xE0 /* A   */.7
   \   000008   92AF         MOV     0xa8.7,C
    108          }
   \   00000A   7F02         MOV     R7,#0x2
   \   00000C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   E5A8         MOV     A,0xa8
   \   000005   FE           MOV     R6,A
   \   000006   C2AF         CLR     0xa8.7
   \   000008                ; Setup parameters for call to function GL_DrawCircle
   \   000008                ; Setup parameters for call to function GL_FillCircle
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET
    109          
    110          /*********************************************************************
    111          *
    112          *       GL_FillCircle
    113          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          void GL_FillCircle(int x0, int y0, int r) {
   \                     GL_FillCircle:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FF           MOV     R7,A
    115            I32 i;
    116            int imax = ((I32)((I32)r*707))/1000+1;
   \   000025   8E..         MOV     ?V0 + 4,R6
   \   000027   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00002A   8E..         MOV     ?V0 + 0,R6
   \   00002C   8F..         MOV     ?V0 + 1,R7
   \   00002E   F5..         MOV     ?V0 + 2,A
   \   000030   F5..         MOV     ?V0 + 3,A
   \   000032   90....       MOV     DPTR,#__Constant_2c3
   \   000035   78..         MOV     R0,#?V0 + 8
   \   000037   12....       LCALL   ?L_MOV_X
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   79..         MOV     R1,#?V0 + 8
   \   00003E   12....       LCALL   ?L_MUL
   \   000041   90....       MOV     DPTR,#__Constant_3e8
   \   000044   78..         MOV     R0,#?V0 + 8
   \   000046   12....       LCALL   ?L_MOV_X
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   79..         MOV     R1,#?V0 + 8
   \   00004D   12....       LCALL   ?L_DIV_MOD
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   2401         ADD     A,#0x1
   \   000054   F8           MOV     R0,A
   \   000055   E5..         MOV     A,?V0 + 1
   \   000057   3400         ADDC    A,#0x0
   \   000059   F9           MOV     R1,A
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    117            I32 sqmax = (I32)r*(I32)r+(I32)r/2;
   \   000064   8E..         MOV     ?V0 + 0,R6
   \   000066   8F..         MOV     ?V0 + 1,R7
   \   000068   85....       MOV     ?V0 + 2,?V0 + 6
   \   00006B   85....       MOV     ?V0 + 3,?V0 + 7
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   79..         MOV     R1,#?V0 + 4
   \   000072   12....       LCALL   ?L_MUL
   \   000075   EE           MOV     A,R6
   \   000076   F8           MOV     R0,A
   \   000077   EF           MOV     A,R7
   \   000078   F9           MOV     R1,A
   \   000079   7A02         MOV     R2,#0x2
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   12....       LCALL   ?S_DIV_MOD
   \   000080   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000083   12....       LCALL   ?L_ADD
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?L_MOV_TO_X
    118            I32 x=r;
   \   000090   8E..         MOV     ?V0 + 0,R6
   \   000092   8F..         MOV     ?V0 + 1,R7
   \   000094   85....       MOV     ?V0 + 2,?V0 + 6
   \   000097   85....       MOV     ?V0 + 3,?V0 + 7
    119            LCD_HL_DrawHLine(x0-r,y0,x0+r);
   \   00009A                ; Setup parameters for call to function LCD_DrawHLine
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   2E           ADD     A,R6
   \   0000A2   F5..         MOV     ?V0 + 4,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   3F           ADDC    A,R7
   \   0000A7   F5..         MOV     ?V0 + 5,A
   \   0000A9   78..         MOV     R0,#?V0 + 4
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FC           MOV     R4,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FD           MOV     R5,A
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   C3           CLR     C
   \   0000BF   9E           SUBB    A,R6
   \   0000C0   FA           MOV     R2,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   9F           SUBB    A,R7
   \   0000C4   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    120            for (i=1; i<= imax; i++) {
   \   0000CA   90....       MOV     DPTR,#__Constant_1
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?L_MOV_X
   \   0000D2   02....       LJMP    ??GL_FillCircle_0 & 0xFFFF
    121              if ((i*i+x*x) >sqmax) {
   \                     ??GL_FillCircle_1:
   \   0000D5   7406         MOV     A,#0x6
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   85....       MOV     ?V0 + 12,?V0 + 4
   \   0000DD   85....       MOV     ?V0 + 13,?V0 + 5
   \   0000E0   85....       MOV     ?V0 + 14,?V0 + 6
   \   0000E3   85....       MOV     ?V0 + 15,?V0 + 7
   \   0000E6   78..         MOV     R0,#?V0 + 12
   \   0000E8   79..         MOV     R1,#?V0 + 4
   \   0000EA   12....       LCALL   ?L_MUL
   \   0000ED   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000F0   85....       MOV     ?V0 + 9,?V0 + 1
   \   0000F3   85....       MOV     ?V0 + 10,?V0 + 2
   \   0000F6   85....       MOV     ?V0 + 11,?V0 + 3
   \   0000F9   78..         MOV     R0,#?V0 + 8
   \   0000FB   79..         MOV     R1,#?V0 + 0
   \   0000FD   12....       LCALL   ?L_MUL
   \   000100   78..         MOV     R0,#?V0 + 12
   \   000102   79..         MOV     R1,#?V0 + 8
   \   000104   12....       LCALL   ?L_ADD
   \   000107   78..         MOV     R0,#?V0 + 12
   \   000109   12....       LCALL   ?SL_GT_X
   \   00010C   5076         JNC     ??GL_FillCircle_2
    122                /* draw lines from outside */
    123                if (x>imax) {
   \   00010E   7404         MOV     A,#0x4
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   79..         MOV     R1,#?V0 + 8
   \   00011A   12....       LCALL   ?SL_GT
   \   00011D   505D         JNC     ??GL_FillCircle_3
    124                  LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   85....       MOV     ?V0 + 8,?V0 + 4
   \   000128   85....       MOV     ?V0 + 9,?V0 + 5
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   C3           CLR     C
   \   00012D   95..         SUBB    A,?V0 + 8
   \   00012F   F8           MOV     R0,A
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   95..         SUBB    A,?V0 + 9
   \   000134   F9           MOV     R1,A
   \   000135   E8           MOV     A,R0
   \   000136   2401         ADD     A,#0x1
   \   000138   FE           MOV     R6,A
   \   000139   E9           MOV     A,R1
   \   00013A   3400         ADDC    A,#0x0
   \   00013C   FF           MOV     R7,A
   \   00013D   85..82       MOV     DPL,?XSP + 0
   \   000140   85..83       MOV     DPH,?XSP + 1
   \   000143   E0           MOVX    A,@DPTR
   \   000144   25..         ADD     A,?V0 + 8
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   35..         ADDC    A,?V0 + 9
   \   00014B   F9           MOV     R1,A
   \   00014C   E8           MOV     A,R0
   \   00014D   24FF         ADD     A,#-0x1
   \   00014F   F5..         MOV     ?V0 + 10,A
   \   000151   E9           MOV     A,R1
   \   000152   34FF         ADDC    A,#-0x1
   \   000154   F5..         MOV     ?V0 + 11,A
   \   000156                ; Setup parameters for call to function LCD_DrawHLine
   \   000156   78..         MOV     R0,#?V0 + 10
   \   000158   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015B   7404         MOV     A,#0x4
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   85....       MOV     ?V0 + 8,?V0 + 0
   \   000163   85....       MOV     ?V0 + 9,?V0 + 1
   \   000166   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
    125                  LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
   \   00016C                ; Setup parameters for call to function LCD_DrawHLine
   \   00016C   78..         MOV     R0,#?V0 + 10
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000171   7404         MOV     A,#0x4
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ?Subroutine6 & 0xFFFF
    126                }
   \                     ??CrossCallReturnLabel_4:
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
    127                x--;
   \                     ??GL_FillCircle_3:
   \   00017C   90....       MOV     DPTR,#__Constant_ffffffff
   \   00017F   78..         MOV     R0,#?V0 + 0
   \   000181   12....       LCALL   ?L_ADD_X
    128              }
    129              /* draw lines from inside (center) */
    130              LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
   \                     ??GL_FillCircle_2:
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   85....       MOV     ?V0 + 8,?V0 + 0
   \   00018D   85....       MOV     ?V0 + 9,?V0 + 1
   \   000190   E0           MOVX    A,@DPTR
   \   000191   C3           CLR     C
   \   000192   95..         SUBB    A,?V0 + 8
   \   000194   FE           MOV     R6,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   95..         SUBB    A,?V0 + 9
   \   000199   FF           MOV     R7,A
   \   00019A   85..82       MOV     DPL,?XSP + 0
   \   00019D   85..83       MOV     DPH,?XSP + 1
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   25..         ADD     A,?V0 + 8
   \   0001A3   F5..         MOV     ?V0 + 10,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   35..         ADDC    A,?V0 + 9
   \   0001A9   F5..         MOV     ?V0 + 11,A
   \   0001AB                ; Setup parameters for call to function LCD_DrawHLine
   \   0001AB   78..         MOV     R0,#?V0 + 10
   \   0001AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B0   7404         MOV     A,#0x4
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   85....       MOV     ?V0 + 8,?V0 + 4
   \   0001B8   85....       MOV     ?V0 + 9,?V0 + 5
   \   0001BB   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001BE   12....       LCALL   ?DEALLOC_XSTACK8
    131              LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
   \   0001C1                ; Setup parameters for call to function LCD_DrawHLine
   \   0001C1   78..         MOV     R0,#?V0 + 10
   \   0001C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C6   7404         MOV     A,#0x4
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL   ?Subroutine6 & 0xFFFF
    132            }
   \                     ??CrossCallReturnLabel_5:
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   90....       MOV     DPTR,#__Constant_1
   \   0001D4   78..         MOV     R0,#?V0 + 4
   \   0001D6   12....       LCALL   ?L_ADD_X
   \                     ??GL_FillCircle_0:
   \   0001D9   7404         MOV     A,#0x4
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001E1   78..         MOV     R0,#?V0 + 4
   \   0001E3   79..         MOV     R1,#?V0 + 8
   \   0001E5   12....       LCALL   ?SL_GT
   \   0001E8   4003         JC      $+5
   \   0001EA   02....       LJMP    ??GL_FillCircle_1 & 0xFFFF
    133          }
   \   0001ED                REQUIRE ?Subroutine3
   \   0001ED                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   740A         MOV     A,#0xa
   \   000002   80..         SJMP    ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 8
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 9
   \   000008   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   95..         SUBB    A,?V0 + 8
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   95..         SUBB    A,?V0 + 9
   \   000009   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   FD           MOV     R5,A
   \   000001   EE           MOV     A,R6
   \   000002   FA           MOV     R2,A
   \   000003   EF           MOV     A,R7
   \   000004                REQUIRE ??Subroutine35_0
   \   000004                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??LCD_DrawHLine?relay
   \   000004   7402         MOV     A,#0x2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EC           MOV     A,R4
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   ED           MOV     A,R5
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7422         MOV     A,#0x22
   \   000007   22           RET
    134          
    135          /*********************************************************************
    136          *
    137          *       GUI_FillCircle
    138          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          void GUI_FillCircle(int x0, int y0, int r) {
   \                     GUI_FillCircle:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
    140            halIntState_t state; 
    141            GUI_LOCK(state);
    142            #if (GUI_WINSUPPORT)
    143              WM_ADDORG(x0,y0);
    144              WM_ITERATE_START(NULL); {
    145            #endif
    146            GL_FillCircle(x0,y0,r);
   \                     ??CrossCallReturnLabel_14:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   12....       LCALL   ??GL_FillCircle?relay
   \   000013   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000016                REQUIRE _A_IEN0
    147            #if (GUI_WINSUPPORT)
    148              } WM_ITERATE_END();
    149            #endif
    150            GUI_UNLOCK(state);
    151          }
    152          
    153          /*********************************************************************
    154          *
    155          *       Public code, ellipse
    156          *
    157          * The most efficient way to calculate the ellipse positions is using
    158          * the knowledge that the ellipse is just circle which has compressed
    159          * (or stretched) in one direction. For a circle, the following
    160          * equation holds true for all points located on the border of it:
    161          *
    162          *               x^2 + y(x)^2 = r^2 = const
    163          *
    164          * Therefor, for an ellipse we can make use of the following equation:
    165          *
    166          *               (ry*x)^2 + (rx*y(x))^2 = (ry*rx)^2 = const
    167          *
    168          **********************************************************************
    169          */
    170          /*********************************************************************
    171          *
    172          *       GL_FillEllipse
    173          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void GL_FillEllipse(int x0, int y0, int rx, int ry) {
   \                     GL_FillEllipse:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7406         MOV     A,#0x6
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FF           MOV     R7,A
    175            I32 OutConst, Sum, SumY;
    176            int x,y;
    177            U32 _rx = rx;
   \   000024   7420         MOV     A,#0x20
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ?Subroutine13 & 0xFFFF
    178            U32 _ry = ry;
   \                     ??CrossCallReturnLabel_17:
   \   00002C   8E..         MOV     ?V0 + 8,R6
   \   00002E   EF           MOV     A,R7
   \   00002F   12....       LCALL   ?Subroutine27 & 0xFFFF
    179            OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
    180                      +(_rx*_rx*_ry>>1); /* To compensate for rounding */
   \                     ??CrossCallReturnLabel_49:
   \   000032   85....       MOV     ?V0 + 4,?V0 + 0
   \   000035   85....       MOV     ?V0 + 5,?V0 + 1
   \   000038   85....       MOV     ?V0 + 6,?V0 + 2
   \   00003B   85....       MOV     ?V0 + 7,?V0 + 3
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   79..         MOV     R1,#?V0 + 0
   \   000042   12....       LCALL   ?L_MUL
   \   000045   78..         MOV     R0,#?V0 + 4
   \   000047   79..         MOV     R1,#?V0 + 8
   \   000049   12....       LCALL   ?L_MUL
   \   00004C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00004F   85....       MOV     ?V0 + 1,?V0 + 5
   \   000052   85....       MOV     ?V0 + 2,?V0 + 6
   \   000055   85....       MOV     ?V0 + 3,?V0 + 7
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   79..         MOV     R1,#?V0 + 8
   \   00005C   12....       LCALL   ?L_MUL
   \   00005F   7401         MOV     A,#0x1
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?UL_SHR
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   79..         MOV     R1,#?V0 + 4
   \   00006A   12....       LCALL   ?L_ADD
    181            x = rx;
   \   00006D   7420         MOV     A,#0x20
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine9 & 0xFFFF
    182            for (y=0; y<=ry; y++) {
   \                     ??CrossCallReturnLabel_11:
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   02....       LJMP    ??CrossCallReturnLabel_32 & 0xFFFF
    183              SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
    184              while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
    185                     (x>0) && (Sum>OutConst))
    186              {
    187                x--;
   \                     ??GL_FillEllipse_0:
   \   000080   12....       LCALL   ?Subroutine18 & 0xFFFF
    188              }
   \                     ??CrossCallReturnLabel_28:
   \   000083   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000086   405A         JC      ??GL_FillEllipse_1
   \   000088   8E..         MOV     ?V0 + 12,R6
   \   00008A   EE           MOV     A,R6
   \   00008B   F5F0         MOV     B,A
   \   00008D   A4           MUL     AB
   \   00008E   C5..         XCH     A,?V0 + 12
   \   000090   A8F0         MOV     R0,B
   \   000092   8FF0         MOV     B,R7
   \   000094   A4           MUL     AB
   \   000095   28           ADD     A,R0
   \   000096   F8           MOV     R0,A
   \   000097   8EF0         MOV     B,R6
   \   000099   EF           MOV     A,R7
   \   00009A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00009D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F5..         MOV     ?V0 + 8,A
   \   0000A9   F5F0         MOV     B,A
   \   0000AB   A4           MUL     AB
   \   0000AC   C8           XCH     A,R0
   \   0000AD   AAF0         MOV     R2,B
   \   0000AF   89F0         MOV     B,R1
   \   0000B1   A4           MUL     AB
   \   0000B2   2A           ADD     A,R2
   \   0000B3   FA           MOV     R2,A
   \   0000B4   85..F0       MOV     B,?V0 + 8
   \   0000B7   E9           MOV     A,R1
   \   0000B8   A4           MUL     AB
   \   0000B9   2A           ADD     A,R2
   \   0000BA   88..         MOV     ?V0 + 8,R0
   \   0000BC   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000BF   78..         MOV     R0,#?V0 + 12
   \   0000C1   79..         MOV     R1,#?V0 + 8
   \   0000C3   12....       LCALL   ?L_MUL
   \   0000C6   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000C9   85....       MOV     ?V0 + 9,?V0 + 5
   \   0000CC   85....       MOV     ?V0 + 10,?V0 + 6
   \   0000CF   85....       MOV     ?V0 + 11,?V0 + 7
   \   0000D2   78..         MOV     R0,#?V0 + 8
   \   0000D4   79..         MOV     R1,#?V0 + 12
   \   0000D6   12....       LCALL   ?L_ADD
   \   0000D9   78..         MOV     R0,#?V0 + 8
   \   0000DB   79..         MOV     R1,#?V0 + 0
   \   0000DD   12....       LCALL   ?SL_GT
   \   0000E0   409E         JC      ??GL_FillEllipse_0
    189              LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
   \                     ??GL_FillEllipse_1:
   \   0000E2                ; Setup parameters for call to function LCD_DrawHLine
   \   0000E2   7404         MOV     A,#0x4
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   7408         MOV     A,#0x8
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000F5   7404         MOV     A,#0x4
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   28           ADD     A,R0
   \   0000FC   FC           MOV     R4,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   39           ADDC    A,R1
   \   000100   FD           MOV     R5,A
   \   000101   7406         MOV     A,#0x6
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   C082         PUSH    DPL
   \   000108   C083         PUSH    DPH
   \   00010A   7402         MOV     A,#0x2
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000112   D083         POP     DPH
   \   000114   D082         POP     DPL
   \   000116   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
    190              if (y)
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000124   E8           MOV     A,R0
   \   000125   49           ORL     A,R1
   \   000126   6043         JZ      ??GL_FillEllipse_2
    191                LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
   \   000128                ; Setup parameters for call to function LCD_DrawHLine
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   7408         MOV     A,#0x8
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   C082         PUSH    DPL
   \   00013A   C083         PUSH    DPH
   \   00013C   7404         MOV     A,#0x4
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000144   D083         POP     DPH
   \   000146   D082         POP     DPL
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C3           CLR     C
   \   00014A   98           SUBB    A,R0
   \   00014B   FC           MOV     R4,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   99           SUBB    A,R1
   \   00014F   FD           MOV     R5,A
   \   000150   7406         MOV     A,#0x6
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   C082         PUSH    DPL
   \   000157   C083         PUSH    DPH
   \   000159   7402         MOV     A,#0x2
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000161   D083         POP     DPH
   \   000163   D082         POP     DPL
   \   000165   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000168   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GL_FillEllipse_2:
   \   00016B   7402         MOV     A,#0x2
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000173   F0           MOVX    @DPTR,A
   \   000174   7402         MOV     A,#0x2
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00017C   C3           CLR     C
   \   00017D   EE           MOV     A,R6
   \   00017E   98           SUBB    A,R0
   \   00017F   EF           MOV     A,R7
   \   000180   99           SUBB    A,R1
   \   000181   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000183   65D0         XRL     A,PSW
   \   000185   33           RLC     A
   \   000186   4056         JC      ??GL_FillEllipse_3
   \   000188   7420         MOV     A,#0x20
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F5..         MOV     ?V0 + 4,A
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   F5..         MOV     ?V0 + 5,A
   \   000194   7420         MOV     A,#0x20
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F5..         MOV     ?V0 + 6,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   F5..         MOV     ?V0 + 7,A
   \   0001A0   E5..         MOV     A,?V0 + 4
   \   0001A2   F5F0         MOV     B,A
   \   0001A4   A4           MUL     AB
   \   0001A5   C5..         XCH     A,?V0 + 4
   \   0001A7   A8F0         MOV     R0,B
   \   0001A9   85..F0       MOV     B,?V0 + 7
   \   0001AC   A4           MUL     AB
   \   0001AD   28           ADD     A,R0
   \   0001AE   F8           MOV     R0,A
   \   0001AF   85..F0       MOV     B,?V0 + 6
   \   0001B2   E5..         MOV     A,?V0 + 5
   \   0001B4   A4           MUL     AB
   \   0001B5   28           ADD     A,R0
   \   0001B6   12....       LCALL   ?Subroutine23 & 0xFFFF
    192            }
   \                     ??CrossCallReturnLabel_40:
   \   0001B9   7402         MOV     A,#0x2
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F5..         MOV     ?V0 + 8,A
   \   0001C1   F5..         MOV     ?V0 + 10,A
   \   0001C3   F5F0         MOV     B,A
   \   0001C5   A4           MUL     AB
   \   0001C6   C5..         XCH     A,?V0 + 8
   \   0001C8   A8F0         MOV     R0,B
   \   0001CA   89F0         MOV     B,R1
   \   0001CC   A4           MUL     AB
   \   0001CD   28           ADD     A,R0
   \   0001CE   F8           MOV     R0,A
   \   0001CF   85..F0       MOV     B,?V0 + 10
   \   0001D2   E9           MOV     A,R1
   \   0001D3   A4           MUL     AB
   \   0001D4   28           ADD     A,R0
   \   0001D5   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001D8   12....       LCALL   ?L_MUL
   \   0001DB   02....       LJMP    ??CrossCallReturnLabel_28 & 0xFFFF
    193          }
   \                     ??GL_FillEllipse_3:
   \   0001DE   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F5..         MOV     ?V0 + 4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   39           ADDC    A,R1
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   78..         MOV     R0,#?V0 + 4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A4           MUL     AB
   \   000001   28           ADD     A,R0
   \   000002   F5..         MOV     ?V0 + 13,A
   \   000004   33           RLC     A
   \   000005   95E0         SUBB    A,0xE0 /* A   */
   \   000007   F5..         MOV     ?V0 + 14,A
   \   000009   F5..         MOV     ?V0 + 15,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   C3           CLR     C
   \   000007   E0           MOVX    A,@DPTR
   \   000008   9401         SUBB    A,#0x1
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   9400         SUBB    A,#0x0
   \   00000E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000010   65D0         XRL     A,PSW
   \   000012   33           RLC     A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine39_0
   \   000006                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET
    194          
    195          /*********************************************************************
    196          *
    197          *       GUI_FillEllipse
    198          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    199          void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
   \                     GUI_FillEllipse:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine14 & 0xFFFF
    200            #if (GUI_WINSUPPORT)
    201              GUI_RECT r;
    202            #endif
    203            halIntState_t state; 
    204            GUI_LOCK(state);
    205            #if (GUI_WINSUPPORT)
    206              WM_ADDORG(x0,y0);
    207              /* Calc rectangle in order to avoid unnecessary drawing ops. */
    208              r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
    209              WM_ITERATE_START(&r); {
    210            #endif
    211            GL_FillEllipse (x0,y0, rx, ry);
   \                     ??CrossCallReturnLabel_19:
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   12....       LCALL   ??GL_FillEllipse?relay
   \   00001E                REQUIRE ?Subroutine2
   \   00001E                REQUIRE _A_IEN0
   \   00001E                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
    212            #if (GUI_WINSUPPORT)
    213              } WM_ITERATE_END();
    214            #endif
    215            GUI_UNLOCK(state);
   \   000005   EE           MOV     A,R6
   \   000006   A2E7         MOV     C,0xE0 /* A   */.7
   \   000008   92AF         MOV     0xa8.7,C
    216          }
   \   00000A   7F04         MOV     R7,#0x4
   \   00000C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   740E         MOV     A,#0xe
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   E5A8         MOV     A,0xa8
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
   \   00000C                ; Setup parameters for call to function GL_FillEllipse
   \   00000C                ; Setup parameters for call to function GL_DrawEllipse
   \   00000C   78..         MOV     R0,#?V0 + 2
   \   00000E   22           RET
    217          
    218          /*********************************************************************
    219          *
    220          *       GL_DrawEllipse
    221          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
   \                     GL_DrawEllipse:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7408         MOV     A,#0x8
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine26 & 0xFFFF
    223            I32 OutConst, Sum, SumY;
    224            int x,y;
    225            int xOld;
    226            U32 _rx = rx;
   \                     ??CrossCallReturnLabel_46:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   85....       MOV     ?V0 + 4,?V0 + 0
   \   000027   12....       LCALL   ?Subroutine23 & 0xFFFF
    227            U32 _ry = ry;
   \                     ??CrossCallReturnLabel_41:
   \   00002A   7424         MOV     A,#0x24
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine13 & 0xFFFF
    228            OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
    229                      +(_rx*_rx*_ry>>1); /* To compensate for rounding */
   \                     ??CrossCallReturnLabel_18:
   \   000032   85....       MOV     ?V0 + 8,?V0 + 4
   \   000035   85....       MOV     ?V0 + 9,?V0 + 5
   \   000038   85....       MOV     ?V0 + 10,?V0 + 6
   \   00003B   85....       MOV     ?V0 + 11,?V0 + 7
   \   00003E   78..         MOV     R0,#?V0 + 8
   \   000040   79..         MOV     R1,#?V0 + 4
   \   000042   12....       LCALL   ?L_MUL
   \   000045   78..         MOV     R0,#?V0 + 8
   \   000047   79..         MOV     R1,#?V0 + 0
   \   000049   12....       LCALL   ?L_MUL
   \   00004C   85....       MOV     ?V0 + 4,?V0 + 8
   \   00004F   85....       MOV     ?V0 + 5,?V0 + 9
   \   000052   85....       MOV     ?V0 + 6,?V0 + 10
   \   000055   85....       MOV     ?V0 + 7,?V0 + 11
   \   000058   78..         MOV     R0,#?V0 + 4
   \   00005A   79..         MOV     R1,#?V0 + 0
   \   00005C   12....       LCALL   ?L_MUL
   \   00005F   7401         MOV     A,#0x1
   \   000061   78..         MOV     R0,#?V0 + 8
   \   000063   12....       LCALL   ?UL_SHR
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   79..         MOV     R1,#?V0 + 8
   \   00006A   12....       LCALL   ?L_ADD
    230            xOld = x = rx;
   \   00006D   7422         MOV     A,#0x22
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   7406         MOV     A,#0x6
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E8           MOV     A,R0
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \   000086   F0           MOVX    @DPTR,A
    231            for (y=0; y<=ry; y++) {
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   02....       LJMP    ??CrossCallReturnLabel_33 & 0xFFFF
    232              if (y==ry) {
    233                x=0;
    234              } else {
    235                SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
    236                while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
    237                       (x>0) && (Sum>OutConst)) x--;
   \                     ??GL_DrawEllipse_0:
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00009B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00009E   4067         JC      ??GL_DrawEllipse_1
   \   0000A0   7424         MOV     A,#0x24
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000A8   7424         MOV     A,#0x24
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000B0   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F5..         MOV     ?V0 + 12,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F5..         MOV     ?V0 + 13,A
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V0 + 14,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F5..         MOV     ?V0 + 15,A
   \   0000CD   E5..         MOV     A,?V0 + 12
   \   0000CF   F5F0         MOV     B,A
   \   0000D1   A4           MUL     AB
   \   0000D2   C5..         XCH     A,?V0 + 12
   \   0000D4   A8F0         MOV     R0,B
   \   0000D6   85..F0       MOV     B,?V0 + 15
   \   0000D9   A4           MUL     AB
   \   0000DA   28           ADD     A,R0
   \   0000DB   F8           MOV     R0,A
   \   0000DC   85..F0       MOV     B,?V0 + 14
   \   0000DF   E5..         MOV     A,?V0 + 13
   \   0000E1   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   79..         MOV     R1,#?V0 + 12
   \   0000E8   12....       LCALL   ?L_MUL
   \   0000EB   85....       MOV     ?V0 + 12,?V0 + 8
   \   0000EE   85....       MOV     ?V0 + 13,?V0 + 9
   \   0000F1   85....       MOV     ?V0 + 14,?V0 + 10
   \   0000F4   85....       MOV     ?V0 + 15,?V0 + 11
   \   0000F7   78..         MOV     R0,#?V0 + 12
   \   0000F9   79..         MOV     R1,#?V0 + 0
   \   0000FB   12....       LCALL   ?L_ADD
   \   0000FE   78..         MOV     R0,#?V0 + 12
   \   000100   79..         MOV     R1,#?V0 + 4
   \   000102   12....       LCALL   ?SL_GT
   \   000105   408B         JC      ??GL_DrawEllipse_0
    238              }
    239              /* Since we draw lines, we can not draw on the first
    240                  iteration
    241              */
    242              if (y) {
   \                     ??GL_DrawEllipse_1:
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00010F   E8           MOV     A,R0
   \   000110   49           ORL     A,R1
   \   000111   7003         JNZ     $+5
   \   000113   02....       LJMP    ??GL_DrawEllipse_2 & 0xFFFF
    243                GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
   \   000116   7408         MOV     A,#0x8
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C3           CLR     C
   \   00011D   98           SUBB    A,R0
   \   00011E   FE           MOV     R6,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   99           SUBB    A,R1
   \   000122   FF           MOV     R7,A
   \   000123   EE           MOV     A,R6
   \   000124   2401         ADD     A,#0x1
   \   000126   F5..         MOV     ?V0 + 10,A
   \   000128   EF           MOV     A,R7
   \   000129   3400         ADDC    A,#0x0
   \   00012B   F5..         MOV     ?V0 + 11,A
   \   00012D   7404         MOV     A,#0x4
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   C082         PUSH    DPL
   \   000134   C083         PUSH    DPH
   \   000136   7406         MOV     A,#0x6
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00013E   D083         POP     DPH
   \   000140   D082         POP     DPL
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C3           CLR     C
   \   000144   98           SUBB    A,R0
   \   000145   F5..         MOV     ?V0 + 2,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   99           SUBB    A,R1
   \   00014A   F5..         MOV     ?V0 + 3,A
   \   00014C   7404         MOV     A,#0x4
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   C082         PUSH    DPL
   \   000153   C083         PUSH    DPH
   \   000155   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000158   D083         POP     DPH
   \   00015A   D082         POP     DPL
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   C3           CLR     C
   \   00015E   98           SUBB    A,R0
   \   00015F   F5..         MOV     ?V0 + 12,A
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   99           SUBB    A,R1
   \   000164   F5..         MOV     ?V0 + 13,A
   \   000166                ; Setup parameters for call to function GL_DrawLine1
   \   000166   8E..         MOV     ?V0 + 0,R6
   \   000168   8F..         MOV     ?V0 + 1,R7
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   78..         MOV     R0,#?V0 + 12
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
    244                GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
   \   00017A   7408         MOV     A,#0x8
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000182   7402         MOV     A,#0x2
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E0           MOVX    A,@DPTR
   \   000188   28           ADD     A,R0
   \   000189   F5..         MOV     ?V0 + 0,A
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   39           ADDC    A,R1
   \   00018E   F5..         MOV     ?V0 + 1,A
   \   000190   E5..         MOV     A,?V0 + 0
   \   000192   24FF         ADD     A,#-0x1
   \   000194   F5..         MOV     ?V0 + 8,A
   \   000196   E5..         MOV     A,?V0 + 1
   \   000198   34FF         ADDC    A,#-0x1
   \   00019A   F5..         MOV     ?V0 + 9,A
   \   00019C                ; Setup parameters for call to function GL_DrawLine1
   \   00019C   78..         MOV     R0,#?V0 + 0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   78..         MOV     R0,#?V0 + 12
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A6   AC..         MOV     R4,?V0 + 8
   \   0001A8   AD..         MOV     R5,?V0 + 9
   \   0001AA   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
    245                GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
   \   0001B0   7404         MOV     A,#0x4
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0001B8   7406         MOV     A,#0x6
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   28           ADD     A,R0
   \   0001BF   F5..         MOV     ?V0 + 2,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   39           ADDC    A,R1
   \   0001C4   F5..         MOV     ?V0 + 3,A
   \   0001C6   85..82       MOV     DPL,?XSP + 0
   \   0001C9   85..83       MOV     DPH,?XSP + 1
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   28           ADD     A,R0
   \   0001CE   F5..         MOV     ?V0 + 12,A
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   39           ADDC    A,R1
   \   0001D3   F5..         MOV     ?V0 + 13,A
   \   0001D5                ; Setup parameters for call to function GL_DrawLine1
   \   0001D5   8E..         MOV     ?V0 + 14,R6
   \   0001D7   8F..         MOV     ?V0 + 15,R7
   \   0001D9   78..         MOV     R0,#?V0 + 14
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DE   78..         MOV     R0,#?V0 + 12
   \   0001E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E3   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001E6   12....       LCALL   ?DEALLOC_XSTACK8
    246                GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
   \   0001E9                ; Setup parameters for call to function GL_DrawLine1
   \   0001E9   78..         MOV     R0,#?V0 + 0
   \   0001EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EE   78..         MOV     R0,#?V0 + 12
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F3   AC..         MOV     R4,?V0 + 8
   \   0001F5   AD..         MOV     R5,?V0 + 9
   \   0001F7   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    247              }
   \                     ??CrossCallReturnLabel_75:
   \   0001FA   12....       LCALL   ?DEALLOC_XSTACK8
    248              xOld = x;
   \                     ??GL_DrawEllipse_2:
   \   0001FD   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000200   7406         MOV     A,#0x6
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   E8           MOV     A,R0
   \   000206   F0           MOVX    @DPTR,A
   \   000207   A3           INC     DPTR
   \   000208   E9           MOV     A,R1
   \   000209   F0           MOVX    @DPTR,A
   \   00020A   7402         MOV     A,#0x2
   \   00020C   12....       LCALL   ?XSTACK_DISP0_8
   \   00020F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000212   F0           MOVX    @DPTR,A
   \   000213   7424         MOV     A,#0x24
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   C082         PUSH    DPL
   \   00021A   C083         PUSH    DPH
   \   00021C   7402         MOV     A,#0x2
   \   00021E   12....       LCALL   ?XSTACK_DISP0_8
   \   000221   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000224   D083         POP     DPH
   \   000226   D082         POP     DPL
   \   000228   C3           CLR     C
   \   000229   E0           MOVX    A,@DPTR
   \   00022A   98           SUBB    A,R0
   \   00022B   A3           INC     DPTR
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   99           SUBB    A,R1
   \   00022E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000230   65D0         XRL     A,PSW
   \   000232   33           RLC     A
   \   000233   405A         JC      ??GL_DrawEllipse_3
   \   000235   7424         MOV     A,#0x24
   \   000237   12....       LCALL   ?XSTACK_DISP0_8
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   68           XRL     A,R0
   \   00023C   7003         JNZ     ??GL_DrawEllipse_4
   \   00023E   A3           INC     DPTR
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   69           XRL     A,R1
   \                     ??GL_DrawEllipse_4:
   \   000241   700D         JNZ     ??GL_DrawEllipse_5
   \   000243   85..82       MOV     DPL,?XSP + 0
   \   000246   85..83       MOV     DPH,?XSP + 1
   \   000249   E4           CLR     A
   \   00024A   F0           MOVX    @DPTR,A
   \   00024B   A3           INC     DPTR
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   02....       LJMP    ??GL_DrawEllipse_1 & 0xFFFF
   \                     ??GL_DrawEllipse_5:
   \   000250   7422         MOV     A,#0x22
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   12....       LCALL   ?Subroutine30 & 0xFFFF
    249            }
   \                     ??CrossCallReturnLabel_55:
   \   000258   7422         MOV     A,#0x22
   \   00025A   12....       LCALL   ?XSTACK_DISP0_8
   \   00025D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000260   85....       MOV     ?V0 + 8,?V0 + 0
   \   000263   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000266   7402         MOV     A,#0x2
   \   000268   12....       LCALL   ?XSTACK_DISP0_8
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F5..         MOV     ?V0 + 0,A
   \   00026E   F5..         MOV     ?V0 + 2,A
   \   000270   F5F0         MOV     B,A
   \   000272   A4           MUL     AB
   \   000273   C5..         XCH     A,?V0 + 0
   \   000275   A8F0         MOV     R0,B
   \   000277   89F0         MOV     B,R1
   \   000279   A4           MUL     AB
   \   00027A   28           ADD     A,R0
   \   00027B   F8           MOV     R0,A
   \   00027C   85..F0       MOV     B,?V0 + 2
   \   00027F   E9           MOV     A,R1
   \   000280   A4           MUL     AB
   \   000281   28           ADD     A,R0
   \   000282   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000285   78..         MOV     R0,#?V0 + 8
   \   000287   79..         MOV     R1,#?V0 + 0
   \   000289   12....       LCALL   ?L_MUL
   \   00028C   02....       LJMP    ??CrossCallReturnLabel_29 & 0xFFFF
    250          }
   \                     ??GL_DrawEllipse_3:
   \   00028F   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   AC..         MOV     R4,?V0 + 10
   \   000002   AD..         MOV     R5,?V0 + 11
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   AA..         MOV     R2,?V0 + 2
   \   000002   AB..         MOV     R3,?V0 + 3
   \   000004   12....       LCALL   ??GL_DrawLine1?relay
   \   000007   7404         MOV     A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   F5F0         MOV     B,A
   \   00000B   A4           MUL     AB
   \   00000C   C5..         XCH     A,?V0 + 0
   \   00000E   A8F0         MOV     R0,B
   \   000010   85..F0       MOV     B,?V0 + 3
   \   000013   A4           MUL     AB
   \   000014   28           ADD     A,R0
   \   000015   F8           MOV     R0,A
   \   000016   85..F0       MOV     B,?V0 + 2
   \   000019   E5..         MOV     A,?V0 + 1
   \   00001B   A4           MUL     AB
   \   00001C   28           ADD     A,R0
   \   00001D   22           RET
    251          
    252          /*********************************************************************
    253          *
    254          *       GUI_DrawEllipse
    255          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
   \                     GUI_DrawEllipse:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine14 & 0xFFFF
    257            #if (GUI_WINSUPPORT)
    258              GUI_RECT r;
    259            #endif
    260            halIntState_t state;
    261            GUI_LOCK(state);
    262            #if (GUI_WINSUPPORT)
    263              WM_ADDORG(x0,y0);
    264            /* Calc rectangle in order to avoid unnecessary drawing ops. */
    265              r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
    266              WM_ITERATE_START(&r); {
    267            #endif
    268            GL_DrawEllipse(x0, y0, rx, ry);
   \                     ??CrossCallReturnLabel_20:
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   12....       LCALL   ??GL_DrawEllipse?relay
   \   00001E   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000021                REQUIRE _A_IEN0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2c3:
   \   000000   C3020000     DD 707

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD -1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Draw8Point?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Draw8Point

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_DrawCircle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_DrawCircle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_DrawCircle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_DrawCircle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_FillCircle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_FillCircle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_FillCircle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_FillCircle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_FillEllipse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_FillEllipse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_FillEllipse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_FillEllipse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_DrawEllipse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_DrawEllipse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_DrawEllipse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_DrawEllipse
    269            #if (GUI_WINSUPPORT)
    270              } WM_ITERATE_END();
    271            #endif
    272            GUI_UNLOCK(state);
    273          }
    274          
    275          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     Draw8Point              0      0     52
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
       -> LCD_DrawPixel      0      0     32
     GL_DrawCircle           4      0     48
       -> Draw8Point         0      0     72
       -> Draw8Point         0      0     72
       -> Draw8Point         0      0     72
     GL_DrawEllipse          2      0     54
       -> GL_DrawLine1       0      0     76
       -> GL_DrawLine1       0      0     76
       -> GL_DrawLine1       0      0     76
       -> GL_DrawLine1       0      0     76
     GL_FillCircle           0      0     48
       -> LCD_DrawHLine      0      0     72
       -> LCD_DrawHLine      0      0     72
       -> LCD_DrawHLine      0      0     72
       -> LCD_DrawHLine      0      0     72
       -> LCD_DrawHLine      0      0     72
     GL_FillEllipse          2      0     50
       -> LCD_DrawHLine      0      0     68
       -> LCD_DrawHLine      0      0     68
     GUI_DrawCircle          0      0     14
       -> GL_DrawCircle      0      0     24
     GUI_DrawEllipse         0      0     20
       -> GL_DrawEllipse     0      0     32
     GUI_FillCircle          0      0     14
       -> GL_FillCircle      0      0     24
     GUI_FillEllipse         0      0     20
       -> GL_FillEllipse     0      0     32


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     _A_IEN0                    1
     Draw8Point               156
     ?Subroutine22             13
     ?Subroutine21             24
     GL_DrawCircle            392
     ?Subroutine17              8
     ?Subroutine8              11
     ?Subroutine24             11
     ?Subroutine0               2
     ??Subroutine36_0           8
     ?Subroutine25              8
     ?Subroutine23             10
     ?Subroutine32             10
     GUI_DrawCircle            19
     ?Subroutine1              15
     ?Subroutine11             11
     ?Subroutine30              8
     GL_FillCircle            493
     ?Subroutine3               4
     ?Subroutine12              9
     ?Subroutine7              12
     ?Subroutine6              13
     ?Subroutine33              4
     ??Subroutine35_0           7
     ?Subroutine26              8
     GUI_FillCircle            22
     GL_FillEllipse           481
     ?Subroutine15             11
     ?Subroutine5              15
     ??Subroutine37_0           8
     ?Subroutine28             12
     ?Subroutine27              4
     ?Subroutine20              9
     ?Subroutine18             10
     ?Subroutine16             20
     ?Subroutine13              7
     ?Subroutine10              6
     ??Subroutine39_0           6
     ?Subroutine9               9
     ?Subroutine31             12
     GUI_FillEllipse           30
     ?Subroutine2              15
     ?Subroutine19              6
     ?Subroutine14             15
     GL_DrawEllipse           658
     ?Subroutine34              2
     ?Subroutine29              4
     ??Subroutine38_0          10
     ?Subroutine4              30
     GUI_DrawEllipse           33
     __Constant_2c3             4
     __Constant_3e8             4
     __Constant_1               4
     __Constant_ffffffff        4
     ??Draw8Point?relay         6
     ??GL_DrawCircle?relay      6
     ??GUI_DrawCircle?relay     6
     ??GL_FillCircle?relay      6
     ??GUI_FillCircle?relay     6
     ??GL_FillEllipse?relay     6
     ??GUI_FillEllipse?relay    6
     ??GL_DrawEllipse?relay     6
     ??GUI_DrawEllipse?relay    6

 
 2 691 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    16 bytes in segment XDATA_ROM_C
 
 2 745 bytes of CODE  memory
     0 bytes of CONST memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)

Errors: none
Warnings: none
