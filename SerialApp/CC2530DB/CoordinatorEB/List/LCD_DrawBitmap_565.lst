###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:09 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCD_DrawBitmap_565.c                             #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCD_DrawBitmap_565.c -D   #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCD_Dr #
#                          awBitmap_565.lst                                   #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCD_Dra #
#                          wBitmap_565.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_DrawBitmap_565.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_DrawBitmap_565.c
     16          Purpose     : Drawing routine for drawing a 16bpp bitmap
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "GUI_Private.h"
     22          #include "LCD_Private.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       Static code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _DrawBitmap_565
     33          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          static void _DrawBitmap_565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_565:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   \   00000E   8C..         MOV     ?V0 + 12,R4
   \   000010   8D..         MOV     ?V0 + 13,R5
   \   000012   7422         MOV     A,#0x22
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 3,A
   \   00001E   7424         MOV     A,#0x24
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 4,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 5,A
     35            const U16 * pData;
     36            int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
     37            GUI_USE_PARA(pLogPal);
     38            OldIndex = LCD_GetColorIndex();
   \   00002A                ; Setup parameters for call to function LCD_GetColorIndex
   \   00002A   12....       LCALL   ??LCD_GetColorIndex?relay
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   EA           MOV     A,R2
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   EB           MOV     A,R3
   \   000036   F0           MOVX    @DPTR,A
     39            PrevIndex = OldIndex;
   \   000037   7408         MOV     A,#0x8
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E8           MOV     A,R0
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E9           MOV     A,R1
   \   000048   F0           MOVX    @DPTR,A
     40            pData = (const U16 *)pPixel;
   \   000049   7426         MOV     A,#0x26
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 6,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0 + 7,A
     41            Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
   \   000055                ; Setup parameters for call to function LCD_GetFixedPaletteEx
   \   000055   90....       MOV     DPTR,#GUI_Context + 13
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ??LCD_GetFixedPaletteEx?relay
   \   00005F   8A..         MOV     ?V0 + 8,R2
   \   000061   8B..         MOV     ?V0 + 9,R3
     42            SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
   \   000063                ; Setup parameters for call to function LCD_GetSwapRBEx
   \   000063   90....       MOV     DPTR,#GUI_Context + 13
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   12....       LCALL   ??LCD_GetSwapRBEx?relay
     43            Mag = (xMag | yMag);
   \   00006D   742A         MOV     A,#0x2a
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000075   742C         MOV     A,#0x2c
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   48           ORL     A,R0
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   49           ORL     A,R1
   \   000080   F9           MOV     R1,A
     44            BytesPerLine = xsize * 2;
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   C3           CLR     C
   \   000084   33           RLC     A
   \   000085   FE           MOV     R6,A
   \   000086   E5..         MOV     A,?V0 + 3
   \   000088   33           RLC     A
   \   000089   FF           MOV     R7,A
     45            #if GUI_SUPPORT_MEMDEV == 0
     46            if ((Mode == 565) && (SwapRB == 0) && (Mag == 1)) {
   \   00008A   7435         MOV     A,#0x35
   \   00008C   65..         XRL     A,?V0 + 8
   \   00008E   7004         JNZ     ??_DrawBitmap_565_0
   \   000090   7402         MOV     A,#0x2
   \   000092   65..         XRL     A,?V0 + 9
   \                     ??_DrawBitmap_565_0:
   \   000094   705C         JNZ     ??_DrawBitmap_565_1
   \   000096   EA           MOV     A,R2
   \   000097   4B           ORL     A,R3
   \   000098   7058         JNZ     ??_DrawBitmap_565_1
   \   00009A   7401         MOV     A,#0x1
   \   00009C   68           XRL     A,R0
   \   00009D   7001         JNZ     ??_DrawBitmap_565_2
   \   00009F   E9           MOV     A,R1
   \                     ??_DrawBitmap_565_2:
   \   0000A0   7050         JNZ     ??_DrawBitmap_565_1
     47              UseDrawBitmap = 1;
     48            }
     49            #else
     50            if (GUI_Context.pDeviceAPI->pMemDevAPI) {
     51              if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
     52                  ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 0)))  && (Mag == 1)) {
     53                UseDrawBitmap = 1;
     54              }
     55            }
     56            #endif
     57            if (UseDrawBitmap) {
     58              LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
   \   0000A2                ; Setup parameters for call to function LCD_DrawBitmap
   \   0000A2   E4           CLR     A
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   F5..         MOV     ?V0 + 1,A
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7428         MOV     A,#0x28
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B4   8E..         MOV     ?V0 + 0,R6
   \   0000B6   8F..         MOV     ?V0 + 1,R7
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BD   75..10       MOV     ?V0 + 0,#0x10
   \   0000C0   75..00       MOV     ?V0 + 1,#0x0
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   75..01       MOV     ?V0 + 0,#0x1
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV     R0,#?V0 + 2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   AC..         MOV     R4,?V0 + 12
   \   0000E1   AD..         MOV     R5,?V0 + 13
   \   0000E3   AA..         MOV     R2,?V0 + 14
   \   0000E5   AB..         MOV     R3,?V0 + 15
   \   0000E7   12....       LCALL   ??LCD_DrawBitmap?relay
   \   0000EA   7410         MOV     A,#0x10
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   02....       LJMP    ??_DrawBitmap_565_3 & 0xFFFF
     59            } else {
     60              if (Mag == 1) {
   \                     ??_DrawBitmap_565_1:
   \   0000F2   7401         MOV     A,#0x1
   \   0000F4   68           XRL     A,R0
   \   0000F5   7001         JNZ     ??_DrawBitmap_565_4
   \   0000F7   E9           MOV     A,R1
   \                     ??_DrawBitmap_565_4:
   \   0000F8   6003         JZ      $+5
   \   0000FA   02....       LJMP    ??_DrawBitmap_565_5 & 0xFFFF
     61                /* Perform clipping */
     62                int x1, y1, Diff;
     63                y1 = y0 + ysize - 1;
   \   0000FD   E5..         MOV     A,?V0 + 12
   \   0000FF   25..         ADD     A,?V0 + 4
   \   000101   F8           MOV     R0,A
   \   000102   E5..         MOV     A,?V0 + 13
   \   000104   35..         ADDC    A,?V0 + 5
   \   000106   F9           MOV     R1,A
   \   000107   E8           MOV     A,R0
   \   000108   24FF         ADD     A,#-0x1
   \   00010A   FC           MOV     R4,A
   \   00010B   E9           MOV     A,R1
   \   00010C   34FF         ADDC    A,#-0x1
   \   00010E   FD           MOV     R5,A
     64                x1 = x0 + xsize - 1;
   \   00010F   E5..         MOV     A,?V0 + 14
   \   000111   25..         ADD     A,?V0 + 2
   \   000113   F8           MOV     R0,A
   \   000114   E5..         MOV     A,?V0 + 15
   \   000116   35..         ADDC    A,?V0 + 3
   \   000118   F9           MOV     R1,A
   \   000119   E8           MOV     A,R0
   \   00011A   24FF         ADD     A,#-0x1
   \   00011C   F5..         MOV     ?V0 + 8,A
   \   00011E   E9           MOV     A,R1
   \   00011F   34FF         ADDC    A,#-0x1
   \   000121   F5..         MOV     ?V0 + 9,A
     65                /* Clip Y */
     66                if (y0 < GUI_Context.ClipRect.y0) {
   \   000123   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000126   E5..         MOV     A,?V0 + 12
   \   000128   98           SUBB    A,R0
   \   000129   E5..         MOV     A,?V0 + 13
   \   00012B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00012E   5039         JNC     ??CrossCallReturnLabel_13
     67                  Diff = GUI_Context.ClipRect.y0 -y0;
   \   000130   90....       MOV     DPTR,#GUI_Context + 6
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FA           MOV     R2,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   FB           MOV     R3,A
   \   000138   EA           MOV     A,R2
   \   000139   C3           CLR     C
   \   00013A   95..         SUBB    A,?V0 + 12
   \   00013C   F8           MOV     R0,A
   \   00013D   EB           MOV     A,R3
   \   00013E   95..         SUBB    A,?V0 + 13
   \   000140   F9           MOV     R1,A
     68                  y0   = GUI_Context.ClipRect.y0;
   \   000141   8A..         MOV     ?V0 + 12,R2
   \   000143   8B..         MOV     ?V0 + 13,R3
     69                  #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     70                    pData += (U32)Diff * (U32)BytesPerLine / 2;
     71                  #else
     72                    pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
   \   000145   E8           MOV     A,R0
   \   000146   FA           MOV     R2,A
   \   000147   E9           MOV     A,R1
   \   000148   FB           MOV     R3,A
   \   000149   EA           MOV     A,R2
   \   00014A   8EF0         MOV     B,R6
   \   00014C   A4           MUL     AB
   \   00014D   CA           XCH     A,R2
   \   00014E   85F0..       MOV     ?V0 + 10,B
   \   000151   8FF0         MOV     B,R7
   \   000153   A4           MUL     AB
   \   000154   25..         ADD     A,?V0 + 10
   \   000156   F5..         MOV     ?V0 + 10,A
   \   000158   8EF0         MOV     B,R6
   \   00015A   EB           MOV     A,R3
   \   00015B   A4           MUL     AB
   \   00015C   25..         ADD     A,?V0 + 10
   \   00015E   C3           CLR     C
   \   00015F   13           RRC     A
   \   000160   FB           MOV     R3,A
   \   000161   EA           MOV     A,R2
   \   000162   13           RRC     A
   \   000163   12....       LCALL   ?Subroutine9 & 0xFFFF
     73                  #endif
     74                  ysize -= Diff;
   \                     ??CrossCallReturnLabel_17:
   \   000166   12....       LCALL   ?Subroutine7 & 0xFFFF
     75                }
     76                Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??CrossCallReturnLabel_13:
   \   000169   90....       MOV     DPTR,#GUI_Context + 10
   \   00016C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00016F   EC           MOV     A,R4
   \   000170   C3           CLR     C
   \   000171   98           SUBB    A,R0
   \   000172   F8           MOV     R0,A
   \   000173   ED           MOV     A,R5
   \   000174   12....       LCALL   ?Subroutine5 & 0xFFFF
     77                if (Diff > 0) {
   \                     ??CrossCallReturnLabel_23:
   \   000177   4003         JC      ??CrossCallReturnLabel_14
     78                  ysize -= Diff;
   \   000179   12....       LCALL   ?Subroutine7 & 0xFFFF
     79                }
     80                if (ysize <=0) {
   \                     ??CrossCallReturnLabel_14:
   \   00017C   C3           CLR     C
   \   00017D   E5..         MOV     A,?V0 + 4
   \   00017F   9401         SUBB    A,#0x1
   \   000181   E5..         MOV     A,?V0 + 5
   \   000183   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000186   5003         JNC     $+5
   \   000188   02....       LJMP    ??_DrawBitmap_565_3 & 0xFFFF
     81          		    return;
     82                }
     83                /* Clip right side */
     84                Diff = x1 - GUI_Context.ClipRect.x1;
   \   00018B   90....       MOV     DPTR,#GUI_Context + 8
   \   00018E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000191   E5..         MOV     A,?V0 + 8
   \   000193   C3           CLR     C
   \   000194   98           SUBB    A,R0
   \   000195   F8           MOV     R0,A
   \   000196   E5..         MOV     A,?V0 + 9
   \   000198   12....       LCALL   ?Subroutine5 & 0xFFFF
     85                if (Diff > 0) {
   \                     ??CrossCallReturnLabel_24:
   \   00019B   4003         JC      ??CrossCallReturnLabel_15
     86                  xsize -= Diff;
   \   00019D   12....       LCALL   ?Subroutine8 & 0xFFFF
     87                }
     88                /* Clip left side */
     89                Diff =0;
     90                if (x0 < GUI_Context.ClipRect.x0) {
   \                     ??CrossCallReturnLabel_15:
   \   0001A0   90....       MOV     DPTR,#GUI_Context + 4
   \   0001A3   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001A6   E5..         MOV     A,?V0 + 14
   \   0001A8   98           SUBB    A,R0
   \   0001A9   E5..         MOV     A,?V0 + 15
   \   0001AB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001AE   5022         JNC     ??_DrawBitmap_565_6
     91                  Diff = GUI_Context.ClipRect.x0-x0;
   \   0001B0   90....       MOV     DPTR,#GUI_Context + 4
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   C3           CLR     C
   \   0001B5   95..         SUBB    A,?V0 + 14
   \   0001B7   F8           MOV     R0,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   95..         SUBB    A,?V0 + 15
   \   0001BC   F9           MOV     R1,A
     92          			  xsize -= Diff;
   \   0001BD   12....       LCALL   ?Subroutine8 & 0xFFFF
     93                  pData += Diff; 
   \                     ??CrossCallReturnLabel_16:
   \   0001C0   E8           MOV     A,R0
   \   0001C1   FA           MOV     R2,A
   \   0001C2   E9           MOV     A,R1
   \   0001C3   FB           MOV     R3,A
   \   0001C4   EA           MOV     A,R2
   \   0001C5   12....       LCALL   ?Subroutine9 & 0xFFFF
     94                  x0 += Diff; 
   \                     ??CrossCallReturnLabel_18:
   \   0001C8   E5..         MOV     A,?V0 + 14
   \   0001CA   28           ADD     A,R0
   \   0001CB   F5..         MOV     ?V0 + 14,A
   \   0001CD   E5..         MOV     A,?V0 + 15
   \   0001CF   39           ADDC    A,R1
   \   0001D0   F5..         MOV     ?V0 + 15,A
     95                }
     96                if (xsize <=0) {
   \                     ??_DrawBitmap_565_6:
   \   0001D2   C3           CLR     C
   \   0001D3   E5..         MOV     A,?V0 + 2
   \   0001D5   9401         SUBB    A,#0x1
   \   0001D7   E5..         MOV     A,?V0 + 3
   \   0001D9   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001DC   5003         JNC     $+5
   \   0001DE   02....       LJMP    ??_DrawBitmap_565_3 & 0xFFFF
     97          		    return;
     98                }
     99                /* Simple, unmagnified output using LCD_L0_SetPixel() */
    100                for (y = 0; y < ysize; y++) {
   \   0001E1   75..00       MOV     ?V0 + 10,#0x0
   \   0001E4   75..00       MOV     ?V0 + 11,#0x0
   \   0001E7   02....       LJMP    ??_DrawBitmap_565_7 & 0xFFFF
    101                  int x;
    102                  const U16 * p = pData;
    103                  for (x = 0; x < xsize; x++) {
    104                    U16 Index;
    105                    Index = *p++;
   \                     ??_DrawBitmap_565_8:
   \   0001EA   85..82       MOV     DPL,?XSP + 0
   \   0001ED   85..83       MOV     DPH,?XSP + 1
   \   0001F0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001F3   F5..         MOV     ?V0 + 0,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   F5..         MOV     ?V0 + 1,A
   \   0001F9   85..82       MOV     DPL,?XSP + 0
   \   0001FC   85..83       MOV     DPH,?XSP + 1
   \   0001FF   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000202   85..82       MOV     DPL,?XSP + 0
   \   000205   85..83       MOV     DPH,?XSP + 1
   \   000208   E8           MOV     A,R0
   \   000209   F0           MOVX    @DPTR,A
   \   00020A   A3           INC     DPTR
   \   00020B   E9           MOV     A,R1
   \   00020C   F0           MOVX    @DPTR,A
    106                    if (Index != PrevIndex) {
   \   00020D   7402         MOV     A,#0x2
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   E0           MOVX    A,@DPTR
   \   000213   65..         XRL     A,?V0 + 0
   \   000215   7004         JNZ     ??_DrawBitmap_565_9
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   65..         XRL     A,?V0 + 1
   \                     ??_DrawBitmap_565_9:
   \   00021B   6011         JZ      ??_DrawBitmap_565_10
    107                      LCD_SetColor(LCD_Index2Color_565(Index));
   \   00021D                ; Setup parameters for call to function LCD_SetColor
   \   00021D                ; Setup parameters for call to function LCD_Index2Color_565
   \   00021D   AA..         MOV     R2,?V0 + 0
   \   00021F   AB..         MOV     R3,?V0 + 1
   \   000221   12....       LCALL   ?Subroutine11 & 0xFFFF
    108                      PrevIndex = Index;
    109                    }
   \                     ??CrossCallReturnLabel_21:
   \   000224   12....       LCALL   ?XSTACK_DISP0_8
   \   000227   E5..         MOV     A,?V0 + 0
   \   000229   F0           MOVX    @DPTR,A
   \   00022A   A3           INC     DPTR
   \   00022B   E5..         MOV     A,?V0 + 1
   \   00022D   F0           MOVX    @DPTR,A
    110                    LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
   \                     ??_DrawBitmap_565_10:
   \   00022E                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   00022E   90....       MOV     DPTR,#GUI_Context + 2
   \   000231   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000234   E5..         MOV     A,?V0 + 10
   \   000236   25..         ADD     A,?V0 + 12
   \   000238   FC           MOV     R4,A
   \   000239   E5..         MOV     A,?V0 + 11
   \   00023B   35..         ADDC    A,?V0 + 13
   \   00023D   FD           MOV     R5,A
   \   00023E   E5..         MOV     A,?V0 + 8
   \   000240   25..         ADD     A,?V0 + 14
   \   000242   FA           MOV     R2,A
   \   000243   E5..         MOV     A,?V0 + 9
   \   000245   35..         ADDC    A,?V0 + 15
   \   000247   FB           MOV     R3,A
   \   000248   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   00024B   7402         MOV     A,#0x2
   \   00024D   12....       LCALL   ?DEALLOC_XSTACK8
    111                  }
   \   000250   E5..         MOV     A,?V0 + 8
   \   000252   2401         ADD     A,#0x1
   \   000254   F5..         MOV     ?V0 + 8,A
   \   000256   E5..         MOV     A,?V0 + 9
   \   000258   3400         ADDC    A,#0x0
   \   00025A   F5..         MOV     ?V0 + 9,A
   \                     ??_DrawBitmap_565_11:
   \   00025C   C3           CLR     C
   \   00025D   E5..         MOV     A,?V0 + 8
   \   00025F   95..         SUBB    A,?V0 + 2
   \   000261   E5..         MOV     A,?V0 + 9
   \   000263   95..         SUBB    A,?V0 + 3
   \   000265   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000267   65D0         XRL     A,PSW
   \   000269   33           RLC     A
   \   00026A   5003         JNC     $+5
   \   00026C   02....       LJMP    ??_DrawBitmap_565_8 & 0xFFFF
    112                  pData += BytesPerLine / 2;
   \   00026F   EE           MOV     A,R6
   \   000270   F8           MOV     R0,A
   \   000271   EF           MOV     A,R7
   \   000272   F9           MOV     R1,A
   \   000273   7A02         MOV     R2,#0x2
   \   000275   7B00         MOV     R3,#0x0
   \   000277   12....       LCALL   ?S_DIV_MOD
   \   00027A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00027D   E5..         MOV     A,?V0 + 10
   \   00027F   2401         ADD     A,#0x1
   \   000281   F5..         MOV     ?V0 + 10,A
   \   000283   E5..         MOV     A,?V0 + 11
   \   000285   3400         ADDC    A,#0x0
   \   000287   F5..         MOV     ?V0 + 11,A
   \                     ??_DrawBitmap_565_7:
   \   000289   C3           CLR     C
   \   00028A   E5..         MOV     A,?V0 + 10
   \   00028C   95..         SUBB    A,?V0 + 4
   \   00028E   E5..         MOV     A,?V0 + 11
   \   000290   95..         SUBB    A,?V0 + 5
   \   000292   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000294   65D0         XRL     A,PSW
   \   000296   33           RLC     A
   \   000297   4003         JC      $+5
   \   000299   02....       LJMP    ??_DrawBitmap_565_12 & 0xFFFF
   \   00029C   85..82       MOV     DPL,?XSP + 0
   \   00029F   85..83       MOV     DPH,?XSP + 1
   \   0002A2   E5..         MOV     A,?V0 + 6
   \   0002A4   F0           MOVX    @DPTR,A
   \   0002A5   A3           INC     DPTR
   \   0002A6   E5..         MOV     A,?V0 + 7
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9   75..00       MOV     ?V0 + 8,#0x0
   \   0002AC   75..00       MOV     ?V0 + 9,#0x0
   \   0002AF   80AB         SJMP    ??_DrawBitmap_565_11
    113                }
    114              } else {
    115                /* Magnified output using LCD_FillRect() */
    116                int x,y;
    117                int yi;
    118                for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
   \                     ??_DrawBitmap_565_5:
   \   0002B1   85....       MOV     ?V0 + 8,?V0 + 12
   \   0002B4   85....       MOV     ?V0 + 9,?V0 + 13
   \   0002B7   85..82       MOV     DPL,?XSP + 0
   \   0002BA   85..83       MOV     DPH,?XSP + 1
   \   0002BD   E4           CLR     A
   \   0002BE   F0           MOVX    @DPTR,A
   \   0002BF   A3           INC     DPTR
   \   0002C0   F0           MOVX    @DPTR,A
   \   0002C1   02....       LJMP    ??_DrawBitmap_565_13 & 0xFFFF
    119                  int yMax;
    120                  yMax = y + yMag - 1;
    121                  /* Draw if within clip area */
    122                  if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
    123                    int xi;
    124                    const U16 GUI_UNI_PTR * p = pData;
    125                    for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
    126                      U16 Index;
    127                      Index = *p++;
   \                     ??_DrawBitmap_565_14:
   \   0002C4   7404         MOV     A,#0x4
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0002CC   F5..         MOV     ?V0 + 12,A
   \   0002CE   A3           INC     DPTR
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F5..         MOV     ?V0 + 13,A
   \   0002D2   7404         MOV     A,#0x4
   \   0002D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D7   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002DA   7404         MOV     A,#0x4
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   E8           MOV     A,R0
   \   0002E0   F0           MOVX    @DPTR,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   E9           MOV     A,R1
   \   0002E3   F0           MOVX    @DPTR,A
    128                      if (Index != PrevIndex) {
   \   0002E4   7402         MOV     A,#0x2
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   65..         XRL     A,?V0 + 12
   \   0002EC   7004         JNZ     ??_DrawBitmap_565_15
   \   0002EE   A3           INC     DPTR
   \   0002EF   E0           MOVX    A,@DPTR
   \   0002F0   65..         XRL     A,?V0 + 13
   \                     ??_DrawBitmap_565_15:
   \   0002F2   6011         JZ      ??_DrawBitmap_565_16
    129                        LCD_SetColor(LCD_Index2Color_565(Index));
   \   0002F4                ; Setup parameters for call to function LCD_SetColor
   \   0002F4                ; Setup parameters for call to function LCD_Index2Color_565
   \   0002F4   AA..         MOV     R2,?V0 + 12
   \   0002F6   AB..         MOV     R3,?V0 + 13
   \   0002F8   12....       LCALL   ?Subroutine11 & 0xFFFF
    130                        PrevIndex = Index;
    131                      }
   \                     ??CrossCallReturnLabel_22:
   \   0002FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FE   E5..         MOV     A,?V0 + 12
   \   000300   F0           MOVX    @DPTR,A
   \   000301   A3           INC     DPTR
   \   000302   E5..         MOV     A,?V0 + 13
   \   000304   F0           MOVX    @DPTR,A
    132                      LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_565_16:
   \   000305                ; Setup parameters for call to function LCD_FillRect
   \   000305   78..         MOV     R0,#?V0 + 0
   \   000307   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00030A   742C         MOV     A,#0x2c
   \   00030C   12....       LCALL   ?XSTACK_DISP0_8
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   25..         ADD     A,?V0 + 10
   \   000312   F8           MOV     R0,A
   \   000313   A3           INC     DPTR
   \   000314   E0           MOVX    A,@DPTR
   \   000315   35..         ADDC    A,?V0 + 11
   \   000317   F9           MOV     R1,A
   \   000318   E8           MOV     A,R0
   \   000319   24FF         ADD     A,#-0x1
   \   00031B   F5..         MOV     ?V0 + 12,A
   \   00031D   E9           MOV     A,R1
   \   00031E   34FF         ADDC    A,#-0x1
   \   000320   F5..         MOV     ?V0 + 13,A
   \   000322   78..         MOV     R0,#?V0 + 12
   \   000324   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000327   AC..         MOV     R4,?V0 + 8
   \   000329   AD..         MOV     R5,?V0 + 9
   \   00032B   AA..         MOV     R2,?V0 + 10
   \   00032D   AB..         MOV     R3,?V0 + 11
   \   00032F   12....       LCALL   ??LCD_FillRect?relay
   \   000332   7404         MOV     A,#0x4
   \   000334   12....       LCALL   ?DEALLOC_XSTACK8
    133                    }
   \   000337   7406         MOV     A,#0x6
   \   000339   12....       LCALL   ?XSTACK_DISP0_8
   \   00033C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00033F   742A         MOV     A,#0x2a
   \   000341   12....       LCALL   ?XSTACK_DISP0_8
   \   000344   E0           MOVX    A,@DPTR
   \   000345   25..         ADD     A,?V0 + 10
   \   000347   F5..         MOV     ?V0 + 10,A
   \   000349   A3           INC     DPTR
   \   00034A   E0           MOVX    A,@DPTR
   \   00034B   35..         ADDC    A,?V0 + 11
   \   00034D   F5..         MOV     ?V0 + 11,A
   \                     ??_DrawBitmap_565_17:
   \   00034F   7406         MOV     A,#0x6
   \   000351   12....       LCALL   ?XSTACK_DISP0_8
   \   000354   C3           CLR     C
   \   000355   E0           MOVX    A,@DPTR
   \   000356   95..         SUBB    A,?V0 + 2
   \   000358   A3           INC     DPTR
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   95..         SUBB    A,?V0 + 3
   \   00035C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00035E   65D0         XRL     A,PSW
   \   000360   33           RLC     A
   \   000361   5003         JNC     $+5
   \   000363   02....       LJMP    ??_DrawBitmap_565_14 & 0xFFFF
    134                  }
    135                  pData += BytesPerLine / 2;
   \                     ??_DrawBitmap_565_18:
   \   000366   EE           MOV     A,R6
   \   000367   F8           MOV     R0,A
   \   000368   EF           MOV     A,R7
   \   000369   F9           MOV     R1,A
   \   00036A   7A02         MOV     R2,#0x2
   \   00036C   7B00         MOV     R3,#0x0
   \   00036E   12....       LCALL   ?S_DIV_MOD
   \   000371   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000374   85..82       MOV     DPL,?XSP + 0
   \   000377   85..83       MOV     DPH,?XSP + 1
   \   00037A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00037D   742C         MOV     A,#0x2c
   \   00037F   12....       LCALL   ?XSTACK_DISP0_8
   \   000382   E0           MOVX    A,@DPTR
   \   000383   25..         ADD     A,?V0 + 8
   \   000385   F5..         MOV     ?V0 + 8,A
   \   000387   A3           INC     DPTR
   \   000388   E0           MOVX    A,@DPTR
   \   000389   35..         ADDC    A,?V0 + 9
   \   00038B   F5..         MOV     ?V0 + 9,A
   \                     ??_DrawBitmap_565_13:
   \   00038D   85..82       MOV     DPL,?XSP + 0
   \   000390   85..83       MOV     DPH,?XSP + 1
   \   000393   C3           CLR     C
   \   000394   E0           MOVX    A,@DPTR
   \   000395   95..         SUBB    A,?V0 + 4
   \   000397   A3           INC     DPTR
   \   000398   E0           MOVX    A,@DPTR
   \   000399   95..         SUBB    A,?V0 + 5
   \   00039B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00039D   65D0         XRL     A,PSW
   \   00039F   33           RLC     A
   \   0003A0   5055         JNC     ??_DrawBitmap_565_12
   \   0003A2   742C         MOV     A,#0x2c
   \   0003A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   25..         ADD     A,?V0 + 8
   \   0003AA   F8           MOV     R0,A
   \   0003AB   A3           INC     DPTR
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   35..         ADDC    A,?V0 + 9
   \   0003AF   F9           MOV     R1,A
   \   0003B0   E8           MOV     A,R0
   \   0003B1   24FF         ADD     A,#-0x1
   \   0003B3   F5..         MOV     ?V0 + 0,A
   \   0003B5   E9           MOV     A,R1
   \   0003B6   34FF         ADDC    A,#-0x1
   \   0003B8   F5..         MOV     ?V0 + 1,A
   \   0003BA   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0003BD   E5..         MOV     A,?V0 + 0
   \   0003BF   98           SUBB    A,R0
   \   0003C0   E5..         MOV     A,?V0 + 1
   \   0003C2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0003C5   409F         JC      ??_DrawBitmap_565_18
   \   0003C7   90....       MOV     DPTR,#GUI_Context + 10
   \   0003CA   C3           CLR     C
   \   0003CB   E0           MOVX    A,@DPTR
   \   0003CC   95..         SUBB    A,?V0 + 8
   \   0003CE   A3           INC     DPTR
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   95..         SUBB    A,?V0 + 9
   \   0003D2   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003D4   65D0         XRL     A,PSW
   \   0003D6   33           RLC     A
   \   0003D7   408D         JC      ??_DrawBitmap_565_18
   \   0003D9   7404         MOV     A,#0x4
   \   0003DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DE   E5..         MOV     A,?V0 + 6
   \   0003E0   F0           MOVX    @DPTR,A
   \   0003E1   A3           INC     DPTR
   \   0003E2   E5..         MOV     A,?V0 + 7
   \   0003E4   F0           MOVX    @DPTR,A
   \   0003E5   85....       MOV     ?V0 + 10,?V0 + 14
   \   0003E8   85....       MOV     ?V0 + 11,?V0 + 15
   \   0003EB   7406         MOV     A,#0x6
   \   0003ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F0   E4           CLR     A
   \   0003F1   F0           MOVX    @DPTR,A
   \   0003F2   A3           INC     DPTR
   \   0003F3   F0           MOVX    @DPTR,A
   \   0003F4   02....       LJMP    ??_DrawBitmap_565_17 & 0xFFFF
    136                }
    137              }
    138              GUI_SetColorIndex(OldIndex);
   \                     ??_DrawBitmap_565_12:
   \   0003F7                ; Setup parameters for call to function GUI_SetColorIndex
   \   0003F7   7408         MOV     A,#0x8
   \   0003F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FC   E0           MOVX    A,@DPTR
   \   0003FD   FA           MOV     R2,A
   \   0003FE   A3           INC     DPTR
   \   0003FF   E0           MOVX    A,@DPTR
   \   000400   FB           MOV     R3,A
   \   000401   12....       LCALL   ??GUI_SetColorIndex?relay
   \                     ??_DrawBitmap_565_3:
   \   000404   740A         MOV     A,#0xa
   \   000406   12....       LCALL   ?DEALLOC_XSTACK8
   \   000409   7F10         MOV     R7,#0x10
   \   00040B   02....       LJMP    ?BANKED_LEAVE_XDATA
    139            }
    140          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??LCD_Index2Color_565?relay
   \   000003   12....       LCALL   ??LCD_SetColor?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   F8           MOV     R0,A
   \   000004   E9           MOV     A,R1
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   E5..         MOV     A,?V0 + 6
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V0 + 6,A
   \   00000C   E5..         MOV     A,?V0 + 7
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V0 + 7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   EB           MOV     A,R3
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   E5..         MOV     A,?V0 + 6
   \   000008   2A           ADD     A,R2
   \   000009   F5..         MOV     ?V0 + 6,A
   \   00000B   E5..         MOV     A,?V0 + 7
   \   00000D   3B           ADDC    A,R3
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 2
   \   000003   98           SUBB    A,R0
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   99           SUBB    A,R1
   \   000009   F5..         MOV     ?V0 + 3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 4
   \   000003   98           SUBB    A,R0
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   99           SUBB    A,R1
   \   000009   F5..         MOV     ?V0 + 5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   99           SUBB    A,R1
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   99           SUBB    A,R1
   \   000001   F9           MOV     R1,A
   \   000002   C3           CLR     C
   \   000003   E8           MOV     A,R0
   \   000004   9401         SUBB    A,#0x1
   \   000006   E9           MOV     A,R1
   \   000007                REQUIRE ??Subroutine12_0
   \   000007                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#GUI_Context + 6
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   C3           CLR     C
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    141          
    142          /*********************************************************************
    143          *
    144          *       Public data
    145          *
    146          **********************************************************************
    147          */
    148          /*********************************************************************
    149          *
    150          *       GUI_BitmapMethods565
    151          */

   \                                 In  segment XDATA_ROM_C, align 1
    152          const GUI_BITMAP_METHODS GUI_BitmapMethods565 = {
   \                     GUI_BitmapMethods565:
   \   000000   ....         DW ??_DrawBitmap_565?relay
   \   000002   ....         DW ??LCD_Index2Color_565?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap_565?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap_565
    153            _DrawBitmap_565,
    154            LCD_Index2Color_565
    155          };
    156          
    157          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     _DrawBitmap_565                0      0     62
       -> LCD_GetColorIndex         0      0     68
       -> LCD_GetFixedPaletteEx     0      0     68
       -> LCD_GetSwapRBEx           0      0     68
       -> LCD_DrawBitmap            0      0    100
       -> LCD_Index2Color_565       0      0     68
       -> LCD_SetColor              0      0     68
       -> LCD_L0_SetPixelIndex      0      0     72
       -> LCD_Index2Color_565       0      0     68
       -> LCD_SetColor              0      0     68
       -> LCD_FillRect              0      0     76
       -> GUI_SetColorIndex         0      0     68


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     _DrawBitmap_565         1038
     ?Subroutine11              9
     ?Subroutine10             18
     ?Subroutine9              17
     ?Subroutine8              12
     ?Subroutine7              12
     ?Subroutine6               7
     ?Subroutine5               7
     ??Subroutine12_0           8
     ?Subroutine4              10
     ?Subroutine3              10
     ?Subroutine2               6
     ?Subroutine1               3
     ??Subroutine13_0           7
     ?Subroutine0              11
     GUI_BitmapMethods565       4
     ??_DrawBitmap_565?relay    6

 
 1 175 bytes in segment BANKED_CODE
     6 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_ROM_C
 
 1 181 bytes of CODE  memory
     4 bytes of CONST memory

Errors: none
Warnings: none
