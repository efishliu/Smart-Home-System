###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:54 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCD_Rotate180.c                                  #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCD_Rotate180.c -D        #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCD_Ro #
#                          tate180.lst                                        #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCD_Rot #
#                          ate180.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_Rotate180.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_Rotate180.c
     16          Purpose     : Implementation of GUI_SetRotation
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI_Private.h"
     21          #include "LCD.h"
     22          #if GUI_WINSUPPORT
     23            #include "WM.h"
     24          #endif
     25          
     26          #if GUI_SUPPORT_ROTATION
     27          
     28          /*********************************************************************
     29          *
     30          *       Static code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       _DrawBitLine1BPP
     37          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
   \                     _DrawBitLine1BPP:
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 6,R4
   \   000007   8D..         MOV     ?V0 + 7,R5
   \   000009   7416         MOV     A,#0x16
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 1,A
   \   000015   7418         MOV     A,#0x18
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FE           MOV     R6,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FF           MOV     R7,A
   \   00001F   741A         MOV     A,#0x1a
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 3,A
   \   00002B   741C         MOV     A,#0x1c
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine10_0 & 0xFFFF
     39            LCD_PIXELINDEX Index0 = *(pTrans+0);
   \                     ??CrossCallReturnLabel_25:
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0 + 8,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V0 + 9,A
     40            LCD_PIXELINDEX Index1 = *(pTrans+1);
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 10,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 11,A
     41            x -= Diff;
   \   00004B   C3           CLR     C
   \   00004C   EA           MOV     A,R2
   \   00004D   9E           SUBB    A,R6
   \   00004E   F5..         MOV     ?V0 + 4,A
   \   000050   EB           MOV     A,R3
   \   000051   9F           SUBB    A,R7
   \   000052   F5..         MOV     ?V0 + 5,A
     42            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   000054   90....       MOV     DPTR,#GUI_Context + 12
   \   000057   E0           MOVX    A,@DPTR
   \   000058   5403         ANL     A,#0x3
   \   00005A   600C         JZ      ??_DrawBitLine1BPP_0
   \   00005C   14           DEC     A
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??_DrawBitLine1BPP_1 & 0xFFFF
   \   000062   14           DEC     A
   \   000063   605E         JZ      ??_DrawBitLine1BPP_2
   \   000065   02....       LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
     43            case 0:
     44              do {
     45                LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
   \                     ??_DrawBitLine1BPP_0:
   \   000068   75..80       MOV     ?V0 + 12,#-0x80
   \   00006B   75..00       MOV     ?V0 + 13,#0x0
   \   00006E   EE           MOV     A,R6
   \   00006F   78..         MOV     R0,#?V0 + 12
   \   000071   12....       LCALL   ?SS_SHR
   \   000074   85..82       MOV     DPL,?V0 + 0
   \   000077   85..83       MOV     DPH,?V0 + 1
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   55..         ANL     A,?V0 + 12
   \   00007D   6008         JZ      ??_DrawBitLine1BPP_4
   \   00007F   85....       MOV     ?V0 + 12,?V0 + 10
   \   000082   85....       MOV     ?V0 + 13,?V0 + 11
   \   000085   8006         SJMP    ??_DrawBitLine1BPP_5
   \                     ??_DrawBitLine1BPP_4:
   \   000087   85....       MOV     ?V0 + 12,?V0 + 8
   \   00008A   85....       MOV     ?V0 + 13,?V0 + 9
   \                     ??_DrawBitLine1BPP_5:
   \   00008D                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   00008D   78..         MOV     R0,#?V0 + 12
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   AC..         MOV     R4,?V0 + 6
   \   000094   AD..         MOV     R5,?V0 + 7
   \   000096   AA..         MOV     R2,?V0 + 4
   \   000098   AB..         MOV     R3,?V0 + 5
   \   00009A   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   12....       LCALL   ?Subroutine6 & 0xFFFF
     46          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_7:
   \   0000A5   7001         JNZ     ??_DrawBitLine1BPP_6
   \   0000A7   EF           MOV     A,R7
   \                     ??_DrawBitLine1BPP_6:
   \   0000A8   7011         JNZ     ??_DrawBitLine1BPP_7
     47                  Diff = 0;
   \   0000AA   7E00         MOV     R6,#0x0
   \   0000AC   7F00         MOV     R7,#0x0
     48          				p++;
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   A3           INC     DPTR
   \   0000B5   8582..       MOV     ?V0 + 0,DPL
   \   0000B8   8583..       MOV     ?V0 + 1,DPH
     49          			}
     50          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_7:
   \   0000BB   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000BE   70A8         JNZ     ??_DrawBitLine1BPP_0
   \   0000C0   02....       LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
     51              break;
     52            case LCD_DRAWMODE_TRANS:
     53              do {
     54            		if (*p & (0x80 >> Diff))
   \                     ??_DrawBitLine1BPP_2:
   \   0000C3   75..80       MOV     ?V0 + 8,#-0x80
   \   0000C6   75..00       MOV     ?V0 + 9,#0x0
   \   0000C9   EE           MOV     A,R6
   \   0000CA   78..         MOV     R0,#?V0 + 8
   \   0000CC   12....       LCALL   ?SS_SHR
   \   0000CF   85..82       MOV     DPL,?V0 + 0
   \   0000D2   85..83       MOV     DPH,?V0 + 1
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   55..         ANL     A,?V0 + 8
   \   0000D8   6015         JZ      ??_DrawBitLine1BPP_8
     55                  LCDDEV_L0_SetPixelIndex(x, y, Index1);
   \   0000DA                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   0000DA   78..         MOV     R0,#?V0 + 10
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   AC..         MOV     R4,?V0 + 6
   \   0000E1   AD..         MOV     R5,?V0 + 7
   \   0000E3   AA..         MOV     R2,?V0 + 4
   \   0000E5   AB..         MOV     R3,?V0 + 5
   \   0000E7   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
     56                x--;
   \                     ??_DrawBitLine1BPP_8:
   \   0000EF   12....       LCALL   ?Subroutine6 & 0xFFFF
     57          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_8:
   \   0000F2   7001         JNZ     ??_DrawBitLine1BPP_9
   \   0000F4   EF           MOV     A,R7
   \                     ??_DrawBitLine1BPP_9:
   \   0000F5   7011         JNZ     ??_DrawBitLine1BPP_10
     58                  Diff = 0;
   \   0000F7   7E00         MOV     R6,#0x0
   \   0000F9   7F00         MOV     R7,#0x0
     59          				p++;
   \   0000FB   85..82       MOV     DPL,?V0 + 0
   \   0000FE   85..83       MOV     DPH,?V0 + 1
   \   000101   A3           INC     DPTR
   \   000102   8582..       MOV     ?V0 + 0,DPL
   \   000105   8583..       MOV     ?V0 + 1,DPH
     60          			}
     61          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_10:
   \   000108   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010B   70B6         JNZ     ??_DrawBitLine1BPP_2
   \   00010D   8066         SJMP    ??_DrawBitLine1BPP_3
     62              break;
     63            case LCD_DRAWMODE_XOR:;
     64              do {
     65            		if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_1:
   \   00010F   75..80       MOV     ?V0 + 8,#-0x80
   \   000112   75..00       MOV     ?V0 + 9,#0x0
   \   000115   EE           MOV     A,R6
   \   000116   78..         MOV     R0,#?V0 + 8
   \   000118   12....       LCALL   ?SS_SHR
   \   00011B   85..82       MOV     DPL,?V0 + 0
   \   00011E   85..83       MOV     DPH,?V0 + 1
   \   000121   E0           MOVX    A,@DPTR
   \   000122   55..         ANL     A,?V0 + 8
   \   000124   6031         JZ      ??_DrawBitLine1BPP_11
     66                  int Pixel = LCD_L0_GetPixelIndex(x, y);
     67                  LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
   \   000126                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   000126                ; Setup parameters for call to function LCD_L0_GetPixelIndex
   \   000126   AC..         MOV     R4,?V0 + 6
   \   000128   AD..         MOV     R5,?V0 + 7
   \   00012A   AA..         MOV     R2,?V0 + 4
   \   00012C   AB..         MOV     R3,?V0 + 5
   \   00012E   12....       LCALL   ??LCD_L0_GetPixelIndex?relay
   \   000131   8A..         MOV     ?V0 + 8,R2
   \   000133   8B..         MOV     ?V0 + 9,R3
   \   000135   74FF         MOV     A,#-0x1
   \   000137   C3           CLR     C
   \   000138   95..         SUBB    A,?V0 + 8
   \   00013A   F5..         MOV     ?V0 + 8,A
   \   00013C   74FF         MOV     A,#-0x1
   \   00013E   95..         SUBB    A,?V0 + 9
   \   000140   F5..         MOV     ?V0 + 9,A
   \   000142   78..         MOV     R0,#?V0 + 8
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   AC..         MOV     R4,?V0 + 6
   \   000149   AD..         MOV     R5,?V0 + 7
   \   00014B   AA..         MOV     R2,?V0 + 4
   \   00014D   AB..         MOV     R3,?V0 + 5
   \   00014F   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   000152   7402         MOV     A,#0x2
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
     68                }
     69                x--;
   \                     ??_DrawBitLine1BPP_11:
   \   000157   12....       LCALL   ?Subroutine6 & 0xFFFF
     70          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_9:
   \   00015A   7001         JNZ     ??_DrawBitLine1BPP_12
   \   00015C   EF           MOV     A,R7
   \                     ??_DrawBitLine1BPP_12:
   \   00015D   7011         JNZ     ??_DrawBitLine1BPP_13
     71                  Diff = 0;
   \   00015F   7E00         MOV     R6,#0x0
   \   000161   7F00         MOV     R7,#0x0
     72          				p++;
   \   000163   85..82       MOV     DPL,?V0 + 0
   \   000166   85..83       MOV     DPH,?V0 + 1
   \   000169   A3           INC     DPTR
   \   00016A   8582..       MOV     ?V0 + 0,DPL
   \   00016D   8583..       MOV     ?V0 + 1,DPH
     73          			}
     74          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_13:
   \   000170   12....       LCALL   ?Subroutine7 & 0xFFFF
     75              break;
     76          	}
   \                     ??CrossCallReturnLabel_12:
   \   000173   709A         JNZ     ??_DrawBitLine1BPP_1
     77          }
   \                     ??_DrawBitLine1BPP_3:
   \   000175   7F0E         MOV     R7,#0xe
   \   000177   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   E5..         MOV     A,?V0 + 2
   \   00000E   45..         ORL     A,?V0 + 3
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2401         ADD     A,#0x1
   \   00000F   0E           INC     R6
   \   000010   EF           MOV     A,R7
   \   000011   3400         ADDC    A,#0x0
   \   000013   FF           MOV     R7,A
   \   000014   7408         MOV     A,#0x8
   \   000016   6E           XRL     A,R6
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
     78          
     79          /*********************************************************************
     80          *
     81          *       _DrawBitmap
     82          *
     83          * Purpose:
     84          *   Draws a bitmap (1bpp) rotated by 180 degrees.
     85          */
     86          static void _DrawBitmap(int x0, int y0,
     87                                 int xsize, int ysize,
     88                                 int BitsPerPixel, 
     89                                 int BytesPerLine,
     90                                 const U8 GUI_UNI_PTR * pData, int Diff,
     91                                 const LCD_PIXELINDEX* pTrans)
     92          {
     93            int i;
     94            /* Use _DrawBitLineXBPP */
     95            for (i = 0; i < ysize; i++) {
     96              switch (BitsPerPixel) {
     97              case 1:
     98                _DrawBitLine1BPP(x0, y0 - i, pData, Diff, xsize, pTrans);
     99                break;
    100              }
    101              pData += BytesPerLine;
    102            }
    103          }
    104          
    105          /*********************************************************************
    106          *
    107          *       _Rect2TextRect
    108          *
    109          * Purpose:
    110          *   This function transforms a given rectangle (window coordinates)
    111          *   to the rectangle used to clip the text.
    112          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          static void _Rect2TextRect(GUI_RECT * pRect) {
   \                     _Rect2TextRect:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    114            GUI_USE_PARA(pRect);
    115            /* nothing to do in case of rotating text by 180 degrees */
    116          }
   \   000000   02....       LJMP    ?BRET
    117          
    118          /*********************************************************************
    119          *
    120          *       _TransformPoint180
    121          *
    122          * Purpose:
    123          *   This function transforms an unrotated point (window
    124          *   coordinates) into a rotated point in desktop coordinates
    125          *   and handles the rotation of the current text rectangle.
    126          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          static void _TransformPoint180(int * pXPos, int * pYPos) {
   \                     _TransformPoint180:
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    128            GUI_RECT ClientRect = {0};
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001F   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000022   7408         MOV     A,#0x8
   \   000024   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    129            int xPos, yPos, xNumPixel, yNumPixel;
    130            /* Get the client rectangle */
    131            #if GUI_WINSUPPORT
    132              WM_GetWindowRect(&ClientRect);
    133            #else
    134              GUI_GetClientRect(&ClientRect);
   \   000027                ; Setup parameters for call to function GUI_GetClientRect
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   12....       LCALL   ??GUI_GetClientRect?relay
    135            #endif
    136            xNumPixel = LCD_GetXSize() - 1;
   \   000034                ; Setup parameters for call to function LCD_GetXSize
   \   000034   12....       LCALL   ??LCD_GetXSize?relay
   \   000037   EA           MOV     A,R2
   \   000038   24FF         ADD     A,#-0x1
   \   00003A   F5..         MOV     ?V0 + 2,A
   \   00003C   EB           MOV     A,R3
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V0 + 3,A
    137            yNumPixel = LCD_GetYSize() - 1;
   \   000041                ; Setup parameters for call to function LCD_GetYSize
   \   000041   12....       LCALL   ??LCD_GetYSize?relay
   \   000044   EA           MOV     A,R2
   \   000045   24FF         ADD     A,#-0x1
   \   000047   F8           MOV     R0,A
   \   000048   EB           MOV     A,R3
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F9           MOV     R1,A
    138            if (ClientRect.x1 > xNumPixel) {
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FB           MOV     R3,A
   \   000056   C3           CLR     C
   \   000057   E5..         MOV     A,?V0 + 2
   \   000059   9A           SUBB    A,R2
   \   00005A   E5..         MOV     A,?V0 + 3
   \   00005C   9B           SUBB    A,R3
   \   00005D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005F   65D0         XRL     A,PSW
   \   000061   33           RLC     A
   \   000062   500C         JNC     ??_TransformPoint180_0
    139              ClientRect.x1 = xNumPixel;
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E5..         MOV     A,?V0 + 2
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E5..         MOV     A,?V0 + 3
   \   00006F   F0           MOVX    @DPTR,A
    140            }
    141            if (ClientRect.y1 > yNumPixel) {
   \                     ??_TransformPoint180_0:
   \   000070   7406         MOV     A,#0x6
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FA           MOV     R2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FB           MOV     R3,A
   \   00007A   C3           CLR     C
   \   00007B   E8           MOV     A,R0
   \   00007C   9A           SUBB    A,R2
   \   00007D   E9           MOV     A,R1
   \   00007E   9B           SUBB    A,R3
   \   00007F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000081   65D0         XRL     A,PSW
   \   000083   33           RLC     A
   \   000084   5008         JNC     ??CrossCallReturnLabel_17
    142              ClientRect.y1 = yNumPixel;
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?Subroutine9 & 0xFFFF
    143            }
    144            /* Save old positions */
    145            xPos = *pXPos;
    146            yPos = *pYPos;
   \                     ??CrossCallReturnLabel_17:
   \   00008E   85..82       MOV     DPL,?V0 + 0
   \   000091   85..83       MOV     DPH,?V0 + 1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FD           MOV     R5,A
    147            /* Handle rotation of text rectangle */
    148            *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A2   90....       MOV     DPTR,#GUI_RectDispString + 4
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   28           ADD     A,R0
   \   0000A7   FA           MOV     R2,A
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   39           ADDC    A,R1
   \   0000AB   FB           MOV     R3,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000B3   EA           MOV     A,R2
   \   0000B4   C3           CLR     C
   \   0000B5   98           SUBB    A,R0
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EB           MOV     A,R3
   \   0000B8   99           SUBB    A,R1
   \   0000B9   F9           MOV     R1,A
   \   0000BA   90....       MOV     DPTR,#GUI_RectDispString
   \   0000BD   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   12....       LCALL   ?Subroutine8 & 0xFFFF
    149            *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
   \                     ??CrossCallReturnLabel_13:
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000CD   90....       MOV     DPTR,#GUI_RectDispString + 6
   \   0000D0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D3   C3           CLR     C
   \   0000D4   9C           SUBB    A,R4
   \   0000D5   F8           MOV     R0,A
   \   0000D6   E9           MOV     A,R1
   \   0000D7   9D           SUBB    A,R5
   \   0000D8   F9           MOV     R1,A
   \   0000D9   90....       MOV     DPTR,#GUI_RectDispString + 2
   \   0000DC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000DF   85..82       MOV     DPL,?V0 + 0
   \   0000E2   85..83       MOV     DPH,?V0 + 1
   \   0000E5   12....       LCALL   ?Subroutine9 & 0xFFFF
    150          }
   \                     ??CrossCallReturnLabel_18:
   \   0000E8   7408         MOV     A,#0x8
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   7F06         MOV     R7,#0x6
   \   0000EF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   22           RET
    151          
    152          /*********************************************************************
    153          *
    154          *       _DrawBitmap180
    155          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#GUI_Context + 6
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
   \                     _DrawBitmap180:
    157                                     int BitsPerPixel, int BytesPerLine,
    158                                     const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
    159          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   742A         MOV     A,#0x2a
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FE           MOV     R6,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FF           MOV     R7,A
   \   000029   742C         MOV     A,#0x2c
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 4,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0 + 5,A
   \   000035   7432         MOV     A,#0x32
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 8,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 9,A
   \   000041   7434         MOV     A,#0x34
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V0 + 10,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 11,A
    160            U8  Data = 0;
   \   00004D   75..00       MOV     ?V0 + 14,#0x0
    161            int x1, y1;
    162            /* Handle the optional Y-magnification */
    163            y1 = y0 + ysize - 1;
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   25..         ADD     A,?V0 + 4
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   35..         ADDC    A,?V0 + 5
   \   00005E   F9           MOV     R1,A
   \   00005F   E8           MOV     A,R0
   \   000060   24FF         ADD     A,#-0x1
   \   000062   18           DEC     R0
   \   000063   E9           MOV     A,R1
   \   000064   34FF         ADDC    A,#-0x1
   \   000066   F9           MOV     R1,A
   \   000067   740C         MOV     A,#0xc
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine8 & 0xFFFF
    164            x1 = x0 + xsize - 1;
   \                     ??CrossCallReturnLabel_14:
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   2E           ADD     A,R6
   \   000074   F8           MOV     R0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   3F           ADDC    A,R7
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   24FF         ADD     A,#-0x1
   \   00007C   18           DEC     R0
   \   00007D   E9           MOV     A,R1
   \   00007E   34FF         ADDC    A,#-0x1
   \   000080   F9           MOV     R1,A
   \   000081   740A         MOV     A,#0xa
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ?Subroutine9 & 0xFFFF
    165            /* Rotate positions */
    166            _TransformPoint180(&x0, &y0);
   \                     ??CrossCallReturnLabel_19:
   \   000089                ; Setup parameters for call to function _TransformPoint180
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   12....       LCALL   ??_TransformPoint180?relay
    167            _TransformPoint180(&x1, &y1);
   \   00009F                ; Setup parameters for call to function _TransformPoint180
   \   00009F   740C         MOV     A,#0xc
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   AC82         MOV     R4,DPL
   \   0000A6   AD83         MOV     R5,DPH
   \   0000A8   740A         MOV     A,#0xa
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   AA82         MOV     R2,DPL
   \   0000AF   AB83         MOV     R3,DPH
   \   0000B1   12....       LCALL   ??_TransformPoint180?relay
    168            /*  Handle BITMAP without magnification */
    169            if ((xMul == 1) && (yMul == 1)) {
   \   0000B4   742E         MOV     A,#0x2e
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6401         XRL     A,#0x1
   \   0000BC   7002         JNZ     ??_DrawBitmap180_0
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \                     ??_DrawBitmap180_0:
   \   0000C0   6003         JZ      $+5
   \   0000C2   02....       LJMP    ??_DrawBitmap180_1 & 0xFFFF
   \   0000C5   7430         MOV     A,#0x30
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   6401         XRL     A,#0x1
   \   0000CD   7002         JNZ     ??_DrawBitmap180_2
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \                     ??_DrawBitmap180_2:
   \   0000D1   6003         JZ      $+5
   \   0000D3   02....       LJMP    ??_DrawBitmap180_1 & 0xFFFF
    170              int Diff;
    171              /* Clip top */
    172              if (y0 > GUI_Context.ClipRect.y1) {
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000DF   5051         JNC     ??_DrawBitmap180_3
    173                int Diff = y0 - GUI_Context.ClipRect.y1;
   \   0000E1   90....       MOV     DPTR,#GUI_Context + 10
   \   0000E4   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   C3           CLR     C
   \   0000EF   98           SUBB    A,R0
   \   0000F0   FA           MOV     R2,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   99           SUBB    A,R1
   \   0000F4   FB           MOV     R3,A
    174                y0       = GUI_Context.ClipRect.y1;
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   12....       LCALL   ?Subroutine9 & 0xFFFF
    175                pPixel  += Diff * BytesPerLine;
   \                     ??CrossCallReturnLabel_20:
   \   0000FE   EA           MOV     A,R2
   \   0000FF   F8           MOV     R0,A
   \   000100   EB           MOV     A,R3
   \   000101   F9           MOV     R1,A
   \   000102   E8           MOV     A,R0
   \   000103   85..F0       MOV     B,?V0 + 10
   \   000106   A4           MUL     AB
   \   000107   C8           XCH     A,R0
   \   000108   ACF0         MOV     R4,B
   \   00010A   85..F0       MOV     B,?V0 + 11
   \   00010D   A4           MUL     AB
   \   00010E   2C           ADD     A,R4
   \   00010F   FC           MOV     R4,A
   \   000110   85..F0       MOV     B,?V0 + 10
   \   000113   E9           MOV     A,R1
   \   000114   A4           MUL     AB
   \   000115   2C           ADD     A,R4
   \   000116   F9           MOV     R1,A
   \   000117   7436         MOV     A,#0x36
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00011F   7436         MOV     A,#0x36
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   12....       LCALL   ?Subroutine9 & 0xFFFF
    176                ysize   -= Diff;
   \                     ??CrossCallReturnLabel_21:
   \   000127   C3           CLR     C
   \   000128   E5..         MOV     A,?V0 + 4
   \   00012A   9A           SUBB    A,R2
   \   00012B   F5..         MOV     ?V0 + 4,A
   \   00012D   E5..         MOV     A,?V0 + 5
   \   00012F   9B           SUBB    A,R3
   \   000130   F5..         MOV     ?V0 + 5,A
    177              }
    178              /* Clip bottom */
    179              if (y1 < GUI_Context.ClipRect.y0) {
   \                     ??_DrawBitmap180_3:
   \   000132   740C         MOV     A,#0xc
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   C082         PUSH    DPL
   \   000139   C083         PUSH    DPH
   \   00013B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00013E   D083         POP     DPH
   \   000140   D082         POP     DPL
   \   000142   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000145   5017         JNC     ??_DrawBitmap180_4
    180                int Diff = GUI_Context.ClipRect.y0 - y1;
    181                ysize -= Diff;
   \   000147   E5..         MOV     A,?V0 + 4
   \   000149   C3           CLR     C
   \   00014A   98           SUBB    A,R0
   \   00014B   F8           MOV     R0,A
   \   00014C   E5..         MOV     A,?V0 + 5
   \   00014E   99           SUBB    A,R1
   \   00014F   F9           MOV     R1,A
   \   000150   740C         MOV     A,#0xc
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   28           ADD     A,R0
   \   000157   F5..         MOV     ?V0 + 4,A
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   39           ADDC    A,R1
   \   00015C   F5..         MOV     ?V0 + 5,A
    182              }
    183              if (ysize <= 0) {
   \                     ??_DrawBitmap180_4:
   \   00015E   C3           CLR     C
   \   00015F   E5..         MOV     A,?V0 + 4
   \   000161   9401         SUBB    A,#0x1
   \   000163   E5..         MOV     A,?V0 + 5
   \   000165   9400         SUBB    A,#0x0
   \   000167   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000169   65D0         XRL     A,PSW
   \   00016B   33           RLC     A
   \   00016C   5003         JNC     $+5
   \   00016E   02....       LJMP    ??_DrawBitmap180_5 & 0xFFFF
    184          		  return;
    185              }
    186              /* Clip right side */
    187              if (x1 < GUI_Context.ClipRect.x0) {
   \   000171   740A         MOV     A,#0xa
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   C082         PUSH    DPL
   \   000178   C083         PUSH    DPH
   \   00017A   90....       MOV     DPTR,#GUI_Context + 4
   \   00017D   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000180   D083         POP     DPH
   \   000182   D082         POP     DPL
   \   000184   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000187   5013         JNC     ??_DrawBitmap180_6
    188                int Diff = GUI_Context.ClipRect.x0 - x1;
    189                xsize   -= Diff;
   \   000189   EE           MOV     A,R6
   \   00018A   C3           CLR     C
   \   00018B   98           SUBB    A,R0
   \   00018C   F8           MOV     R0,A
   \   00018D   EF           MOV     A,R7
   \   00018E   99           SUBB    A,R1
   \   00018F   F9           MOV     R1,A
   \   000190   740A         MOV     A,#0xa
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   E0           MOVX    A,@DPTR
   \   000196   28           ADD     A,R0
   \   000197   FE           MOV     R6,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   39           ADDC    A,R1
   \   00019B   FF           MOV     R7,A
    190              }
    191              /* Clip left side */
    192              Diff = 0;
   \                     ??_DrawBitmap180_6:
   \   00019C   75..00       MOV     ?V0 + 6,#0x0
   \   00019F   75..00       MOV     ?V0 + 7,#0x0
    193              if (x0 > GUI_Context.ClipRect.x1) {
   \   0001A2   7402         MOV     A,#0x2
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001AA   7583..       MOV     DPH,#((GUI_Context + 8) >> 8) & 0xff
   \   0001AD   7582..       MOV     DPL,#(GUI_Context + 8) & 0xff
   \   0001B0   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001B3   506F         JNC     ??_DrawBitmap180_7
    194                Diff   = x0 - GUI_Context.ClipRect.x1;
   \   0001B5   7402         MOV     A,#0x2
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   C082         PUSH    DPL
   \   0001BC   C083         PUSH    DPH
   \   0001BE   90....       MOV     DPTR,#GUI_Context + 8
   \   0001C1   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001C4   D083         POP     DPH
   \   0001C6   D082         POP     DPL
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   C3           CLR     C
   \   0001CA   98           SUBB    A,R0
   \   0001CB   F5..         MOV     ?V0 + 6,A
   \   0001CD   A3           INC     DPTR
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   99           SUBB    A,R1
   \   0001D0   F5..         MOV     ?V0 + 7,A
    195          			xsize -= Diff;
   \   0001D2   C3           CLR     C
   \   0001D3   EE           MOV     A,R6
   \   0001D4   95..         SUBB    A,?V0 + 6
   \   0001D6   FE           MOV     R6,A
   \   0001D7   EF           MOV     A,R7
   \   0001D8   95..         SUBB    A,?V0 + 7
   \   0001DA   FF           MOV     R7,A
    196          			switch (BitsPerPixel) {
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   65..         XRL     A,?V0 + 8
   \   0001DF   7002         JNZ     ??_DrawBitmap180_8
   \   0001E1   E5..         MOV     A,?V0 + 9
   \                     ??_DrawBitmap180_8:
   \   0001E3   703F         JNZ     ??_DrawBitmap180_7
    197          			case 1:
    198            			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
   \   0001E5   85....       MOV     ?V0 + 0,?V0 + 6
   \   0001E8   85....       MOV     ?V0 + 1,?V0 + 7
   \   0001EB   7403         MOV     A,#0x3
   \   0001ED   78..         MOV     R0,#?V0 + 0
   \   0001EF   12....       LCALL   ?SS_SHR
   \   0001F2   7436         MOV     A,#0x36
   \   0001F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   25..         ADD     A,?V0 + 0
   \   0001FA   F8           MOV     R0,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   35..         ADDC    A,?V0 + 1
   \   0001FF   F9           MOV     R1,A
   \   000200   7436         MOV     A,#0x36
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000208   E5..         MOV     A,?V0 + 6
   \   00020A   54F8         ANL     A,#0xf8
   \   00020C   F8           MOV     R0,A
   \   00020D   A9..         MOV     R1,?V0 + 7
   \   00020F   7402         MOV     A,#0x2
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   E0           MOVX    A,@DPTR
   \   000215   28           ADD     A,R0
   \   000216   F0           MOVX    @DPTR,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   39           ADDC    A,R1
   \   00021A   F0           MOVX    @DPTR,A
   \   00021B   7407         MOV     A,#0x7
   \   00021D   55..         ANL     A,?V0 + 6
   \   00021F   F5..         MOV     ?V0 + 6,A
   \   000221   75..00       MOV     ?V0 + 7,#0x0
    199          				break;
    200          			}
    201              }
    202              if (xsize <= 0) {
   \                     ??_DrawBitmap180_7:
   \   000224   C3           CLR     C
   \   000225   EE           MOV     A,R6
   \   000226   9401         SUBB    A,#0x1
   \   000228   EF           MOV     A,R7
   \   000229   9400         SUBB    A,#0x0
   \   00022B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00022D   65D0         XRL     A,PSW
   \   00022F   33           RLC     A
   \   000230   5003         JNC     $+5
   \   000232   02....       LJMP    ??_DrawBitmap180_5 & 0xFFFF
    203          		  return;
    204              }
    205              _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
   \   000235   7436         MOV     A,#0x36
   \   000237   12....       LCALL   ?XSTACK_DISP0_8
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   F5..         MOV     ?V0 + 12,A
   \   00023D   A3           INC     DPTR
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   F5..         MOV     ?V0 + 13,A
   \   000241   12....       LCALL   ?Subroutine1 & 0xFFFF
    206            } else {
   \                     ??CrossCallReturnLabel_43:
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   F5..         MOV     ?V0 + 2,A
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F5..         MOV     ?V0 + 3,A
   \   000254   75..00       MOV     ?V0 + 0,#0x0
   \   000257   75..00       MOV     ?V0 + 1,#0x0
   \                     ??_DrawBitmap180_9:
   \   00025A   C3           CLR     C
   \   00025B   E5..         MOV     A,?V0 + 0
   \   00025D   95..         SUBB    A,?V0 + 4
   \   00025F   E5..         MOV     A,?V0 + 1
   \   000261   95..         SUBB    A,?V0 + 5
   \   000263   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000265   65D0         XRL     A,PSW
   \   000267   33           RLC     A
   \   000268   4003         JC      $+5
   \   00026A   02....       LJMP    ??_DrawBitmap180_5 & 0xFFFF
   \   00026D   7401         MOV     A,#0x1
   \   00026F   65..         XRL     A,?V0 + 8
   \   000271   7002         JNZ     ??_DrawBitmap180_10
   \   000273   E5..         MOV     A,?V0 + 9
   \                     ??_DrawBitmap180_10:
   \   000275   7036         JNZ     ??_DrawBitmap180_11
   \   000277                ; Setup parameters for call to function _DrawBitLine1BPP
   \   000277   7438         MOV     A,#0x38
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00027F   8E..         MOV     ?V0 + 14,R6
   \   000281   8F..         MOV     ?V0 + 15,R7
   \   000283   78..         MOV     R0,#?V0 + 14
   \   000285   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000288   78..         MOV     R0,#?V0 + 6
   \   00028A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028D   78..         MOV     R0,#?V0 + 12
   \   00028F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000292   740C         MOV     A,#0xc
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   E0           MOVX    A,@DPTR
   \   000298   C3           CLR     C
   \   000299   95..         SUBB    A,?V0 + 0
   \   00029B   FC           MOV     R4,A
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   95..         SUBB    A,?V0 + 1
   \   0002A0   FD           MOV     R5,A
   \   0002A1   AA..         MOV     R2,?V0 + 2
   \   0002A3   AB..         MOV     R3,?V0 + 3
   \   0002A5   12....       LCALL   ??_DrawBitLine1BPP?relay
   \   0002A8   7408         MOV     A,#0x8
   \   0002AA   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??_DrawBitmap180_11:
   \   0002AD   E5..         MOV     A,?V0 + 12
   \   0002AF   25..         ADD     A,?V0 + 10
   \   0002B1   F5..         MOV     ?V0 + 12,A
   \   0002B3   E5..         MOV     A,?V0 + 13
   \   0002B5   35..         ADDC    A,?V0 + 11
   \   0002B7   F5..         MOV     ?V0 + 13,A
   \   0002B9   E5..         MOV     A,?V0 + 0
   \   0002BB   2401         ADD     A,#0x1
   \   0002BD   F5..         MOV     ?V0 + 0,A
   \   0002BF   E5..         MOV     A,?V0 + 1
   \   0002C1   3400         ADDC    A,#0x0
   \   0002C3   F5..         MOV     ?V0 + 1,A
   \   0002C5   8093         SJMP    ??_DrawBitmap180_9
    207              /* Handle BITMAP with magnification */
    208              int x, y;
    209              int yi;
    210              int Shift = 8 - BitsPerPixel;
   \                     ??_DrawBitmap180_1:
   \   0002C7   7408         MOV     A,#0x8
   \   0002C9   C3           CLR     C
   \   0002CA   95..         SUBB    A,?V0 + 8
   \   0002CC   F5..         MOV     ?V0 + 2,A
    211              for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
   \   0002CE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0002D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D4   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002D7   7410         MOV     A,#0x10
   \   0002D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DC   E4           CLR     A
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   8032         SJMP    ??_DrawBitmap180_12
   \                     ??_DrawBitmap180_13:
   \   0002E1   7410         MOV     A,#0x10
   \   0002E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0002E9   7430         MOV     A,#0x30
   \   0002EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EE   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   C3           CLR     C
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   98           SUBB    A,R0
   \   0002F7   F0           MOVX    @DPTR,A
   \   0002F8   A3           INC     DPTR
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   99           SUBB    A,R1
   \   0002FB   F0           MOVX    @DPTR,A
   \   0002FC   7436         MOV     A,#0x36
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   E0           MOVX    A,@DPTR
   \   000302   25..         ADD     A,?V0 + 10
   \   000304   F8           MOV     R0,A
   \   000305   A3           INC     DPTR
   \   000306   E0           MOVX    A,@DPTR
   \   000307   35..         ADDC    A,?V0 + 11
   \   000309   F9           MOV     R1,A
   \   00030A   7436         MOV     A,#0x36
   \   00030C   12....       LCALL   ?XSTACK_DISP0_8
   \   00030F   E8           MOV     A,R0
   \   000310   F0           MOVX    @DPTR,A
   \   000311   A3           INC     DPTR
   \   000312   E9           MOV     A,R1
   \                     ??_DrawBitmap180_12:
   \   000313   F0           MOVX    @DPTR,A
   \   000314   7410         MOV     A,#0x10
   \   000316   12....       LCALL   ?XSTACK_DISP0_8
   \   000319   C3           CLR     C
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   95..         SUBB    A,?V0 + 4
   \   00031D   A3           INC     DPTR
   \   00031E   E0           MOVX    A,@DPTR
   \   00031F   95..         SUBB    A,?V0 + 5
   \   000321   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000323   65D0         XRL     A,PSW
   \   000325   33           RLC     A
   \   000326   4003         JC      $+5
   \   000328   02....       LJMP    ??_DrawBitmap180_5 & 0xFFFF
    212                int yMax = y + yMul - 1;
   \   00032B   7404         MOV     A,#0x4
   \   00032D   12....       LCALL   ?XSTACK_DISP0_8
   \   000330   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000333   7430         MOV     A,#0x30
   \   000335   12....       LCALL   ?XSTACK_DISP0_8
   \   000338   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00033B   24FF         ADD     A,#-0x1
   \   00033D   F5..         MOV     ?V0 + 0,A
   \   00033F   E9           MOV     A,R1
   \   000340   34FF         ADDC    A,#-0x1
   \   000342   F5..         MOV     ?V0 + 1,A
    213                /* Draw if within clip area (Optimization ... "if" is not required !) */
    214                if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
   \   000344   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000347   C3           CLR     C
   \   000348   E5..         MOV     A,?V0 + 0
   \   00034A   98           SUBB    A,R0
   \   00034B   E5..         MOV     A,?V0 + 1
   \   00034D   99           SUBB    A,R1
   \   00034E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000350   65D0         XRL     A,PSW
   \   000352   33           RLC     A
   \   000353   408C         JC      ??_DrawBitmap180_13
   \   000355   7404         MOV     A,#0x4
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00035D   4082         JC      ??_DrawBitmap180_13
    215                  int BitsLeft = 0;
   \   00035F   7408         MOV     A,#0x8
   \   000361   12....       LCALL   ?XSTACK_DISP0_8
   \   000364   E4           CLR     A
   \   000365   F0           MOVX    @DPTR,A
   \   000366   A3           INC     DPTR
   \   000367   F0           MOVX    @DPTR,A
    216                  int xi;
    217                  const U8 GUI_UNI_PTR * pDataLine = pPixel;
   \   000368   7436         MOV     A,#0x36
   \   00036A   12....       LCALL   ?XSTACK_DISP0_8
   \   00036D   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000370   7406         MOV     A,#0x6
   \   000372   12....       LCALL   ?XSTACK_DISP0_8
   \   000375   12....       LCALL   ?Subroutine8 & 0xFFFF
    218                  for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
   \                     ??CrossCallReturnLabel_15:
   \   000378   12....       LCALL   ?XSTACK_DISP0_8
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   F5..         MOV     ?V0 + 6,A
   \   00037E   A3           INC     DPTR
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   F5..         MOV     ?V0 + 7,A
   \   000382   740E         MOV     A,#0xe
   \   000384   12....       LCALL   ?XSTACK_DISP0_8
   \   000387   E4           CLR     A
   \   000388   F0           MOVX    @DPTR,A
   \   000389   A3           INC     DPTR
   \   00038A   F0           MOVX    @DPTR,A
   \   00038B   8062         SJMP    ??_DrawBitmap180_14
    219                    U8  Index;
    220                    if (!BitsLeft) {
    221                      Data = *pDataLine++;
    222                      BitsLeft =8;
    223                    }
    224                    Index = Data >> Shift;
    225                    Data    <<= BitsPerPixel;
    226                    BitsLeft -= BitsPerPixel;
    227                    if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
    228                      LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
    229                      if (pTrans) {
    230                        LCD_COLORINDEX = *(pTrans + Index);
    231                      } else {
    232                        LCD_COLORINDEX = Index;
   \                     ??_DrawBitmap180_15:
   \   00038D   EA           MOV     A,R2
   \   00038E   90....       MOV     DPTR,#GUI_Context + 2
   \   000391   F0           MOVX    @DPTR,A
   \   000392   A3           INC     DPTR
   \   000393   E4           CLR     A
   \                     ??_DrawBitmap180_16:
   \   000394   F0           MOVX    @DPTR,A
    233                      }
    234                      LCD_FillRect(x - xMul + 1, y, x, yMax);
   \   000395                ; Setup parameters for call to function LCD_FillRect
   \   000395   78..         MOV     R0,#?V0 + 0
   \   000397   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00039A   78..         MOV     R0,#?V0 + 6
   \   00039C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00039F   7408         MOV     A,#0x8
   \   0003A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   FC           MOV     R4,A
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   FD           MOV     R5,A
   \   0003A9   7432         MOV     A,#0x32
   \   0003AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AE   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0003B1   E5..         MOV     A,?V0 + 6
   \   0003B3   C3           CLR     C
   \   0003B4   98           SUBB    A,R0
   \   0003B5   F8           MOV     R0,A
   \   0003B6   E5..         MOV     A,?V0 + 7
   \   0003B8   99           SUBB    A,R1
   \   0003B9   F9           MOV     R1,A
   \   0003BA   E8           MOV     A,R0
   \   0003BB   2401         ADD     A,#0x1
   \   0003BD   FA           MOV     R2,A
   \   0003BE   E9           MOV     A,R1
   \   0003BF   3400         ADDC    A,#0x0
   \   0003C1   FB           MOV     R3,A
   \   0003C2   12....       LCALL   ??LCD_FillRect?relay
   \   0003C5   7404         MOV     A,#0x4
   \   0003C7   12....       LCALL   ?DEALLOC_XSTACK8
    235                      LCD_COLORINDEX = OldColor;
   \   0003CA   90....       MOV     DPTR,#GUI_Context + 2
   \   0003CD   E5..         MOV     A,?V0 + 12
   \   0003CF   F0           MOVX    @DPTR,A
   \   0003D0   A3           INC     DPTR
   \   0003D1   E5..         MOV     A,?V0 + 13
   \   0003D3   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmap180_17:
   \   0003D4   740E         MOV     A,#0xe
   \   0003D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0003DC   742E         MOV     A,#0x2e
   \   0003DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E1   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0003E4   C3           CLR     C
   \   0003E5   E5..         MOV     A,?V0 + 6
   \   0003E7   98           SUBB    A,R0
   \   0003E8   F5..         MOV     ?V0 + 6,A
   \   0003EA   E5..         MOV     A,?V0 + 7
   \   0003EC   99           SUBB    A,R1
   \   0003ED   F5..         MOV     ?V0 + 7,A
   \                     ??_DrawBitmap180_14:
   \   0003EF   740E         MOV     A,#0xe
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   C3           CLR     C
   \   0003F5   E0           MOVX    A,@DPTR
   \   0003F6   9E           SUBB    A,R6
   \   0003F7   A3           INC     DPTR
   \   0003F8   E0           MOVX    A,@DPTR
   \   0003F9   9F           SUBB    A,R7
   \   0003FA   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003FC   65D0         XRL     A,PSW
   \   0003FE   33           RLC     A
   \   0003FF   4003         JC      $+5
   \   000401   02....       LJMP    ??_DrawBitmap180_13 & 0xFFFF
   \   000404   7408         MOV     A,#0x8
   \   000406   12....       LCALL   ?XSTACK_DISP0_8
   \   000409   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00040C   E8           MOV     A,R0
   \   00040D   49           ORL     A,R1
   \   00040E   7031         JNZ     ??_DrawBitmap180_18
   \   000410   7406         MOV     A,#0x6
   \   000412   12....       LCALL   ?XSTACK_DISP0_8
   \   000415   E0           MOVX    A,@DPTR
   \   000416   F8           MOV     R0,A
   \   000417   A3           INC     DPTR
   \   000418   E0           MOVX    A,@DPTR
   \   000419   F583         MOV     DPH,A
   \   00041B   8882         MOV     DPL,R0
   \   00041D   E0           MOVX    A,@DPTR
   \   00041E   F5..         MOV     ?V0 + 14,A
   \   000420   7406         MOV     A,#0x6
   \   000422   12....       LCALL   ?XSTACK_DISP0_8
   \   000425   E0           MOVX    A,@DPTR
   \   000426   2401         ADD     A,#0x1
   \   000428   08           INC     R0
   \   000429   A3           INC     DPTR
   \   00042A   E0           MOVX    A,@DPTR
   \   00042B   3400         ADDC    A,#0x0
   \   00042D   F9           MOV     R1,A
   \   00042E   7406         MOV     A,#0x6
   \   000430   12....       LCALL   ?XSTACK_DISP0_8
   \   000433   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000436   7408         MOV     A,#0x8
   \   000438   12....       LCALL   ?XSTACK_DISP0_8
   \   00043B   7408         MOV     A,#0x8
   \   00043D   F0           MOVX    @DPTR,A
   \   00043E   A3           INC     DPTR
   \   00043F   E4           CLR     A
   \   000440   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmap180_18:
   \   000441   85....       MOV     ?V0 + 12,?V0 + 14
   \   000444   75..00       MOV     ?V0 + 13,#0x0
   \   000447   E5..         MOV     A,?V0 + 2
   \   000449   78..         MOV     R0,#?V0 + 12
   \   00044B   12....       LCALL   ?SS_SHR
   \   00044E   AA..         MOV     R2,?V0 + 12
   \   000450   A8..         MOV     R0,?V0 + 8
   \   000452   E5..         MOV     A,?V0 + 14
   \   000454   B80002       CJNE    R0,#0x0,??_DrawBitmap180_19
   \   000457   8004         SJMP    ??_DrawBitmap180_20
   \                     ??_DrawBitmap180_19:
   \   000459   C3           CLR     C
   \   00045A   33           RLC     A
   \   00045B   D8FC         DJNZ    R0,??_DrawBitmap180_19
   \                     ??_DrawBitmap180_20:
   \   00045D   F5..         MOV     ?V0 + 14,A
   \   00045F   7408         MOV     A,#0x8
   \   000461   12....       LCALL   ?XSTACK_DISP0_8
   \   000464   C3           CLR     C
   \   000465   E0           MOVX    A,@DPTR
   \   000466   95..         SUBB    A,?V0 + 8
   \   000468   F0           MOVX    @DPTR,A
   \   000469   A3           INC     DPTR
   \   00046A   E0           MOVX    A,@DPTR
   \   00046B   95..         SUBB    A,?V0 + 9
   \   00046D   F0           MOVX    @DPTR,A
   \   00046E   EA           MOV     A,R2
   \   00046F   700B         JNZ     ??_DrawBitmap180_21
   \   000471   90....       MOV     DPTR,#GUI_Context + 12
   \   000474   E0           MOVX    A,@DPTR
   \   000475   A2E1         MOV     C,0xE0 /* A   */.1
   \   000477   5003         JNC     $+5
   \   000479   02....       LJMP    ??_DrawBitmap180_17 & 0xFFFF
   \                     ??_DrawBitmap180_21:
   \   00047C   90....       MOV     DPTR,#GUI_Context + 2
   \   00047F   E0           MOVX    A,@DPTR
   \   000480   F5..         MOV     ?V0 + 12,A
   \   000482   A3           INC     DPTR
   \   000483   E0           MOVX    A,@DPTR
   \   000484   F5..         MOV     ?V0 + 13,A
   \   000486   7438         MOV     A,#0x38
   \   000488   12....       LCALL   ?XSTACK_DISP0_8
   \   00048B   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00048E   E8           MOV     A,R0
   \   00048F   49           ORL     A,R1
   \   000490   7003         JNZ     $+5
   \   000492   02....       LJMP    ??_DrawBitmap180_15 & 0xFFFF
   \   000495   EA           MOV     A,R2
   \   000496   C3           CLR     C
   \   000497   33           RLC     A
   \   000498   F8           MOV     R0,A
   \   000499   E4           CLR     A
   \   00049A   33           RLC     A
   \   00049B   F9           MOV     R1,A
   \   00049C   7438         MOV     A,#0x38
   \   00049E   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A1   E0           MOVX    A,@DPTR
   \   0004A2   28           ADD     A,R0
   \   0004A3   FA           MOV     R2,A
   \   0004A4   A3           INC     DPTR
   \   0004A5   E0           MOVX    A,@DPTR
   \   0004A6   39           ADDC    A,R1
   \   0004A7   8A82         MOV     DPL,R2
   \   0004A9   F583         MOV     DPH,A
   \   0004AB   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    236                    }
    237                  }
    238                }
    239              }
    240            }
   \                     ??CrossCallReturnLabel_39:
   \   0004AE   90....       MOV     DPTR,#GUI_Context + 2
   \   0004B1   E8           MOV     A,R0
   \   0004B2   F0           MOVX    @DPTR,A
   \   0004B3   A3           INC     DPTR
   \   0004B4   E9           MOV     A,R1
   \   0004B5   02....       LJMP    ??_DrawBitmap180_16 & 0xFFFF
   \                     ??_DrawBitmap180_5:
   \   0004B8   7412         MOV     A,#0x12
   \   0004BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004BD   7F10         MOV     R7,#0x10
   \   0004BF   02....       LJMP    ?BANKED_LEAVE_XDATA
    241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine11_0
   \   000006                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7404         MOV     A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7583..       MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
   \   000008   7582..       MOV     DPL,#(GUI_Context + 10) & 0xff
   \   00000B                REQUIRE ??Subroutine12_0
   \   00000B                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   22           RET
    242          
    243          /*********************************************************************
    244          *
    245          *       Global data
    246          *
    247          **********************************************************************
    248          */
    249          /*********************************************************************
    250          *
    251          *       LCD_APIList180
    252          *
    253          * Purpose:
    254          *   Function pointer table for rotating text 180
    255          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    256          tLCD_APIList LCD_APIList180 = {
   \                     LCD_APIList180:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for LCD_APIList180>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LCD_APIList180>`:
   \   000000   ....         DW ??_DrawBitmap180?relay
   \   000002   ....         DW ??_Rect2TextRect?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitLine1BPP?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitLine1BPP

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_Rect2TextRect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Rect2TextRect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_TransformPoint180?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _TransformPoint180

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmap180?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmap180

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
    257            (tLCD_DrawBitmap*)&_DrawBitmap180,
    258            &_Rect2TextRect
    259          };
    260          
    261          #else
    262          void LCD_Rotate180_C(void);
    263          void LCD_Rotate180_C(void){}
    264          #endif
    265          

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     _DrawBitLine1BPP              0      0     74
       -> LCD_L0_SetPixelIndex     0      0     48
       -> LCD_L0_SetPixelIndex     0      0     48
       -> LCD_L0_GetPixelIndex     0      0     44
       -> LCD_L0_SetPixelIndex     0      0     48
     _DrawBitmap180                2      0     66
       -> _TransformPoint180       0      0     84
       -> _TransformPoint180       0      0     84
       -> _DrawBitLine1BPP         0      0    100
       -> LCD_FillRect             0      0     92
     _Rect2TextRect                0      0      0
     _TransformPoint180            2      0     64
       -> GUI_GetClientRect        0      0     44
       -> LCD_GetXSize             0      0     44
       -> LCD_GetYSize             0      0     44


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _DrawBitLine1BPP                   378
     ?Subroutine7                        17
     ?Subroutine6                        24
     ??Subroutine10_0                     6
     _Rect2TextRect                       3
     _TransformPoint180                 242
     ?Subroutine9                         6
     ?Subroutine8                         8
     ?Subroutine5                         8
     ?Subroutine4                         9
     ?Subroutine2                         3
     _DrawBitmap180                    1218
     ?Subroutine3                        10
     ?Subroutine1                         6
     ??Subroutine11_0                     8
     ?Subroutine0                        11
     ??Subroutine12_0                    12
     LCD_APIList180                       4
     ?<Initializer for LCD_APIList180>    4
     ??_DrawBitLine1BPP?relay             6
     ??_Rect2TextRect?relay               6
     ??_TransformPoint180?relay           6
     ??_DrawBitmap180?relay               6
     ?<Constant {0}>                      8

 
 1 969 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
 
 1 997 bytes of CODE  memory
     8 bytes of CONST memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
