###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUI_FillPolygon.c                                #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUI_FillPolygon.c -D      #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUI_Fi #
#                          llPolygon.lst                                      #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUI_Fil #
#                          lPolygon.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUI_FillPolygon.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_FillPolygon.C
     16          Purpose     : Fill polygon routine
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "GUI_Protected.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     22          #include "GUIDebug.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       defines, Configs
     27          *
     28          **********************************************************************
     29          */
     30          
     31          #define GUI_FP_MAXCOUNT 12
     32          
     33          /*********************************************************************
     34          *
     35          *       static data
     36          *
     37          **********************************************************************
     38          */
     39          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          static int GL_FP_Cnt;
   \                     GL_FP_Cnt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          static I16 _aX[GUI_FP_MAXCOUNT];
   \                     _aX:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
     42          
     43          /*********************************************************************
     44          *
     45          *       static code
     46          *
     47          **********************************************************************
     48          */
     49          /*********************************************************************
     50          *
     51          *       _DrawHLine
     52          */
     53          static void _DrawHLine(int x0, int y, int x1) {
     54            if (x0 < x1) {
     55              LCD_HL_DrawHLine(x0, y, x1);
     56            } else {
     57              LCD_HL_DrawHLine(x1, y, x0);
     58            }
     59          }
     60          
     61          /*********************************************************************
     62          *
     63          *       _CheckYInterSect
     64          *
     65          *  This function returns the x-coordinate of the intersection
     66          *  of the given line at the given y-coordinate.
     67          *  If there is no intersection, GUI_XMAX is returned.
     68          *  This routine does not work for horizontal lines, as there
     69          *  would be more than a single point as intersection. This situation
     70          *  needs to be checked prior to calling the routine.
     71          *  Returns:
     72          *    0 if no intersection
     73          *    1 if we have an intersection
     74          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          static int _CheckYInterSect(int y, int* px, const GUI_POINT*paPoint0, const GUI_POINT*paPoint1) {
   \                     _CheckYInterSect:
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000021   8A..         MOV     ?V0 + 2,R2
   \   000023   8B..         MOV     ?V0 + 3,R3
     76            int x0, y0, x1, y1;
     77            if (paPoint0->y <= (paPoint1)->y) {
   \   000025   8A82         MOV     DPL,R2
   \   000027   F583         MOV     DPH,A
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   C082         PUSH    DPL
   \   00002D   C083         PUSH    DPH
   \   00002F   85..82       MOV     DPL,?V0 + 0
   \   000032   85..83       MOV     DPH,?V0 + 1
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00003A   D083         POP     DPH
   \   00003C   D082         POP     DPL
   \   00003E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000041   4028         JC      ??_CheckYInterSect_0
     78              y0 = paPoint0->y;
     79              if (y0 > y)      /* Check if there is an intersection ... (early out) */
   \   000043   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000046   5005         JNC     ??_CheckYInterSect_1
     80                return 0;
   \                     ??_CheckYInterSect_2:
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   02....       LJMP    ??_CheckYInterSect_3 & 0xFFFF
     81              y1 = paPoint1->y;
   \                     ??_CheckYInterSect_1:
   \   00004D   85..82       MOV     DPL,?V0 + 2
   \   000050   85..83       MOV     DPH,?V0 + 3
   \   000053   12....       LCALL   ?Subroutine0 & 0xFFFF
     82              if (y1 < y)      /* Check if there is an intersection ... (early out) */
   \                     ??CrossCallReturnLabel_0:
   \   000056   40F0         JC      ??_CheckYInterSect_2
     83                return 0;
     84              x0 = paPoint0->x;
   \   000058   85..82       MOV     DPL,?V0 + 0
   \   00005B   85..83       MOV     DPH,?V0 + 1
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FE           MOV     R6,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FF           MOV     R7,A
     85              x1 = paPoint1->x;
   \   000063   85..82       MOV     DPL,?V0 + 2
   \   000066   85..83       MOV     DPH,?V0 + 3
   \   000069   802C         SJMP    ??_CheckYInterSect_4
     86            } else {
     87              y0 = paPoint1->y;
   \                     ??_CheckYInterSect_0:
   \   00006B   85..82       MOV     DPL,?V0 + 2
   \   00006E   85..83       MOV     DPH,?V0 + 3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ??Subroutine26_0 & 0xFFFF
     88              if (y0 > y)      /* Check if there is an intersection ... (early out) */
   \                     ??CrossCallReturnLabel_56:
   \   000076   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000079   40CD         JC      ??_CheckYInterSect_2
     89                return 0;
     90              y1 = paPoint0->y;
   \   00007B   85..82       MOV     DPL,?V0 + 0
   \   00007E   85..83       MOV     DPH,?V0 + 1
   \   000081   12....       LCALL   ?Subroutine0 & 0xFFFF
     91              if (y1 < y)      /* Check if there is an intersection ... (early out) */
   \                     ??CrossCallReturnLabel_1:
   \   000084   40C2         JC      ??_CheckYInterSect_2
     92                return 0;
     93              x0 = paPoint1->x;
   \   000086   85..82       MOV     DPL,?V0 + 2
   \   000089   85..83       MOV     DPH,?V0 + 3
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FE           MOV     R6,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FF           MOV     R7,A
     94              x1 = paPoint0->x;
   \   000091   85..82       MOV     DPL,?V0 + 0
   \   000094   85..83       MOV     DPH,?V0 + 1
   \                     ??_CheckYInterSect_4:
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V0 + 0,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F5..         MOV     ?V0 + 1,A
     95            }
     96          /* Calculate intersection */
     97            {
     98              I32 Mul = (I32)(x1 - x0) * (I32)(y - y0);
   \   00009E   E5..         MOV     A,?V0 + 0
   \   0000A0   C3           CLR     C
   \   0000A1   9E           SUBB    A,R6
   \   0000A2   F5..         MOV     ?V0 + 0,A
   \   0000A4   E5..         MOV     A,?V0 + 1
   \   0000A6   9F           SUBB    A,R7
   \   0000A7   F5..         MOV     ?V0 + 1,A
   \   0000A9   33           RLC     A
   \   0000AA   95E0         SUBB    A,0xE0 /* A   */
   \   0000AC   F5..         MOV     ?V0 + 2,A
   \   0000AE   F5..         MOV     ?V0 + 3,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   C3           CLR     C
   \   0000B2   9A           SUBB    A,R2
   \   0000B3   F5..         MOV     ?V0 + 4,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000B9   12....       LCALL   ?L_MUL
     99              if (Mul > 0) {
   \   0000BC   90....       MOV     DPTR,#__Constant_1
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?SL_GE_X
   \   0000C4   EC           MOV     A,R4
   \   0000C5   5010         JNC     ??_CheckYInterSect_5
    100                Mul += (y1 - y0) >> 1;	          /* for proper rounding */
   \   0000C7   12....       LCALL   ?Subroutine5 & 0xFFFF
    101              } else {
   \                     ??CrossCallReturnLabel_8:
   \   0000CA   12....       LCALL   ?SS_SHR
   \   0000CD   E5..         MOV     A,?V0 + 5
   \   0000CF   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000D2   12....       LCALL   ?L_ADD
   \   0000D5   8016         SJMP    ??_CheckYInterSect_6
    102                Mul -= ((y1 - y0) >> 1) - 1;	    /* for proper rounding */
   \                     ??_CheckYInterSect_5:
   \   0000D7   12....       LCALL   ?Subroutine5 & 0xFFFF
    103              }
   \                     ??CrossCallReturnLabel_9:
   \   0000DA   12....       LCALL   ?SS_SHR
   \   0000DD   E5..         MOV     A,?V0 + 4
   \   0000DF   24FF         ADD     A,#-0x1
   \   0000E1   F5..         MOV     ?V0 + 4,A
   \   0000E3   E5..         MOV     A,?V0 + 5
   \   0000E5   34FF         ADDC    A,#-0x1
   \   0000E7   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000EA   12....       LCALL   ?L_SUB
    104              x0 += Mul / (y1 - y0);
    105            }
    106            *px = x0;
   \                     ??_CheckYInterSect_6:
   \   0000ED   EC           MOV     A,R4
   \   0000EE   C3           CLR     C
   \   0000EF   9A           SUBB    A,R2
   \   0000F0   F5..         MOV     ?V0 + 4,A
   \   0000F2   ED           MOV     A,R5
   \   0000F3   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000F6   12....       LCALL   ?L_DIV_MOD
   \   0000F9   EE           MOV     A,R6
   \   0000FA   25..         ADD     A,?V0 + 0
   \   0000FC   F8           MOV     R0,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   35..         ADDC    A,?V0 + 1
   \   000100   F9           MOV     R1,A
   \   000101   85..82       MOV     DPL,?V0 + 8
   \   000104   85..83       MOV     DPH,?V0 + 9
   \   000107   E8           MOV     A,R0
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   E9           MOV     A,R1
   \   00010B   F0           MOVX    @DPTR,A
    107            return 1;
   \   00010C   7A01         MOV     R2,#0x1
   \                     ??_CheckYInterSect_3:
   \   00010E   7B00         MOV     R3,#0x0
   \   000110   7F0A         MOV     R7,#0xa
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA
    108          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   9B           SUBB    A,R3
   \   000001                REQUIRE ??Subroutine22_0
   \   000001                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002                REQUIRE ??Subroutine23_0
   \   000002                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 6,A
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   79..         MOV     R1,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   C3           CLR     C
   \   000001   E8           MOV     A,R0
   \   000002   9A           SUBB    A,R2
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   C3           CLR     C
   \   000001   9A           SUBB    A,R2
   \   000002   F5..         MOV     ?V0 + 4,A
   \   000004   ED           MOV     A,R5
   \   000005   9B           SUBB    A,R3
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   7401         MOV     A,#0x1
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FD           MOV     R5,A
   \   000007   C3           CLR     C
   \   000008   EC           MOV     A,R4
   \   000009   98           SUBB    A,R0
   \   00000A   ED           MOV     A,R5
   \   00000B   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   9A           SUBB    A,R2
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   9B           SUBB    A,R3
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   99           SUBB    A,R1
   \   000001   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000003   65D0         XRL     A,PSW
   \   000005   33           RLC     A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    109          
    110          /*********************************************************************
    111          *
    112          *       _Add
    113          *
    114          *  This function adds a point into the sorted array
    115          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          static void _Add(int x) {
   \                     _Add:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    117            if (GL_FP_Cnt < GUI_FP_MAXCOUNT) {
   \   000005   90....       MOV     DPTR,#GL_FP_Cnt
   \   000008   C3           CLR     C
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   940C         SUBB    A,#0xc
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   9400         SUBB    A,#0x0
   \   000010   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000012   65D0         XRL     A,PSW
   \   000014   33           RLC     A
   \   000015   5073         JNC     ??_Add_0
    118              int i;
    119              /* Move all entries to the right (bigger x-value) */
    120              for (i=GL_FP_Cnt; i ; i--) {
   \   000017   90....       MOV     DPTR,#GL_FP_Cnt
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   8032         SJMP    ??_Add_1
    121                if (_aX[i-1] < x)
    122                  break;
    123                _aX[i] = _aX[i-1];
   \                     ??_Add_2:
   \   000020   E8           MOV     A,R0
   \   000021   FC           MOV     R4,A
   \   000022   E9           MOV     A,R1
   \   000023   FD           MOV     R5,A
   \   000024   EC           MOV     A,R4
   \   000025   C3           CLR     C
   \   000026   33           RLC     A
   \   000027   FC           MOV     R4,A
   \   000028   ED           MOV     A,R5
   \   000029   33           RLC     A
   \   00002A   FD           MOV     R5,A
   \   00002B   74..         MOV     A,#_aX & 0xff
   \   00002D   2C           ADD     A,R4
   \   00002E   FC           MOV     R4,A
   \   00002F   74..         MOV     A,#(_aX >> 8) & 0xff
   \   000031   3D           ADDC    A,R5
   \   000032   FD           MOV     R5,A
   \   000033   EC           MOV     A,R4
   \   000034   24FE         ADD     A,#-0x2
   \   000036   F582         MOV     DPL,A
   \   000038   ED           MOV     A,R5
   \   000039   34FF         ADDC    A,#-0x1
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FE           MOV     R6,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FF           MOV     R7,A
   \   000042   8C82         MOV     DPL,R4
   \   000044   8D83         MOV     DPH,R5
   \   000046   EE           MOV     A,R6
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   EF           MOV     A,R7
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   E8           MOV     A,R0
   \   00004C   24FF         ADD     A,#-0x1
   \   00004E   18           DEC     R0
   \   00004F   E9           MOV     A,R1
   \   000050   34FF         ADDC    A,#-0x1
   \                     ??_Add_1:
   \   000052   F9           MOV     R1,A
   \   000053   E8           MOV     A,R0
   \   000054   49           ORL     A,R1
   \   000055   601A         JZ      ??_Add_3
   \   000057   E8           MOV     A,R0
   \   000058   FC           MOV     R4,A
   \   000059   E9           MOV     A,R1
   \   00005A   FD           MOV     R5,A
   \   00005B   EC           MOV     A,R4
   \   00005C   C3           CLR     C
   \   00005D   33           RLC     A
   \   00005E   FC           MOV     R4,A
   \   00005F   ED           MOV     A,R5
   \   000060   33           RLC     A
   \   000061   FD           MOV     R5,A
   \   000062   74..         MOV     A,#(_aX + 254) & 0xff
   \   000064   2C           ADD     A,R4
   \   000065   F582         MOV     DPL,A
   \   000067   74..         MOV     A,#((_aX - 2) >> 8) & 0xff
   \   000069   3D           ADDC    A,R5
   \   00006A   F583         MOV     DPH,A
   \   00006C   12....       LCALL   ?Subroutine6 & 0xFFFF
    124              }
   \                     ??CrossCallReturnLabel_11:
   \   00006F   50AF         JNC     ??_Add_2
    125              /* Insert new entry */
    126              _aX[i]    = x;
   \                     ??_Add_3:
   \   000071   E8           MOV     A,R0
   \   000072   C3           CLR     C
   \   000073   33           RLC     A
   \   000074   F8           MOV     R0,A
   \   000075   E9           MOV     A,R1
   \   000076   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000079   EA           MOV     A,R2
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   EB           MOV     A,R3
   \   00007D   F0           MOVX    @DPTR,A
    127              GL_FP_Cnt++;
   \   00007E   90....       MOV     DPTR,#GL_FP_Cnt
   \   000081   E0           MOVX    A,@DPTR
   \   000082   2401         ADD     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   3400         ADDC    A,#0x0
   \   000089   F0           MOVX    @DPTR,A
    128            }
    129          }
   \                     ??_Add_0:
   \   00008A   7F01         MOV     R7,#0x1
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   33           RLC     A
   \   000001   F9           MOV     R1,A
   \   000002   74..         MOV     A,#_aX & 0xff
   \   000004   28           ADD     A,R0
   \   000005   F582         MOV     DPL,A
   \   000007   74..         MOV     A,#(_aX >> 8) & 0xff
   \   000009   39           ADDC    A,R1
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    130          
    131          /*********************************************************************
    132          *
    133          *       _Init
    134          *
    135          *  This function initialise the sorted array
    136          */
    137          static void _Init(void) {
    138            GL_FP_Cnt = 0;
    139          }
    140          
    141          /*********************************************************************
    142          *
    143          *       _Flush
    144          *
    145          *  This function draw lines between points in the array
    146          */
    147          static void _Flush(int x0, int y) {
    148            int i, x = 0;
    149            char On=0;
    150            for (i=0; i<GL_FP_Cnt; i++) {
    151              int xNew = _aX[i];
    152              if (On) {
    153                LCD_HL_DrawHLine(x0 + x, y, x0 + xNew);
    154              }
    155              On ^= 1;
    156              x = xNew;
    157            }
    158          }
    159          
    160          /*********************************************************************
    161          *
    162          *       _AddPoint
    163          *
    164          *  This function decides either if there a V-point or a
    165          *  X-point. An X-point is added to the array, a V-point
    166          *  is drawn.
    167          */
    168          static void _AddPoint(int x, int y, int y0, int y1, int xOff, int yOff) {
    169            if ((y0 ^ y1) >= 0) {
    170              x += xOff;
    171              LCD_HL_DrawHLine(x, y + yOff, x);    /* V-point, not crossing the polygon */
    172            } else {
    173              _Add(x);
    174            }
    175          }
    176          
    177          /*********************************************************************
    178          *
    179          *       _GetPrevPointDiffy
    180          *
    181          *  Find previous point which is not on the same height
    182          */
    183          static int _GetPrevPointDiffy(const GUI_POINT* paPoint, int i,
    184                                        const int NumPoints, const int y0) {
    185            int j, y1;
    186            for (j = 0; j < (NumPoints - 1) ; j++) {
    187              i = (i != 0) ? i - 1 : NumPoints - 1;
    188              y1 = (paPoint + i)->y;
    189              if (y1 != y0) {
    190                return y1;
    191              }
    192            }
    193            return y0;
    194          }
    195          
    196          /*********************************************************************
    197          *
    198          *       Public code
    199          *
    200          **********************************************************************
    201          */
    202          /*********************************************************************
    203          *
    204          *       GL_FillPolygon
    205          *
    206          *  This function calculates the polygon
    207          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          void GL_FillPolygon  (const GUI_POINT*paPoint, int NumPoints, int xOff, int yOff) {
   \                     GL_FillPolygon:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8A..         MOV     ?V0 + 4,R2
   \   000016   8B..         MOV     ?V0 + 5,R3
   \   000018   741C         MOV     A,#0x1c
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 14,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 15,A
   \   000024   741E         MOV     A,#0x1e
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
    209            int i, y;
    210            int yMin = GUI_YMAX;
   \   000030   7AFF         MOV     R2,#-0x1
   \   000032   7B0F         MOV     R3,#0xf
    211            int yMax = GUI_YMIN;
   \   000034   75..01       MOV     ?V0 + 0,#0x1
   \   000037   75..F0       MOV     ?V0 + 1,#-0x10
    212          /* First step : find uppermost and lowermost coordinates */
    213            for (i=0; i<NumPoints; i++) {
   \   00003A   7E00         MOV     R6,#0x0
   \   00003C   7F00         MOV     R7,#0x0
   \   00003E   8042         SJMP    ??GL_FillPolygon_0
    214              y = (paPoint + i)->y;
   \                     ??GL_FillPolygon_1:
   \   000040   8E..         MOV     ?V0 + 2,R6
   \   000042   8F..         MOV     ?V0 + 3,R7
   \   000044   7402         MOV     A,#0x2
   \   000046   78..         MOV     R0,#?V0 + 2
   \   000048   12....       LCALL   ?S_SHL
   \   00004B   E5..         MOV     A,?V0 + 4
   \   00004D   25..         ADD     A,?V0 + 2
   \   00004F   F582         MOV     DPL,A
   \   000051   E5..         MOV     A,?V0 + 5
   \   000053   35..         ADDC    A,?V0 + 3
   \   000055   F583         MOV     DPH,A
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 2,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V0 + 3,A
    215              if (y < yMin)
   \   000060   C3           CLR     C
   \   000061   E5..         MOV     A,?V0 + 2
   \   000063   9A           SUBB    A,R2
   \   000064   E5..         MOV     A,?V0 + 3
   \   000066   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000069   5004         JNC     ??GL_FillPolygon_2
    216                yMin = y;
   \   00006B   AA..         MOV     R2,?V0 + 2
   \   00006D   AB..         MOV     R3,?V0 + 3
    217              if (y > yMax)
   \                     ??GL_FillPolygon_2:
   \   00006F   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000072   5006         JNC     ??GL_FillPolygon_3
    218                yMax = y;
   \   000074   85....       MOV     ?V0 + 0,?V0 + 2
   \   000077   85....       MOV     ?V0 + 1,?V0 + 3
    219            }
   \                     ??GL_FillPolygon_3:
   \   00007A   EE           MOV     A,R6
   \   00007B   2401         ADD     A,#0x1
   \   00007D   0E           INC     R6
   \   00007E   EF           MOV     A,R7
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FF           MOV     R7,A
   \                     ??GL_FillPolygon_0:
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00008A   40B4         JC      ??GL_FillPolygon_1
    220          /* Use Clipping rect to reduce calculation (if possible) */
    221            if (GUI_Context.pClipRect_HL) {
   \   00008C   90....       MOV     DPTR,#GUI_Context + 15
   \   00008F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000092   E8           MOV     A,R0
   \   000093   49           ORL     A,R1
   \   000094   6043         JZ      ??GL_FillPolygon_4
    222              if (yMax > (GUI_Context.pClipRect_HL->y1 - yOff))
   \   000096   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000099   F8           MOV     R0,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   95..         SUBB    A,?V0 + 7
   \   00009E   F9           MOV     R1,A
   \   00009F   C3           CLR     C
   \   0000A0   E8           MOV     A,R0
   \   0000A1   95..         SUBB    A,?V0 + 0
   \   0000A3   E9           MOV     A,R1
   \   0000A4   95..         SUBB    A,?V0 + 1
   \   0000A6   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000A8   65D0         XRL     A,PSW
   \   0000AA   33           RLC     A
   \   0000AB   5011         JNC     ??GL_FillPolygon_5
    223                yMax = (GUI_Context.pClipRect_HL->y1 - yOff);
   \   0000AD   90....       MOV     DPTR,#GUI_Context + 15
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F8           MOV     R0,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000B6   F5..         MOV     ?V0 + 0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   95..         SUBB    A,?V0 + 7
   \   0000BC   F5..         MOV     ?V0 + 1,A
    224              if (yMin < (GUI_Context.pClipRect_HL->y0 - yOff))
   \                     ??GL_FillPolygon_5:
   \   0000BE   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000C1   F8           MOV     R0,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   95..         SUBB    A,?V0 + 7
   \   0000C6   F9           MOV     R1,A
   \   0000C7   C3           CLR     C
   \   0000C8   EA           MOV     A,R2
   \   0000C9   98           SUBB    A,R0
   \   0000CA   EB           MOV     A,R3
   \   0000CB   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000CE   5009         JNC     ??GL_FillPolygon_4
    225                yMin = (GUI_Context.pClipRect_HL->y0 - yOff);
   \   0000D0   12....       LCALL   ?Subroutine3 & 0xFFFF
    226            }
   \                     ??CrossCallReturnLabel_7:
   \   0000D3   FA           MOV     R2,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   95..         SUBB    A,?V0 + 7
   \   0000D8   FB           MOV     R3,A
    227          /* Second step: Calculate and draw horizontal lines */
    228            for (y=yMin; y<=yMax; y++) {
   \                     ??GL_FillPolygon_4:
   \   0000D9   8A..         MOV     ?V0 + 2,R2
   \   0000DB   8B..         MOV     ?V0 + 3,R3
   \   0000DD   8066         SJMP    ??GL_FillPolygon_6
   \                     ??GL_FillPolygon_7:
   \   0000DF   E5..         MOV     A,?V0 + 10
   \   0000E1   C3           CLR     C
   \   0000E2   33           RLC     A
   \   0000E3   F8           MOV     R0,A
   \   0000E4   E5..         MOV     A,?V0 + 11
   \   0000E6   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000E9   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000EC   85..82       MOV     DPL,?XSP + 0
   \   0000EF   85..83       MOV     DPH,?XSP + 1
   \   0000F2   E8           MOV     A,R0
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E9           MOV     A,R1
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   E5..         MOV     A,?V0 + 8
   \   0000F9   602A         JZ      ??GL_FillPolygon_8
   \   0000FB                ; Setup parameters for call to function LCD_DrawHLine
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   25..         ADD     A,?V0 + 14
   \   000104   F5..         MOV     ?V0 + 12,A
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   35..         ADDC    A,?V0 + 15
   \   00010A   F5..         MOV     ?V0 + 13,A
   \   00010C   78..         MOV     R0,#?V0 + 12
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   EE           MOV     A,R6
   \   000112   FC           MOV     R4,A
   \   000113   EF           MOV     A,R7
   \   000114   FD           MOV     R5,A
   \   000115   E5..         MOV     A,?V0 + 14
   \   000117   2A           ADD     A,R2
   \   000118   FA           MOV     R2,A
   \   000119   E5..         MOV     A,?V0 + 15
   \   00011B   3B           ADDC    A,R3
   \   00011C   FB           MOV     R3,A
   \   00011D   12....       LCALL   ??LCD_DrawHLine?relay
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GL_FillPolygon_8:
   \   000125   63..01       XRL     ?V0 + 8,#0x1
   \   000128   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00012B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00012E   90....       MOV     DPTR,#GL_FP_Cnt
   \   000131   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000134   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000137   40A6         JC      ??GL_FillPolygon_7
    229              _Init();
    230              /* find next intersection and count lines*/
    231              for (i=0; i<NumPoints; i++) {
    232                int i1 = (i < (NumPoints - 1)) ? i + 1 : 0;
    233                int y0 = (paPoint + i )->y;
    234                int y1 = (paPoint + i1)->y;
    235                /* Check if starting point is on line */
    236                if (y0 == y) {
    237                  if (y1 == y) {  /* Add the entire line */
    238                    _DrawHLine((paPoint + i )->x + xOff , y + yOff, (paPoint + i1)->x + xOff);
    239                  } else {        /* Add only one point */
    240                    int yPrev = _GetPrevPointDiffy(paPoint, i, NumPoints, y);
    241                    if (yPrev != y) {
    242                      _AddPoint((paPoint + i)->x, y, yPrev - y, y1 - y, xOff, yOff);
    243                    } 
    244                  }
    245                } else if (y1 != y) {  /* Ignore if end-point is on the line */
    246                  if (((y1 >= y) && (y0 <= y)) || ((y0 >= y) && (y1 <= y))) {
    247                    int xIntersect;
    248                    if (_CheckYInterSect(y, &xIntersect, paPoint + i, paPoint + i1)) {
    249                      _Add(xIntersect);
    250                    }
    251                  }
    252                }
    253              }
    254              _Flush(xOff, y + yOff);
   \   000139   E5..         MOV     A,?V0 + 2
   \   00013B   2401         ADD     A,#0x1
   \   00013D   F5..         MOV     ?V0 + 2,A
   \   00013F   E5..         MOV     A,?V0 + 3
   \   000141   3400         ADDC    A,#0x0
   \   000143   F5..         MOV     ?V0 + 3,A
   \                     ??GL_FillPolygon_6:
   \   000145   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000148   5003         JNC     $+5
   \   00014A   02....       LJMP    ??GL_FillPolygon_9 & 0xFFFF
   \   00014D   90....       MOV     DPTR,#GL_FP_Cnt
   \   000150   E4           CLR     A
   \   000151   F0           MOVX    @DPTR,A
   \   000152   A3           INC     DPTR
   \   000153   F0           MOVX    @DPTR,A
   \   000154   FE           MOV     R6,A
   \   000155   02....       LJMP    ??GL_FillPolygon_10 & 0xFFFF
   \                     ??GL_FillPolygon_11:
   \   000158   E5..         MOV     A,?V0 + 2
   \   00015A   6C           XRL     A,R4
   \   00015B   7003         JNZ     ??GL_FillPolygon_12
   \   00015D   E5..         MOV     A,?V0 + 3
   \   00015F   6D           XRL     A,R5
   \                     ??GL_FillPolygon_12:
   \   000160   6078         JZ      ??GL_FillPolygon_13
   \   000162   C3           CLR     C
   \   000163   EC           MOV     A,R4
   \   000164   95..         SUBB    A,?V0 + 2
   \   000166   ED           MOV     A,R5
   \   000167   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00016A   4010         JC      ??GL_FillPolygon_14
   \   00016C   C3           CLR     C
   \   00016D   E5..         MOV     A,?V0 + 2
   \   00016F   95..         SUBB    A,?V0 + 10
   \   000171   E5..         MOV     A,?V0 + 3
   \   000173   95..         SUBB    A,?V0 + 11
   \   000175   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000177   65D0         XRL     A,PSW
   \   000179   33           RLC     A
   \   00017A   501A         JNC     ??GL_FillPolygon_15
   \                     ??GL_FillPolygon_14:
   \   00017C   C3           CLR     C
   \   00017D   E5..         MOV     A,?V0 + 10
   \   00017F   95..         SUBB    A,?V0 + 2
   \   000181   E5..         MOV     A,?V0 + 11
   \   000183   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000186   4052         JC      ??GL_FillPolygon_13
   \   000188   C3           CLR     C
   \   000189   E5..         MOV     A,?V0 + 2
   \   00018B   9C           SUBB    A,R4
   \   00018C   E5..         MOV     A,?V0 + 3
   \   00018E   9D           SUBB    A,R5
   \   00018F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000191   65D0         XRL     A,PSW
   \   000193   33           RLC     A
   \   000194   4044         JC      ??GL_FillPolygon_13
   \                     ??GL_FillPolygon_15:
   \   000196                ; Setup parameters for call to function _CheckYInterSect
   \   000196   8A..         MOV     ?V0 + 8,R2
   \   000198   8B..         MOV     ?V0 + 9,R3
   \   00019A   7402         MOV     A,#0x2
   \   00019C   78..         MOV     R0,#?V0 + 8
   \   00019E   12....       LCALL   ?S_SHL
   \   0001A1   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A7   8E..         MOV     ?V0 + 8,R6
   \   0001A9   8F..         MOV     ?V0 + 9,R7
   \   0001AB   7402         MOV     A,#0x2
   \   0001AD   78..         MOV     R0,#?V0 + 8
   \   0001AF   12....       LCALL   ?S_SHL
   \   0001B2   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B8   7404         MOV     A,#0x4
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   AC82         MOV     R4,DPL
   \   0001BF   AD83         MOV     R5,DPH
   \   0001C1   AA..         MOV     R2,?V0 + 2
   \   0001C3   AB..         MOV     R3,?V0 + 3
   \   0001C5   12....       LCALL   ??_CheckYInterSect?relay
   \   0001C8   7404         MOV     A,#0x4
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CD   8B..         MOV     ?V0 + 9,R3
   \   0001CF   EA           MOV     A,R2
   \   0001D0   45..         ORL     A,?V0 + 9
   \   0001D2   6006         JZ      ??GL_FillPolygon_13
   \   0001D4                ; Setup parameters for call to function _Add
   \   0001D4   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001D7   12....       LCALL   ??_Add?relay
   \                     ??GL_FillPolygon_13:
   \   0001DA   EE           MOV     A,R6
   \   0001DB   2401         ADD     A,#0x1
   \   0001DD   0E           INC     R6
   \   0001DE   EF           MOV     A,R7
   \   0001DF   3400         ADDC    A,#0x0
   \                     ??GL_FillPolygon_10:
   \   0001E1   FF           MOV     R7,A
   \   0001E2   7402         MOV     A,#0x2
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001EA   4003         JC      $+5
   \   0001EC   02....       LJMP    ??GL_FillPolygon_16 & 0xFFFF
   \   0001EF   7402         MOV     A,#0x2
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   24FF         ADD     A,#-0x1
   \   0001F7   18           DEC     R0
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   34FF         ADDC    A,#-0x1
   \   0001FC   F9           MOV     R1,A
   \   0001FD   C3           CLR     C
   \   0001FE   EE           MOV     A,R6
   \   0001FF   98           SUBB    A,R0
   \   000200   EF           MOV     A,R7
   \   000201   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000204   500A         JNC     ??GL_FillPolygon_17
   \   000206   EE           MOV     A,R6
   \   000207   2401         ADD     A,#0x1
   \   000209   FA           MOV     R2,A
   \   00020A   EF           MOV     A,R7
   \   00020B   3400         ADDC    A,#0x0
   \   00020D   FB           MOV     R3,A
   \   00020E   8004         SJMP    ??GL_FillPolygon_18
   \                     ??GL_FillPolygon_17:
   \   000210   7A00         MOV     R2,#0x0
   \   000212   7B00         MOV     R3,#0x0
   \                     ??GL_FillPolygon_18:
   \   000214   8E..         MOV     ?V0 + 8,R6
   \   000216   8F..         MOV     ?V0 + 9,R7
   \   000218   7402         MOV     A,#0x2
   \   00021A   78..         MOV     R0,#?V0 + 8
   \   00021C   12....       LCALL   ?S_SHL
   \   00021F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000222   F5..         MOV     ?V0 + 10,A
   \   000224   A3           INC     DPTR
   \   000225   E0           MOVX    A,@DPTR
   \   000226   F5..         MOV     ?V0 + 11,A
   \   000228   8A..         MOV     ?V0 + 8,R2
   \   00022A   8B..         MOV     ?V0 + 9,R3
   \   00022C   7402         MOV     A,#0x2
   \   00022E   78..         MOV     R0,#?V0 + 8
   \   000230   12....       LCALL   ?S_SHL
   \   000233   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000236   FC           MOV     R4,A
   \   000237   A3           INC     DPTR
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FD           MOV     R5,A
   \   00023A   E5..         MOV     A,?V0 + 2
   \   00023C   65..         XRL     A,?V0 + 10
   \   00023E   7004         JNZ     ??GL_FillPolygon_19
   \   000240   E5..         MOV     A,?V0 + 3
   \   000242   65..         XRL     A,?V0 + 11
   \                     ??GL_FillPolygon_19:
   \   000244   6003         JZ      $+5
   \   000246   02....       LJMP    ??GL_FillPolygon_11 & 0xFFFF
   \   000249   E5..         MOV     A,?V0 + 2
   \   00024B   6C           XRL     A,R4
   \   00024C   7003         JNZ     ??GL_FillPolygon_20
   \   00024E   E5..         MOV     A,?V0 + 3
   \   000250   6D           XRL     A,R5
   \                     ??GL_FillPolygon_20:
   \   000251   705E         JNZ     ??GL_FillPolygon_21
   \   000253   8A..         MOV     ?V0 + 8,R2
   \   000255   8B..         MOV     ?V0 + 9,R3
   \   000257   7402         MOV     A,#0x2
   \   000259   78..         MOV     R0,#?V0 + 8
   \   00025B   12....       LCALL   ?S_SHL
   \   00025E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000261   F5..         MOV     ?V0 + 10,A
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   35..         ADDC    A,?V0 + 15
   \   000267   F5..         MOV     ?V0 + 11,A
   \   000269   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00026C   8E..         MOV     ?V0 + 8,R6
   \   00026E   8F..         MOV     ?V0 + 9,R7
   \   000270   7402         MOV     A,#0x2
   \   000272   78..         MOV     R0,#?V0 + 8
   \   000274   12....       LCALL   ?S_SHL
   \   000277   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00027A   F5..         MOV     ?V0 + 8,A
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   35..         ADDC    A,?V0 + 15
   \   000280   F5..         MOV     ?V0 + 9,A
   \   000282   C3           CLR     C
   \   000283   E5..         MOV     A,?V0 + 8
   \   000285   95..         SUBB    A,?V0 + 10
   \   000287   E5..         MOV     A,?V0 + 9
   \   000289   95..         SUBB    A,?V0 + 11
   \   00028B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00028D   65D0         XRL     A,PSW
   \   00028F   33           RLC     A
   \   000290   5014         JNC     ??GL_FillPolygon_22
   \   000292                ; Setup parameters for call to function LCD_DrawHLine
   \   000292   78..         MOV     R0,#?V0 + 10
   \   000294   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \                     ??GL_FillPolygon_23:
   \   000297   AA..         MOV     R2,?V0 + 8
   \   000299   AB..         MOV     R3,?V0 + 9
   \                     ??GL_FillPolygon_24:
   \   00029B   12....       LCALL   ??LCD_DrawHLine?relay
   \   00029E   7402         MOV     A,#0x2
   \   0002A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A3   02....       LJMP    ??GL_FillPolygon_13 & 0xFFFF
   \                     ??GL_FillPolygon_22:
   \   0002A6                ; Setup parameters for call to function LCD_DrawHLine
   \   0002A6   78..         MOV     R0,#?V0 + 8
   \   0002A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AB   AA..         MOV     R2,?V0 + 10
   \   0002AD   AB..         MOV     R3,?V0 + 11
   \   0002AF   80EA         SJMP    ??GL_FillPolygon_24
   \                     ??GL_FillPolygon_21:
   \   0002B1   EE           MOV     A,R6
   \   0002B2   FA           MOV     R2,A
   \   0002B3   EF           MOV     A,R7
   \   0002B4   FB           MOV     R3,A
   \   0002B5   75..00       MOV     ?V0 + 10,#0x0
   \   0002B8   75..00       MOV     ?V0 + 11,#0x0
   \   0002BB   8003         SJMP    ??CrossCallReturnLabel_19
   \                     ??GL_FillPolygon_25:
   \   0002BD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0002C0   7402         MOV     A,#0x2
   \   0002C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   24FF         ADD     A,#-0x1
   \   0002C8   F8           MOV     R0,A
   \   0002C9   A3           INC     DPTR
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   34FF         ADDC    A,#-0x1
   \   0002CD   F9           MOV     R1,A
   \   0002CE   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0002D1   4003         JC      $+5
   \   0002D3   02....       LJMP    ??GL_FillPolygon_13 & 0xFFFF
   \   0002D6   EA           MOV     A,R2
   \   0002D7   4B           ORL     A,R3
   \   0002D8   6007         JZ      ??GL_FillPolygon_26
   \   0002DA   EA           MOV     A,R2
   \   0002DB   24FF         ADD     A,#-0x1
   \   0002DD   1A           DEC     R2
   \   0002DE   EB           MOV     A,R3
   \   0002DF   800B         SJMP    ??GL_FillPolygon_27
   \                     ??GL_FillPolygon_26:
   \   0002E1   7402         MOV     A,#0x2
   \   0002E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E6   E0           MOVX    A,@DPTR
   \   0002E7   24FF         ADD     A,#-0x1
   \   0002E9   FA           MOV     R2,A
   \   0002EA   A3           INC     DPTR
   \   0002EB   E0           MOVX    A,@DPTR
   \                     ??GL_FillPolygon_27:
   \   0002EC   34FF         ADDC    A,#-0x1
   \   0002EE   FB           MOV     R3,A
   \   0002EF   8A..         MOV     ?V0 + 8,R2
   \   0002F1   8B..         MOV     ?V0 + 9,R3
   \   0002F3   7402         MOV     A,#0x2
   \   0002F5   78..         MOV     R0,#?V0 + 8
   \   0002F7   12....       LCALL   ?S_SHL
   \   0002FA   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002FD   A3           INC     DPTR
   \   0002FE   A3           INC     DPTR
   \   0002FF   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000302   E5..         MOV     A,?V0 + 2
   \   000304   68           XRL     A,R0
   \   000305   7003         JNZ     ??GL_FillPolygon_28
   \   000307   E5..         MOV     A,?V0 + 3
   \   000309   69           XRL     A,R1
   \                     ??GL_FillPolygon_28:
   \   00030A   60B1         JZ      ??GL_FillPolygon_25
   \   00030C   E8           MOV     A,R0
   \   00030D   FA           MOV     R2,A
   \   00030E   E9           MOV     A,R1
   \   00030F   FB           MOV     R3,A
   \   000310   8E..         MOV     ?V0 + 8,R6
   \   000312   8F..         MOV     ?V0 + 9,R7
   \   000314   7402         MOV     A,#0x2
   \   000316   78..         MOV     R0,#?V0 + 8
   \   000318   12....       LCALL   ?S_SHL
   \   00031B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00031E   E0           MOVX    A,@DPTR
   \   00031F   F5..         MOV     ?V0 + 8,A
   \   000321   A3           INC     DPTR
   \   000322   E0           MOVX    A,@DPTR
   \   000323   F5..         MOV     ?V0 + 9,A
   \   000325   EA           MOV     A,R2
   \   000326   C3           CLR     C
   \   000327   95..         SUBB    A,?V0 + 2
   \   000329   EB           MOV     A,R3
   \   00032A   95..         SUBB    A,?V0 + 3
   \   00032C   F9           MOV     R1,A
   \   00032D   EC           MOV     A,R4
   \   00032E   C3           CLR     C
   \   00032F   95..         SUBB    A,?V0 + 2
   \   000331   ED           MOV     A,R5
   \   000332   95..         SUBB    A,?V0 + 3
   \   000334   FB           MOV     R3,A
   \   000335   E9           MOV     A,R1
   \   000336   6B           XRL     A,R3
   \   000337   C3           CLR     C
   \   000338   9400         SUBB    A,#0x0
   \   00033A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00033C   65D0         XRL     A,PSW
   \   00033E   33           RLC     A
   \   00033F   4017         JC      ??GL_FillPolygon_29
   \   000341   E5..         MOV     A,?V0 + 8
   \   000343   25..         ADD     A,?V0 + 14
   \   000345   F5..         MOV     ?V0 + 8,A
   \   000347   E5..         MOV     A,?V0 + 9
   \   000349   35..         ADDC    A,?V0 + 15
   \   00034B   F5..         MOV     ?V0 + 9,A
   \   00034D                ; Setup parameters for call to function LCD_DrawHLine
   \   00034D   78..         MOV     R0,#?V0 + 8
   \   00034F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000352   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000355   02....       LJMP    ??GL_FillPolygon_23 & 0xFFFF
   \                     ??GL_FillPolygon_29:
   \   000358                ; Setup parameters for call to function _Add
   \   000358   AA..         MOV     R2,?V0 + 8
   \   00035A   AB..         MOV     R3,?V0 + 9
   \   00035C   02....       LJMP    ??CrossCallReturnLabel_58 & 0xFFFF
   \                     ??GL_FillPolygon_16:
   \   00035F   E5..         MOV     A,?V0 + 2
   \   000361   25..         ADD     A,?V0 + 6
   \   000363   FE           MOV     R6,A
   \   000364   E5..         MOV     A,?V0 + 3
   \   000366   35..         ADDC    A,?V0 + 7
   \   000368   FF           MOV     R7,A
   \   000369   7A00         MOV     R2,#0x0
   \   00036B   7B00         MOV     R3,#0x0
   \   00036D   8A..         MOV     ?V0 + 8,R2
   \   00036F   8A..         MOV     ?V0 + 10,R2
   \   000371   8A..         MOV     ?V0 + 11,R2
   \   000373   02....       LJMP    ??CrossCallReturnLabel_18 & 0xFFFF
    255            }  
    256          }
   \                     ??GL_FillPolygon_9:
   \   000376   7404         MOV     A,#0x4
   \   000378   12....       LCALL   ?DEALLOC_XSTACK8
   \   00037B   7F10         MOV     R7,#0x10
   \   00037D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   25..         ADD     A,?V0 + 6
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 3
   \   000007   35..         ADDC    A,?V0 + 7
   \   000009   FD           MOV     R5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   25..         ADD     A,?V0 + 8
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   35..         ADDC    A,?V0 + 9
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   25..         ADD     A,?V0 + 8
   \   000004   F5..         MOV     ?V0 + 8,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   35..         ADDC    A,?V0 + 9
   \   00000A   F5..         MOV     ?V0 + 9,A
   \   00000C   78..         MOV     R0,#?V0 + 8
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25..         ADD     A,?V0 + 14
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 0
   \   000003   95..         SUBB    A,?V0 + 2
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007                REQUIRE ??Subroutine24_0
   \   000007                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   95..         SUBB    A,?V0 + 3
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV     A,?V0 + 10
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 10,A
   \   000006   E5..         MOV     A,?V0 + 11
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 11,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 10
   \   000003   98           SUBB    A,R0
   \   000004   E5..         MOV     A,?V0 + 11
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#GUI_Context + 15
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   C3           CLR     C
   \   00000F   95..         SUBB    A,?V0 + 6
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C3           CLR     C
   \   00000D   95..         SUBB    A,?V0 + 6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   C3           CLR     C
   \   000006   EE           MOV     A,R6
   \   000007   98           SUBB    A,R0
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00000C   22           RET
    257          
    258          /*********************************************************************
    259          *
    260          *       GUI_FillPolygon
    261          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void GUI_FillPolygon(const GUI_POINT* pPoints, int NumPoints, int x0, int y0) {
   \                     GUI_FillPolygon:
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   740E         MOV     A,#0xe
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 3,A
    263            halIntState_t state;
    264            GUI_LOCK(state);
   \   00001D   E5A8         MOV     A,0xa8
   \   00001F   FE           MOV     R6,A
   \   000020   C2AF         CLR     0xa8.7
    265            #if (GUI_WINSUPPORT)
    266              WM_ADDORG(x0, y0);
    267              WM_ITERATE_START(NULL); {
    268            #endif
    269            GL_FillPolygon (pPoints, NumPoints, x0, y0);
   \   000022                ; Setup parameters for call to function GL_FillPolygon
   \   000022   78..         MOV     R0,#?V0 + 2
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   12....       LCALL   ??GL_FillPolygon?relay
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    270            #if (GUI_WINSUPPORT)
    271              } WM_ITERATE_END();
    272            #endif
    273            GUI_UNLOCK(state);
   \   000034   EE           MOV     A,R6
   \   000035   A2E7         MOV     C,0xE0 /* A   */.7
   \   000037   92AF         MOV     0xa8.7,C
    274          }
   \   000039   7F04         MOV     R7,#0x4
   \   00003B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00003E                REQUIRE _A_IEN0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_CheckYInterSect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _CheckYInterSect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_Add?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Add

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_FillPolygon?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_FillPolygon

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_FillPolygon?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_FillPolygon
    275          
    276          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function              ISTACK PSTACK XSTACK
     --------              ------ ------ ------
     GL_FillPolygon            0      0     48
       -> LCD_DrawHLine        0      0     60
       -> _CheckYInterSect     0      0     64
       -> _Add                 0      0     56
       -> LCD_DrawHLine        0      0     60
       -> LCD_DrawHLine        0      0     60
       -> LCD_DrawHLine        0      0     60
       -> _Add                 0      0     56
     GUI_FillPolygon           0      0     20
       -> GL_FillPolygon       0      0     32
     _Add                      0      0     37
     _CheckYInterSect          2      0     50


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_IEN0                     1
     GL_FP_Cnt                   2
     _aX                        24
     _CheckYInterSect          277
     ?Subroutine9                1
     ??Subroutine22_0            2
     ??Subroutine23_0           12
     ?Subroutine8                8
     ?Subroutine5               13
     ?Subroutine0               15
     ?Subroutine6                9
     ?Subroutine19               7
     ?Subroutine21               7
     ??Subroutine26_0            6
     _Add                      143
     ?Subroutine12              13
     GL_FillPolygon            896
     ?Subroutine18              11
     ?Subroutine17               4
     ?Subroutine20              13
     ?Subroutine16              15
     ?Subroutine15               7
     ?Subroutine14               7
     ?Subroutine13               7
     ??Subroutine24_0            8
     ?Subroutine11              13
     ?Subroutine10               6
     ??Subroutine25_0            4
     ?Subroutine7                6
     ?Subroutine4                6
     ?Subroutine3               18
     ?Subroutine2               16
     ?Subroutine1               13
     GUI_FillPolygon            62
     __Constant_1                4
     ??_CheckYInterSect?relay    6
     ??_Add?relay                6
     ??GL_FillPolygon?relay      6
     ??GUI_FillPolygon?relay     6

 
 1 625 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    26 bytes in segment XDATA_Z
 
 1 649 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    26 bytes of XDATA memory

Errors: none
Warnings: none
