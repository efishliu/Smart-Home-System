///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jun/2016  16:18:35 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\C /
//                          ore\LCD.c                                         /
//    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Components\uCGUI\Core\LCD.c -D               /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D     /
//                          LCD_SUPPORTED -D NV_INIT -lC                      /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\    /
//                          -lA F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ /
//                          ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Utilities\SerialApp\CC2530DB\CoordinatorEB\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\ -I                    /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\Public\ -I          /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\uCGUI\MultiLayer\ -I       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโล /
//                          ฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\Coordinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\ZMain\TI2530DB\ -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\ -I                       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\single_chip\ -I           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z /
//                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม /
//                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 /
//                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\LCD /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??LCD_Color2Index?relay
        FUNCTION ??LCD_Color2Index?relay,0203H
        PUBLIC ??LCD_DrawBitmap?relay
        FUNCTION ??LCD_DrawBitmap?relay,0203H
        PUBLIC ??LCD_DrawHLine?relay
        FUNCTION ??LCD_DrawHLine?relay,0203H
        PUBLIC ??LCD_DrawPixel?relay
        FUNCTION ??LCD_DrawPixel?relay,0203H
        PUBLIC ??LCD_FillRect?relay
        FUNCTION ??LCD_FillRect?relay,0203H
        PUBLIC ??LCD_Index2Color?relay
        FUNCTION ??LCD_Index2Color?relay,0203H
        PUBLIC ??LCD_Init?relay
        FUNCTION ??LCD_Init?relay,0203H
        PUBLIC ??LCD_SetBkColor?relay
        FUNCTION ??LCD_SetBkColor?relay,0203H
        PUBLIC ??LCD_SetBkColorIndex?relay
        FUNCTION ??LCD_SetBkColorIndex?relay,0203H
        PUBLIC ??LCD_SetClipRectMax?relay
        FUNCTION ??LCD_SetClipRectMax?relay,0203H
        PUBLIC ??LCD_SetColor?relay
        FUNCTION ??LCD_SetColor?relay,0203H
        PUBLIC ??LCD_SetColorIndex?relay
        FUNCTION ??LCD_SetColorIndex?relay,0203H
        PUBLIC ??LCD_SetDrawMode?relay
        FUNCTION ??LCD_SetDrawMode?relay,0203H
        PUBLIC LCD_Color2Index
        FUNCTION LCD_Color2Index,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC LCD_DrawBitmap
        FUNCTION LCD_DrawBitmap,0a1203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 55, STACK
        PUBLIC LCD_DrawHLine
        FUNCTION LCD_DrawHLine,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC LCD_DrawPixel
        FUNCTION LCD_DrawPixel,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC LCD_FillRect
        FUNCTION LCD_FillRect,021203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC LCD_Index2Color
        FUNCTION LCD_Index2Color,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_Init
        FUNCTION LCD_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC LCD_SetBkColor
        FUNCTION LCD_SetBkColor,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC LCD_SetBkColorIndex
        FUNCTION LCD_SetBkColorIndex,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_SetClipRectMax
        FUNCTION LCD_SetClipRectMax,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_SetColor
        FUNCTION LCD_SetColor,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC LCD_SetColorIndex
        FUNCTION LCD_SetColorIndex,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_SetDrawMode
        FUNCTION LCD_SetDrawMode,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
LCD_L0_XorPixel     SYMBOL "LCD_L0_XorPixel"
LCD_L0_SetPixelIndex SYMBOL "LCD_L0_SetPixelIndex"
LCD_L0_DrawHLine    SYMBOL "LCD_L0_DrawHLine"
LCD_L0_FillRect     SYMBOL "LCD_L0_FillRect"
LCD_L0_DrawBitmap   SYMBOL "LCD_L0_DrawBitmap"
LCD_L0_GetRect      SYMBOL "LCD_L0_GetRect"
LCD_L0_Init         SYMBOL "LCD_L0_Init"
LCD_InitLUT         SYMBOL "LCD_InitLUT"
LCD_L0_On           SYMBOL "LCD_L0_On"
LCD_L0_Color2Index  SYMBOL "LCD_L0_Color2Index"
LCD_L0_Index2Color  SYMBOL "LCD_L0_Index2Color"
??LCD_InitLUT?relay SYMBOL "?relay", LCD_InitLUT
??LCD_L0_Color2Index?relay SYMBOL "?relay", LCD_L0_Color2Index
??LCD_L0_DrawBitmap?relay SYMBOL "?relay", LCD_L0_DrawBitmap
??LCD_L0_DrawHLine?relay SYMBOL "?relay", LCD_L0_DrawHLine
??LCD_L0_FillRect?relay SYMBOL "?relay", LCD_L0_FillRect
??LCD_L0_GetRect?relay SYMBOL "?relay", LCD_L0_GetRect
??LCD_L0_Index2Color?relay SYMBOL "?relay", LCD_L0_Index2Color
??LCD_L0_Init?relay SYMBOL "?relay", LCD_L0_Init
??LCD_L0_On?relay   SYMBOL "?relay", LCD_L0_On
??LCD_L0_SetPixelIndex?relay SYMBOL "?relay", LCD_L0_SetPixelIndex
??LCD_L0_XorPixel?relay SYMBOL "?relay", LCD_L0_XorPixel
LCD_Color2Index     SYMBOL "LCD_Color2Index"
??LCD_Color2Index?relay SYMBOL "?relay", LCD_Color2Index
LCD_DrawBitmap      SYMBOL "LCD_DrawBitmap"
??LCD_DrawBitmap?relay SYMBOL "?relay", LCD_DrawBitmap
LCD_DrawHLine       SYMBOL "LCD_DrawHLine"
??LCD_DrawHLine?relay SYMBOL "?relay", LCD_DrawHLine
LCD_DrawPixel       SYMBOL "LCD_DrawPixel"
??LCD_DrawPixel?relay SYMBOL "?relay", LCD_DrawPixel
LCD_FillRect        SYMBOL "LCD_FillRect"
??LCD_FillRect?relay SYMBOL "?relay", LCD_FillRect
LCD_Index2Color     SYMBOL "LCD_Index2Color"
??LCD_Index2Color?relay SYMBOL "?relay", LCD_Index2Color
LCD_Init            SYMBOL "LCD_Init"
??LCD_Init?relay    SYMBOL "?relay", LCD_Init
LCD_SetBkColor      SYMBOL "LCD_SetBkColor"
??LCD_SetBkColor?relay SYMBOL "?relay", LCD_SetBkColor
LCD_SetBkColorIndex SYMBOL "LCD_SetBkColorIndex"
??LCD_SetBkColorIndex?relay SYMBOL "?relay", LCD_SetBkColorIndex
LCD_SetClipRectMax  SYMBOL "LCD_SetClipRectMax"
??LCD_SetClipRectMax?relay SYMBOL "?relay", LCD_SetClipRectMax
LCD_SetColor        SYMBOL "LCD_SetColor"
??LCD_SetColor?relay SYMBOL "?relay", LCD_SetColor
LCD_SetColorIndex   SYMBOL "LCD_SetColorIndex"
??LCD_SetColorIndex?relay SYMBOL "?relay", LCD_SetColorIndex
LCD_SetDrawMode     SYMBOL "LCD_SetDrawMode"
??LCD_SetDrawMode?relay SYMBOL "?relay", LCD_SetDrawMode

        EXTERN LCD_L0_XorPixel
        FUNCTION LCD_L0_XorPixel,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_SetPixelIndex
        FUNCTION LCD_L0_SetPixelIndex,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_DrawHLine
        FUNCTION LCD_L0_DrawHLine,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_FillRect
        FUNCTION LCD_L0_FillRect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_DrawBitmap
        FUNCTION LCD_L0_DrawBitmap,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_GetRect
        FUNCTION LCD_L0_GetRect,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_Init
        FUNCTION LCD_L0_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_InitLUT
        FUNCTION LCD_InitLUT,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_On
        FUNCTION LCD_L0_On,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_Color2Index
        FUNCTION LCD_L0_Color2Index,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_Index2Color
        FUNCTION LCD_L0_Index2Color,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??LCD_InitLUT?relay
        FUNCTION ??LCD_InitLUT?relay,00H
        EXTERN ??LCD_L0_Color2Index?relay
        FUNCTION ??LCD_L0_Color2Index?relay,00H
        EXTERN ??LCD_L0_DrawBitmap?relay
        FUNCTION ??LCD_L0_DrawBitmap?relay,00H
        EXTERN ??LCD_L0_DrawHLine?relay
        FUNCTION ??LCD_L0_DrawHLine?relay,00H
        EXTERN ??LCD_L0_FillRect?relay
        FUNCTION ??LCD_L0_FillRect?relay,00H
        EXTERN ??LCD_L0_GetRect?relay
        FUNCTION ??LCD_L0_GetRect?relay,00H
        EXTERN ??LCD_L0_Index2Color?relay
        FUNCTION ??LCD_L0_Index2Color?relay,00H
        EXTERN ??LCD_L0_Init?relay
        FUNCTION ??LCD_L0_Init?relay,00H
        EXTERN ??LCD_L0_On?relay
        FUNCTION ??LCD_L0_On?relay,00H
        EXTERN ??LCD_L0_SetPixelIndex?relay
        FUNCTION ??LCD_L0_SetPixelIndex?relay,00H
        EXTERN ??LCD_L0_XorPixel?relay
        FUNCTION ??LCD_L0_XorPixel?relay,00H
        EXTERN GUI_Context
        EXTERN GUI_pLCD_APIList

// F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/GUI
//    4 *                        Universal graphic software for embedded applications
//    5 *
//    6 *                       (c) Copyright 2002, Micrium Inc., Weston, FL
//    7 *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
//    8 *
//    9 *              ตC/GUI is protected by international copyright laws. Knowledge of the
//   10 *              source code may not be used to write a similar product. This file may
//   11 *              only be used in accordance with a license and should not be redistributed
//   12 *              in any way. We appreciate your understanding and fairness.
//   13 *
//   14 ----------------------------------------------------------------------
//   15 File        : LCD.c
//   16 Purpose     : Link between GUI and LCD_L0
//   17               Performs most of the clipping.
//   18 ---------------------------END-OF-HEADER------------------------------
//   19 */
//   20 
//   21 #define LCD_C
//   22 
//   23 #include <stdio.h>
//   24 #include "GUI_Private.h"
//   25 #include "LCD_Private.h"
//   26 #include "GUIDebug.h"
//   27 
//   28 /*********************************************************************
//   29 *
//   30 *       Defines
//   31 *
//   32 **********************************************************************
//   33 */
//   34 
//   35 #define RETURN_IF_Y_OUT() \ 
//   36   if (y < GUI_Context.ClipRect.y0) return;             \ 
//   37   if (y > GUI_Context.ClipRect.y1) return;
//   38 
//   39 #define RETURN_IF_X_OUT() \ 
//   40   if (x < GUI_Context.ClipRect.x0) return;             \ 
//   41   if (x > GUI_Context.ClipRect.x1) return;
//   42 
//   43 #define CLIP_X() \ 
//   44   if (x0 < GUI_Context.ClipRect.x0) { x0 = GUI_Context.ClipRect.x0; } \ 
//   45   if (x1 > GUI_Context.ClipRect.x1) { x1 = GUI_Context.ClipRect.x1; }
//   46 
//   47 #define CLIP_Y() \ 
//   48   if (y0 < GUI_Context.ClipRect.y0) { y0 = GUI_Context.ClipRect.y0; } \ 
//   49   if (y1 > GUI_Context.ClipRect.y1) { y1 = GUI_Context.ClipRect.y1; }
//   50 
//   51 /*********************************************************************
//   52 *
//   53 *       Static code
//   54 *
//   55 **********************************************************************
//   56 */
//   57 /*********************************************************************
//   58 *
//   59 *       _GetColorIndex
//   60 */
//   61 static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
//   62   return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
//   63 }
//   64 
//   65 /*********************************************************************
//   66 *
//   67 *       Public code
//   68 *
//   69 **********************************************************************
//   70 */
//   71 /*********************************************************************
//   72 *
//   73 *       LCD_SetColorIndex
//   74 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   75 void LCD_SetColorIndex(int Index) {
LCD_SetColorIndex:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function LCD_SetColorIndex
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   76   LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JC      ??LCD_SetColorIndex_0
        SETB    B.0
        SJMP    ??LCD_SetColorIndex_1
??LCD_SetColorIndex_0:
        CLR     B.0
??LCD_SetColorIndex_1:
        MOV     C,B.0
        CLR     A
        RLC     A
        RLC     A
        MOV     R0,A
        MOV     A,#GUI_Context & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(GUI_Context >> 8) & 0xff
        ADDC    A,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//   77 }
//   78 
//   79 /*********************************************************************
//   80 *
//   81 *       LCD_SetBkColorIndex
//   82 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   83 void LCD_SetBkColorIndex(int Index) {
LCD_SetBkColorIndex:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function LCD_SetBkColorIndex
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   84   LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??LCD_SetBkColorIndex_0
        MOV     R0,#-0x1
        MOV     R1,#-0x1
        SJMP    ??LCD_SetBkColorIndex_1
??LCD_SetBkColorIndex_0:
        MOV     R0,#0x0
        MOV     R1,#0x0
??LCD_SetBkColorIndex_1:
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#GUI_Context & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(GUI_Context >> 8) & 0xff
        ADDC    A,R1
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock1
//   85 }
//   86 
//   87 /*********************************************************************
//   88 *
//   89 *       LCD_SetDrawMode
//   90 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   91 LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
LCD_SetDrawMode:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function LCD_SetDrawMode
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   92   LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R4
        MOV     R0,DPL
//   93   if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
        MOV     A,R2
        XRL     A,R4
        ANL     A,#0x4
        JZ      ??LCD_SetDrawMode_0
//   94     LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
        MOV     DPTR,#GUI_Context
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   95     LCD_BKCOLORINDEX    = LCD_COLORINDEX;
        INC     DPTR
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPTR,#GUI_Context
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   96     LCD_COLORINDEX = temp;
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   97   }
//   98   GUI_Context.DrawMode = dm;
??LCD_SetDrawMode_0:
        MOV     A,R2
        MOV     DPTR,#GUI_Context + 12
        MOVX    @DPTR,A
//   99   return OldDM;
        MOV     A,R0
        MOV     R2,A
        MOV     R3,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  100 }
//  101 
//  102 /*********************************************************************
//  103 *
//  104 *       LCD_DrawPixel
//  105 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void LCD_DrawPixel(int x, int y) {
LCD_DrawPixel:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function LCD_DrawPixel
        CODE
        FUNCALL LCD_DrawPixel, LCD_L0_XorPixel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawPixel, LCD_L0_SetPixelIndex
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  107   RETURN_IF_Y_OUT();
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??LCD_DrawPixel_0
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??LCD_DrawPixel_0
//  108   RETURN_IF_X_OUT();
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??LCD_DrawPixel_0
        MOV     DPTR,#GUI_Context + 8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??LCD_DrawPixel_0
//  109   if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??LCD_DrawPixel_1
//  110     LCDDEV_L0_XorPixel(x, y);
        ; Setup parameters for call to function LCD_L0_XorPixel
        LCALL   ??LCD_L0_XorPixel?relay
        SJMP    ??LCD_DrawPixel_0
//  111   } else {
//  112     LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
??LCD_DrawPixel_1:
        ; Setup parameters for call to function LCD_L0_SetPixelIndex
        MOV     DPTR,#GUI_Context + 2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 2)
        LCALL   ??LCD_L0_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
//  113   }
??LCD_DrawPixel_0:
        SJMP    ??Subroutine24_0
        CFI EndBlock cfiBlock3
//  114 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  115 
//  116 /*********************************************************************
//  117 *
//  118 *       LCD_DrawHLine
//  119 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  120 void LCD_DrawHLine(int x0, int y,  int x1) {
LCD_DrawHLine:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function LCD_DrawHLine
        CODE
        FUNCALL LCD_DrawHLine, LCD_L0_DrawHLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine26_0 & 0xFFFF
//  121   /* Perform clipping and check if there is something to do */
//  122   RETURN_IF_Y_OUT();
??CrossCallReturnLabel_56:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??LCD_DrawHLine_0
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      ??LCD_DrawHLine_0
//  123   CLIP_X();
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JNC     ??CrossCallReturnLabel_54
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        JNC     ??CrossCallReturnLabel_58
        LCALL   ?Subroutine5 & 0xFFFF
//  124   if (x1<x0)
??CrossCallReturnLabel_58:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_39:
        JC      ??LCD_DrawHLine_0
//  125     return;
//  126   /* Call driver to draw */
//  127   LCDDEV_L0_DrawHLine(x0, y, x1);
        ; Setup parameters for call to function LCD_L0_DrawHLine
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ??LCD_L0_DrawHLine?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI EndBlock cfiBlock6
//  128 }
??LCD_DrawHLine_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPTR,#GUI_Context + 10
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     DPTR,#GUI_Context + 4
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     DPTR,#GUI_Context + 4
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_44:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPTR,#GUI_Context + 6
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_43:
        CLR     C
        MOV     A,R4
        SUBB    A,R0
        MOV     A,R5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_4
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_5
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_0
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_1
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_2
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_33
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_34
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_35
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
//  129 
//  130 /*********************************************************************
//  131 *
//  132 *       LCD_FillRect
//  133 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 void LCD_FillRect(int x0, int y0, int x1, int y1) {
LCD_FillRect:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function LCD_FillRect
        CODE
        FUNCALL LCD_FillRect, LCD_L0_FillRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  135   /* Perform clipping and check if there is something to do */
//  136   CLIP_X();
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        JNC     ??CrossCallReturnLabel_55
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        JNC     ??CrossCallReturnLabel_59
        LCALL   ?Subroutine5 & 0xFFFF
//  137   if (x1<x0)
??CrossCallReturnLabel_59:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_40:
        JC      ??LCD_FillRect_0
//  138     return;
//  139   CLIP_Y();
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        JNC     ??CrossCallReturnLabel_68
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     DPTR,#GUI_Context + 10
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??LCD_FillRect_1
        MOV     DPTR,#GUI_Context + 10
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  140   if (y1<y0)
??LCD_FillRect_1:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R4
        MOV     A,?V0 + 3
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??LCD_FillRect_0
//  141     return;
//  142   /* Call driver to draw */
//  143   LCDDEV_L0_FillRect(x0,y0,x1,y1);
        ; Setup parameters for call to function LCD_L0_FillRect
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ??LCD_L0_FillRect?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  144 }
??LCD_FillRect_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R2
        MOV     A,?V0 + 1
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV     DPTR,#GUI_Context + 8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     DPTR,#GUI_Context + 8
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  145 
//  146 /*********************************************************************
//  147 *
//  148 *       LCD_DrawBitmap
//  149 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  150 void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
LCD_DrawBitmap:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function LCD_DrawBitmap
        CODE
//  151                        int BitsPerPixel, int BytesPerLine,
//  152                        const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
//  153 {
        FUNCALL LCD_DrawBitmap, LCD_L0_DrawBitmap
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawBitmap, LCD_FillRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x33
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  154   U8  Data = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  155   int x1, y1;
//  156   /* Handle rotation if necessary */
//  157   #if GUI_SUPPORT_ROTATION
//  158   if (GUI_pLCD_APIList) {
        MOV     DPTR,#GUI_pLCD_APIList
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      ??LCD_DrawBitmap_0
//  159     GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
        ; Setup parameters for indirect call
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 55)
        MOV     DPTR,#GUI_pLCD_APIList
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  160     return;
??LCD_DrawBitmap_1:
        MOV     A,#0xf
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 39)
//  161   }
//  162   #endif
//  163   /* Handle the optional Y-magnification */
//  164   y1 = y0 + ysize - 1;
??LCD_DrawBitmap_0:
        MOV     A,R4
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,R5
        ADDC    A,?V0 + 7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
//  165   x1 = x0 + xsize - 1;
        MOV     A,R2
        ADD     A,?V0 + 8
        MOV     R2,A
        MOV     A,R3
        ADDC    A,?V0 + 9
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
//  166 /*  Handle BITMAP without magnification */
//  167   if ((xMul | yMul) == 1) {
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOV     R3,A
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??LCD_DrawBitmap_2
        MOV     A,R3
??LCD_DrawBitmap_2:
        JZ      $+5
        LJMP    ??LCD_DrawBitmap_3 & 0xFFFF
//  168     int Diff;
//  169     /*  Clip y0 (top) */
//  170     Diff = GUI_Context.ClipRect.y0 - y0;
        MOV     DPTR,#GUI_Context + 6
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        MOV     R3,A
//  171     if (Diff > 0) {
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_62:
        JC      ??LCD_DrawBitmap_4
//  172       ysize -= Diff;
        LCALL   ?Subroutine18 & 0xFFFF
//  173       if (ysize <= 0) {
??CrossCallReturnLabel_60:
        JC      ??LCD_DrawBitmap_1
//  174 		    return;
//  175       }
//  176       y0     = GUI_Context.ClipRect.y0;
        LCALL   ?Subroutine13 & 0xFFFF
//  177       #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
//  178         pPixel += (U32)     Diff * (U32)     BytesPerLine;
//  179       #else
//  180         pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
??CrossCallReturnLabel_69:
        MOV     A,R2
        MOV     B,?V0 + 4
        MUL     AB
        XCH     A,R2
        MOV     ?V0 + 2,B
        MOV     B,?V0 + 5
        MUL     AB
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
        MOV     B,?V0 + 4
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 2
        MOV     R3,A
        MOV     A,?V0 + 10
        ADD     A,R2
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,R3
        MOV     ?V0 + 11,A
//  181       #endif
//  182     }
//  183     /*  Clip y1 (bottom) */
//  184     Diff = y1 - GUI_Context.ClipRect.y1;
??LCD_DrawBitmap_4:
        MOV     DPTR,#GUI_Context + 10
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R1
        SUBB    A,R3
        MOV     R3,A
//  185     if (Diff > 0) {
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JC      ??LCD_DrawBitmap_5
//  186       ysize -= Diff;
        LCALL   ?Subroutine18 & 0xFFFF
//  187       if (ysize <= 0) {
//  188 		    return;
//  189       }
//  190     }
??CrossCallReturnLabel_61:
        JNC     $+5
        LJMP    ??LCD_DrawBitmap_1 & 0xFFFF
//  191     /*        Clip right side    */
//  192     Diff = x1 - GUI_Context.ClipRect.x1;
??LCD_DrawBitmap_5:
        MOV     DPTR,#GUI_Context + 8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        MOV     A,?V0 + 1
        SUBB    A,R1
        MOV     R3,A
//  193     if (Diff > 0) {
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JC      ??CrossCallReturnLabel_41
//  194       xsize -= Diff;
        LCALL   ?Subroutine21 & 0xFFFF
//  195     }
//  196     /*        Clip left side ... (The difficult side ...)    */
//  197     Diff = 0;
??CrossCallReturnLabel_41:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  198     if (x0 < GUI_Context.ClipRect.x0) {
        MOV     DPTR,#GUI_Context + 4
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        CLR     C
        MOV     A,?V0 + 14
        SUBB    A,R0
        MOV     A,?V0 + 15
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_33:
        JC      $+5
        LJMP    ??LCD_DrawBitmap_6 & 0xFFFF
//  199       Diff = GUI_Context.ClipRect.x0 - x0;
        MOV     DPTR,#GUI_Context + 4
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 14
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 15
        MOV     R3,A
//  200 			xsize -= Diff;
        LCALL   ?Subroutine21 & 0xFFFF
//  201 			switch (BitsPerPixel) {
??CrossCallReturnLabel_42:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for LCD_DrawBitmap>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??LCD_DrawBitmap_6
        CODE
//  202 			case 1:
//  203   			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
??LCD_DrawBitmap_7:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        ANL     A,#0xf8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     A,#0x7
??LCD_DrawBitmap_12:
        ANL     A,R2
        MOV     R2,A
        SJMP    ??LCD_DrawBitmap_13
//  204 				break;
//  205 			case 2:
//  206 	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
??LCD_DrawBitmap_8:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_37:
        ANL     A,#0xfc
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,#0x3
        SJMP    ??LCD_DrawBitmap_12
//  207 				break;
//  208 			case 4:
//  209 				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
??LCD_DrawBitmap_9:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_38:
        ANL     A,#0xfe
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,#0x1
        SJMP    ??LCD_DrawBitmap_12
//  210 				break;
//  211 			case 8:
//  212 				pPixel+= Diff;      x0 += Diff; Diff=0;
??LCD_DrawBitmap_10:
        MOV     A,?V0 + 10
        ADD     A,R2
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,R3
        SJMP    ??LCD_DrawBitmap_14
//  213 				break;
//  214 			case 16:
//  215 				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
??LCD_DrawBitmap_11:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,R1
??LCD_DrawBitmap_14:
        MOV     ?V0 + 11,A
        MOV     A,?V0 + 14
        ADD     A,R2
        MOV     ?V0 + 14,A
        MOV     A,?V0 + 15
        ADDC    A,R3
        MOV     ?V0 + 15,A
        MOV     R2,#0x0
??LCD_DrawBitmap_13:
        MOV     R3,#0x0
//  216 				break;
//  217 			}
//  218     }
//  219     if (xsize <=0) {
??LCD_DrawBitmap_6:
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,#0x1
        MOV     A,?V0 + 9
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JNC     $+5
        LJMP    ??LCD_DrawBitmap_1 & 0xFFFF
//  220 		  return;
//  221     }
//  222     LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
        ; Setup parameters for call to function LCD_L0_DrawBitmap
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 53)
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??LCD_L0_DrawBitmap?relay
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
        LJMP    ??LCD_DrawBitmap_1 & 0xFFFF
//  223   } else {
//  224     /**** Handle BITMAP with magnification ***/
//  225     int x,y;
//  226     int yi;
//  227     int Shift = 8-BitsPerPixel;
??LCD_DrawBitmap_3:
        MOV     A,#0x8
        CLR     C
        SUBB    A,R6
        MOV     ?V0 + 2,A
//  228     for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??LCD_DrawBitmap_15
??LCD_DrawBitmap_16:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
        MOV     A,?V0 + 10
        ADD     A,?V0 + 4
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,?V0 + 5
        MOV     ?V0 + 11,A
??LCD_DrawBitmap_15:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 6
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??LCD_DrawBitmap_1 & 0xFFFF
//  229       int yMax = y+yMul-1;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
//  230       /* Draw if within clip area (Optimization ... "if" is not required !) */
//  231       if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
        MOV     DPTR,#GUI_Context + 6
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        JC      ??LCD_DrawBitmap_16
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
        MOV     DPL,#(GUI_Context + 10) & 0xff
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      ??LCD_DrawBitmap_16
//  232         int BitsLeft =0;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  233         int xi;
//  234         const U8 GUI_UNI_PTR * pDataLine = pPixel;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 10
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 11
        MOVX    @DPTR,A
//  235         for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 14
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 15
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??LCD_DrawBitmap_17
//  236           U8  Index;
//  237           if (!BitsLeft) {
//  238             Data = *pDataLine++;
//  239             BitsLeft =8;
//  240           }
//  241           Index = Data>>Shift;
//  242           Data    <<= BitsPerPixel;
//  243           BitsLeft -= BitsPerPixel;
//  244           if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
//  245             LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
//  246             if (pTrans) {
//  247               LCD_COLORINDEX = *(pTrans+Index);
//  248             } else {
//  249               LCD_COLORINDEX = Index;
??LCD_DrawBitmap_18:
        MOV     A,R2
        MOV     DPTR,#GUI_Context + 2
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??LCD_DrawBitmap_19:
        MOVX    @DPTR,A
//  250             }
//  251             LCD_FillRect(x,y, x+xMul-1, yMax);
        ; Setup parameters for call to function LCD_FillRect
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x2d
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     ?V0 + 12,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 13,A
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ??LCD_FillRect?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 39)
//  252             LCD_COLORINDEX = OldColor;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    @DPTR,A
??LCD_DrawBitmap_20:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
??LCD_DrawBitmap_17:
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 8
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??LCD_DrawBitmap_16 & 0xFFFF
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ     ??LCD_DrawBitmap_21
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
??LCD_DrawBitmap_21:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        MOV     ?V0 + 13,#0x0
        MOV     A,?V0 + 2
        MOV     R0,#?V0 + 12
        LCALL   ?SS_SHR
        MOV     R2,?V0 + 12
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        MOV     R0,A
        POP     A
        CFI CFA_SP SP+0
        CJNE    R0,#0x0,??LCD_DrawBitmap_22
        SJMP    ??LCD_DrawBitmap_23
??LCD_DrawBitmap_22:
        CLR     C
        RLC     A
        DJNZ    R0,??LCD_DrawBitmap_22
??LCD_DrawBitmap_23:
        MOVX    @DPTR,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOVX    @DPTR,A
        MOV     A,R2
        JNZ     ??LCD_DrawBitmap_24
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     $+5
        LJMP    ??LCD_DrawBitmap_20 & 0xFFFF
??LCD_DrawBitmap_24:
        MOV     DPTR,#GUI_Context + 2
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ     $+5
        LJMP    ??LCD_DrawBitmap_18 & 0xFFFF
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        LCALL   ?Subroutine7 & 0xFFFF
//  253           }
//  254         }
//  255       }
//  256     }
//  257   }
??CrossCallReturnLabel_9:
        LJMP    ??LCD_DrawBitmap_19 & 0xFFFF
        CFI EndBlock cfiBlock53
//  258 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,R2
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        SUBB    A,R3
        MOV     ?V0 + 9,A
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     A,?V0 + 10
        ADD     A,?V0 + 0
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,?V0 + 1
        MOV     ?V0 + 11,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        SUBB    A,R3
        MOV     ?V0 + 7,A
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,#0x1
        MOV     A,?V0 + 7
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,?V0 + 14
        ADD     A,R0
        MOV     ?V0 + 14,A
        MOV     A,?V0 + 15
        ADDC    A,R1
        MOV     ?V0 + 15,A
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 55)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOV     DPTR,#GUI_Context + 6
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_4
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_5
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
        CFI (cfiCond109) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond109) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond109) CFA_SP SP+-5
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_2
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_13
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_14
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_15
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_16
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_17
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_18
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_19
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_20
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_21
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_10
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_11
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_12
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_8
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_9
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 39)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 39)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPTR,#GUI_Context + 2
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133
//  259 
//  260 /*********************************************************************
//  261 *
//  262 *       LCD_SetClipRectMax
//  263 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 void LCD_SetClipRectMax(void) {
LCD_SetClipRectMax:
        CFI Block cfiBlock134 Using cfiCommon0
        CFI Function LCD_SetClipRectMax
        CODE
        FUNCALL LCD_SetClipRectMax, LCD_L0_GetRect
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  265   LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
        ; Setup parameters for call to function LCD_L0_GetRect
        MOV     R2,#(GUI_Context + 4) & 0xff
        MOV     R3,#((GUI_Context + 4) >> 8) & 0xff
        LCALL   ??LCD_L0_GetRect?relay
//  266 }
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock134
//  267 
//  268 /*********************************************************************
//  269 *
//  270 *       LCD_Init
//  271 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 int LCD_Init(void) {
LCD_Init:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function LCD_Init
        CODE
        FUNCALL LCD_Init, LCD_L0_GetRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_L0_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_InitLUT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_SetDrawMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_SetDrawMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Init, LCD_L0_On
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  273   int r = 0;
//  274   GUI_DEBUG_LOG("\nLCD_Init...");
//  275   LCD_SetClipRectMax();
        ; Setup parameters for call to function LCD_L0_GetRect
        MOV     R2,#(GUI_Context + 4) & 0xff
        MOV     R3,#((GUI_Context + 4) >> 8) & 0xff
        LCALL   ??LCD_L0_GetRect?relay
//  276   r |= LCD_L0_Init();
        ; Setup parameters for call to function LCD_L0_Init
        LCALL   ??LCD_L0_Init?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  277   #if GUI_NUM_LAYERS > 1
//  278     r |= LCD_L0_1_Init();
//  279   #endif
//  280   #if GUI_NUM_LAYERS > 2
//  281     r |= LCD_L0_2_Init();
//  282   #endif
//  283   #if GUI_NUM_LAYERS > 3
//  284     r |= LCD_L0_3_Init();
//  285   #endif
//  286   #if GUI_NUM_LAYERS > 4
//  287     r |= LCD_L0_4_Init();
//  288   #endif
//  289   LCD_InitLUT();
        ; Setup parameters for call to function LCD_InitLUT
        LCALL   ??LCD_InitLUT?relay
//  290   {
//  291   #if GUI_NUM_LAYERS > 1
//  292     int i;
//  293     for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
//  294       GUI_SelectLayer(i);
//  295   #else
//  296     {
//  297   #endif
//  298       #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
//  299         /* Clear video memory */
//  300         LCD_SetDrawMode(GUI_DRAWMODE_REV);
        ; Setup parameters for call to function LCD_SetDrawMode
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??LCD_SetDrawMode?relay
//  301         //LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
//  302         LCD_SetDrawMode(0);
        ; Setup parameters for call to function LCD_SetDrawMode
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??LCD_SetDrawMode?relay
//  303       #endif
//  304     }
//  305   }
//  306   /* Switch LCD on */
//  307   LCD_On();
        ; Setup parameters for call to function LCD_L0_On
        LCALL   ??LCD_L0_On?relay
//  308   return r;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock135
//  309 }
//  310 
//  311 /*********************************************************************
//  312 *
//  313 *       LCD_Color2Index
//  314 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  315 int LCD_Color2Index(LCD_COLOR Color) {
LCD_Color2Index:
        CFI Block cfiBlock136 Using cfiCommon0
        CFI Function LCD_Color2Index
        CODE
        FUNCALL LCD_Color2Index, LCD_L0_Color2Index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  316   return LCDDEV_L0_Color2Index(Color);
        ; Setup parameters for call to function LCD_L0_Color2Index
        LCALL   ??LCD_L0_Color2Index?relay
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock136
//  317 }
//  318 
//  319 /*********************************************************************
//  320 *
//  321 *       LCD_Index2Color
//  322 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  323 LCD_COLOR LCD_Index2Color(int Index) {
LCD_Index2Color:
        CFI Block cfiBlock137 Using cfiCommon0
        CFI Function LCD_Index2Color
        CODE
        FUNCALL LCD_Index2Color, LCD_L0_Index2Color
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  324   return LCDDEV_L0_Index2Color(Index);
        ; Setup parameters for call to function LCD_L0_Index2Color
        LCALL   ??LCD_L0_Index2Color?relay
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock137
//  325 }
//  326 
//  327 /*********************************************************************
//  328 *
//  329 *       LCD_SetBkColor
//  330 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  331 void LCD_SetBkColor(GUI_COLOR color) {
LCD_SetBkColor:
        CFI Block cfiBlock138 Using cfiCommon0
        CFI Function LCD_SetBkColor
        CODE
        FUNCALL LCD_SetBkColor, LCD_L0_Color2Index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SetBkColor, LCD_SetBkColorIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  332   if (GUI_Context.BkColor != color) {
        MOV     DPTR,#GUI_Context + 43
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??LCD_SetBkColor_0
//  333     GUI_Context.BkColor = color;
        MOV     DPTR,#GUI_Context + 43
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  334     LCD_SetBkColorIndex(LCD_Color2Index(color));
        ; Setup parameters for call to function LCD_SetBkColorIndex
        ; Setup parameters for call to function LCD_L0_Color2Index
        LCALL   ??LCD_L0_Color2Index?relay
        LCALL   ??LCD_SetBkColorIndex?relay
        CFI EndBlock cfiBlock138
//  335   }
//  336 }
??LCD_SetBkColor_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock139 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock139
//  337 
//  338 /*********************************************************************
//  339 *
//  340 *       LCD_SetColor
//  341 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 void LCD_SetColor(GUI_COLOR color) {
LCD_SetColor:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function LCD_SetColor
        CODE
        FUNCALL LCD_SetColor, LCD_L0_Color2Index
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_SetColor, LCD_SetColorIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  343   if (GUI_Context.Color != color) {
        MOV     DPTR,#GUI_Context + 39
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??LCD_SetColor_0
//  344     GUI_Context.Color = color;
        MOV     DPTR,#GUI_Context + 39
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  345     LCD_SetColorIndex(LCD_Color2Index(color));
        ; Setup parameters for call to function LCD_SetColorIndex
        ; Setup parameters for call to function LCD_L0_Color2Index
        LCALL   ??LCD_L0_Color2Index?relay
        LCALL   ??LCD_SetColorIndex?relay
//  346   }
//  347 }
??LCD_SetColor_0:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock140

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetColorIndex?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetColorIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetBkColorIndex?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetBkColorIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetDrawMode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetDrawMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawPixel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawPixel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawHLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawHLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_FillRect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_FillRect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawBitmap?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawBitmap

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetClipRectMax?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetClipRectMax

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Color2Index?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Color2Index

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Index2Color?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Index2Color

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetBkColor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetBkColor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_SetColor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_SetColor

        END
//  348 
//  349 /*************************** End of file ****************************/
// 
// 1 921 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
// 
// 1 999 bytes of CODE memory
//
//Errors: none
//Warnings: none
