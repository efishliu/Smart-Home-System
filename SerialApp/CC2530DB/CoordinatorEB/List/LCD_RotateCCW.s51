///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        14/Jun/2016  16:18:32 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\C /
//                          ore\LCD_RotateCCW.c                               /
//    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย /
//                          ็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Components\uCGUI\Core\LCD_RotateCCW.c -D     /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D     /
//                          LCD_SUPPORTED -D NV_INIT -lC                      /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\    /
//                          -lA F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ /
//                          ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Utilities\SerialApp\CC2530DB\CoordinatorEB\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e  /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\ -I                    /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\Public\ -I          /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\uCGUI\MultiLayer\ -I       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโล /
//                          ฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. /
//                          1a\Projects\zstack\Utilities\SerialApp\CC2530DB\. /
//                          .\Coordinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\ZMain\TI2530DB\ -I                           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\hal\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬ /
//                          ืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1 /
//                          a\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\ -I        /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\ -I                       /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\low_level\srf04\single_chip\ -I           /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z /
//                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘น /
//                          โลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม /
//                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื /
//                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\ /
//                          ..\..\..\..\Components\stack\sec\ -I              /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืส /
//                          มฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ /
//                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 /
//                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\zmac\f8w\ -Ohz                   /
//                          --require_prototypes                              /
//    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\W /
//                          SN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Ut /
//                          ilities\SerialApp\CC2530DB\CoordinatorEB\List\LCD /
//                          _RotateCCW.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_RotateCCW

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I

        FUNCTION ??_DrawBitLine1BPP?relay,0203H
        FUNCTION ??_DrawBitmapCCW?relay,0203H
        FUNCTION ??_Rect2TextRect?relay,0203H
        FUNCTION ??_TransformPointCCW?relay,0203H
        PUBLIC LCD_APIListCCW
        FUNCTION _DrawBitLine1BPP,021203H
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        FUNCTION _DrawBitmapCCW,021603H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 50, STACK
        FUNCTION _Rect2TextRect,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION _TransformPointCCW,021203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
LCD_L0_SetPixelIndex SYMBOL "LCD_L0_SetPixelIndex"
LCD_L0_GetPixelIndex SYMBOL "LCD_L0_GetPixelIndex"
GUI_GetClientRect   SYMBOL "GUI_GetClientRect"
LCD_GetXSize        SYMBOL "LCD_GetXSize"
LCD_GetYSize        SYMBOL "LCD_GetYSize"
LCD_FillRect        SYMBOL "LCD_FillRect"
??GUI_GetClientRect?relay SYMBOL "?relay", GUI_GetClientRect
??LCD_FillRect?relay SYMBOL "?relay", LCD_FillRect
??LCD_GetXSize?relay SYMBOL "?relay", LCD_GetXSize
??LCD_GetYSize?relay SYMBOL "?relay", LCD_GetYSize
??LCD_L0_GetPixelIndex?relay SYMBOL "?relay", LCD_L0_GetPixelIndex
??LCD_L0_SetPixelIndex?relay SYMBOL "?relay", LCD_L0_SetPixelIndex

        EXTERN LCD_L0_SetPixelIndex
        FUNCTION LCD_L0_SetPixelIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_L0_GetPixelIndex
        FUNCTION LCD_L0_GetPixelIndex,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN GUI_GetClientRect
        FUNCTION GUI_GetClientRect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_GetXSize
        FUNCTION LCD_GetXSize,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_GetYSize
        FUNCTION LCD_GetYSize,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_FillRect
        FUNCTION LCD_FillRect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??GUI_GetClientRect?relay
        FUNCTION ??GUI_GetClientRect?relay,00H
        EXTERN ??LCD_FillRect?relay
        FUNCTION ??LCD_FillRect?relay,00H
        EXTERN ??LCD_GetXSize?relay
        FUNCTION ??LCD_GetXSize?relay,00H
        EXTERN ??LCD_GetYSize?relay
        FUNCTION ??LCD_GetYSize?relay,00H
        EXTERN ??LCD_L0_GetPixelIndex?relay
        FUNCTION ??LCD_L0_GetPixelIndex?relay,00H
        EXTERN ??LCD_L0_SetPixelIndex?relay
        FUNCTION ??LCD_L0_SetPixelIndex?relay,00H
        EXTERN GUI_Context
        EXTERN GUI_RectDispString

// F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_RotateCCW.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/GUI
//    4 *                        Universal graphic software for embedded applications
//    5 *
//    6 *                       (c) Copyright 2002, Micrium Inc., Weston, FL
//    7 *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
//    8 *
//    9 *              ตC/GUI is protected by international copyright laws. Knowledge of the
//   10 *              source code may not be used to write a similar product. This file may
//   11 *              only be used in accordance with a license and should not be redistributed
//   12 *              in any way. We appreciate your understanding and fairness.
//   13 *
//   14 ----------------------------------------------------------------------
//   15 File        : LCD_RotateCCW.c
//   16 Purpose     : Implementation of GUI_SetRotation
//   17 ---------------------------END-OF-HEADER------------------------------
//   18 */
//   19 
//   20 #include "GUI_Private.h"
//   21 #include "LCD.h"
//   22 #if GUI_WINSUPPORT
//   23   #include "WM.h"
//   24 #endif
//   25 
//   26 #if GUI_SUPPORT_ROTATION
//   27 
//   28 /*********************************************************************
//   29 *
//   30 *       Static code
//   31 *
//   32 **********************************************************************
//   33 */
//   34 /*********************************************************************
//   35 *
//   36 *       _DrawBitLine1BPP
//   37 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   38 static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
_DrawBitLine1BPP:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function _DrawBitLine1BPP
        CODE
        FUNCALL _DrawBitLine1BPP, LCD_L0_SetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitLine1BPP, LCD_L0_SetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitLine1BPP, LCD_L0_GetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitLine1BPP, LCD_L0_SetPixelIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
//   39   LCD_PIXELINDEX Index0 = *(pTrans+0);
??CrossCallReturnLabel_39:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
//   40   LCD_PIXELINDEX Index1 = *(pTrans+1);
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//   41   y -= Diff;
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        SUBB    A,?V0 + 1
        MOV     R7,A
//   42   switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      ??_DrawBitLine1BPP_0
        DEC     A
        JNZ     $+5
        LJMP    ??_DrawBitLine1BPP_1 & 0xFFFF
        DEC     A
        JZ      ??_DrawBitLine1BPP_2
        LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
//   43   case 0:
//   44     do {
//   45       LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
??_DrawBitLine1BPP_0:
        MOV     ?V0 + 12,#-0x80
        MOV     ?V0 + 13,#0x0
        MOV     A,?V0 + 0
        MOV     R0,#?V0 + 12
        LCALL   ?SS_SHR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ANL     A,?V0 + 12
        JZ      ??_DrawBitLine1BPP_4
        MOV     ?V0 + 12,?V0 + 10
        MOV     ?V0 + 13,?V0 + 11
        SJMP    ??_DrawBitLine1BPP_5
??_DrawBitLine1BPP_4:
        MOV     ?V0 + 12,?V0 + 8
        MOV     ?V0 + 13,?V0 + 9
??_DrawBitLine1BPP_5:
        ; Setup parameters for call to function LCD_L0_SetPixelIndex
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??LCD_L0_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//   46       y--;
        LCALL   ?Subroutine9 & 0xFFFF
//   47 			if (++Diff == 8) {
??CrossCallReturnLabel_18:
        JNZ     ??_DrawBitLine1BPP_6
        MOV     A,?V0 + 1
??_DrawBitLine1BPP_6:
        JNZ     ??_DrawBitLine1BPP_7
//   48         Diff = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//   49 				p++;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
//   50 			}
//   51 		} while (--xsize);
??_DrawBitLine1BPP_7:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ     ??_DrawBitLine1BPP_0
        LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
//   52     break;
//   53   case LCD_DRAWMODE_TRANS:
//   54     do {
//   55   		if (*p & (0x80 >> Diff))
??_DrawBitLine1BPP_2:
        MOV     ?V0 + 8,#-0x80
        MOV     ?V0 + 9,#0x0
        MOV     A,?V0 + 0
        MOV     R0,#?V0 + 8
        LCALL   ?SS_SHR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ANL     A,?V0 + 8
        JZ      ??_DrawBitLine1BPP_8
//   56         LCDDEV_L0_SetPixelIndex(x, y, Index1);
        ; Setup parameters for call to function LCD_L0_SetPixelIndex
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??LCD_L0_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//   57       y--;
??_DrawBitLine1BPP_8:
        LCALL   ?Subroutine9 & 0xFFFF
//   58 			if (++Diff == 8) {
??CrossCallReturnLabel_19:
        JNZ     ??_DrawBitLine1BPP_9
        MOV     A,?V0 + 1
??_DrawBitLine1BPP_9:
        JNZ     ??_DrawBitLine1BPP_10
//   59         Diff = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//   60 				p++;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
//   61 			}
//   62 		} while (--xsize);
??_DrawBitLine1BPP_10:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ     ??_DrawBitLine1BPP_2
        SJMP    ??_DrawBitLine1BPP_3
//   63     break;
//   64   case LCD_DRAWMODE_XOR:;
//   65     do {
//   66   		if (*p & (0x80 >> Diff)) {
??_DrawBitLine1BPP_1:
        MOV     ?V0 + 8,#-0x80
        MOV     ?V0 + 9,#0x0
        MOV     A,?V0 + 0
        MOV     R0,#?V0 + 8
        LCALL   ?SS_SHR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ANL     A,?V0 + 8
        JZ      ??_DrawBitLine1BPP_11
//   67         int Pixel = LCD_L0_GetPixelIndex(x, y);
//   68         LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
        ; Setup parameters for call to function LCD_L0_SetPixelIndex
        ; Setup parameters for call to function LCD_L0_GetPixelIndex
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??LCD_L0_GetPixelIndex?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,#-0x1
        CLR     C
        SUBB    A,?V0 + 8
        MOV     ?V0 + 8,A
        MOV     A,#-0x1
        SUBB    A,?V0 + 9
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??LCD_L0_SetPixelIndex?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//   69       }
//   70       y--;
??_DrawBitLine1BPP_11:
        LCALL   ?Subroutine9 & 0xFFFF
//   71 			if (++Diff == 8) {
??CrossCallReturnLabel_20:
        JNZ     ??_DrawBitLine1BPP_12
        MOV     A,?V0 + 1
??_DrawBitLine1BPP_12:
        JNZ     ??_DrawBitLine1BPP_13
//   72         Diff = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//   73 				p++;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
//   74 			}
//   75 		} while (--xsize);
??_DrawBitLine1BPP_13:
        LCALL   ?Subroutine10 & 0xFFFF
//   76     break;
//   77 	}
??CrossCallReturnLabel_23:
        JNZ     ??_DrawBitLine1BPP_1
//   78 }
??_DrawBitLine1BPP_3:
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOV     A,?V0 + 4
        ADD     A,#-0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,#0x8
        XRL     A,?V0 + 0
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//   79 
//   80 /*********************************************************************
//   81 *
//   82 *       _DrawBitmap
//   83 *
//   84 * Purpose:
//   85 *   Draws a bitmap (1bpp) counter clockwise.
//   86 */
//   87 static void _DrawBitmap(int x0, int y0,
//   88                        int xsize, int ysize,
//   89                        int BitsPerPixel, 
//   90                        int BytesPerLine,
//   91                        const U8 GUI_UNI_PTR * pData, int Diff,
//   92                        const LCD_PIXELINDEX* pTrans)
//   93 {
//   94   int i;
//   95   /* Use _DrawBitLineXBPP */
//   96   for (i=0; i<ysize; i++) {
//   97     switch (BitsPerPixel) {
//   98     case 1:
//   99       _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
//  100       break;
//  101     }
//  102     pData += BytesPerLine;
//  103   }
//  104 }
//  105 
//  106 /*********************************************************************
//  107 *
//  108 *       _Rect2TextRect
//  109 *
//  110 * Purpose:
//  111 *   This function transforms a given rectangle (window coordinates)
//  112 *   to the rectangle used to clip the text.
//  113 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  114 static void _Rect2TextRect(GUI_RECT * pRect) {
_Rect2TextRect:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function _Rect2TextRect
        CODE
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
//  115   int x1, y1;
//  116   x1 = pRect->x1;
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine3 & 0xFFFF
//  117   y1 = pRect->y1;
//  118   pRect->x1 = pRect->x0 + (y1 - pRect->y0);
??CrossCallReturnLabel_6:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,R2
        CLR     C
        SUBB    A,R6
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R7
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  119   pRect->y1 = pRect->y0 + (x1 - pRect->x0);
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R0,A
        MOV     A,R1
        SUBB    A,?V0 + 1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine12 & 0xFFFF
//  120 }
??CrossCallReturnLabel_24:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
//  121 
//  122 /*********************************************************************
//  123 *
//  124 *       _TransformPointCCW
//  125 *
//  126 * Purpose:
//  127 *   This function transforms an unrotated point (window
//  128 *   coordinates) into a rotated point in desktop coordinates
//  129 *   and handles the rotation of the current text rectangle.
//  130 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  131 static void _TransformPointCCW(int * pXPos, int * pYPos) {
_TransformPointCCW:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function _TransformPointCCW
        CODE
        FUNCALL _TransformPointCCW, GUI_GetClientRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _TransformPointCCW, LCD_GetXSize
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _TransformPointCCW, LCD_GetYSize
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  132   GUI_RECT ClientRect = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  133   int xPos, yPos, xNumPixel, yNumPixel;
//  134   /* Get the client rectangle */
//  135   #if GUI_WINSUPPORT
//  136     WM_GetWindowRect(&ClientRect);
//  137   #else
//  138     GUI_GetClientRect(&ClientRect);
        ; Setup parameters for call to function GUI_GetClientRect
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GUI_GetClientRect?relay
//  139   #endif
//  140   xNumPixel = LCD_GetXSize() - 1;
        ; Setup parameters for call to function LCD_GetXSize
        LCALL   ??LCD_GetXSize?relay
        MOV     A,R2
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
//  141   yNumPixel = LCD_GetYSize() - 1;
        ; Setup parameters for call to function LCD_GetYSize
        LCALL   ??LCD_GetYSize?relay
        MOV     A,R2
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R1,A
//  142   if (ClientRect.x1 > xNumPixel) {
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_56:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R2
        MOV     A,?V0 + 3
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??_TransformPointCCW_0
//  143     ClientRect.x1 = xNumPixel;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  144   }
//  145   if (ClientRect.y1 > yNumPixel) {
??_TransformPointCCW_0:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_57:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??CrossCallReturnLabel_25
//  146     ClientRect.y1 = yNumPixel;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  147   }
//  148   /* Save old positions */
//  149   xPos = *pXPos;
??CrossCallReturnLabel_25:
        LCALL   ?Subroutine2 & 0xFFFF
//  150   yPos = *pYPos;
//  151   /* Rotate and add window origin */
//  152   *pXPos = ClientRect.x0 + yPos;
??CrossCallReturnLabel_61:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
//  153   *pYPos = ClientRect.y1 - xPos;
??CrossCallReturnLabel_26:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R1
        SUBB    A,R3
        MOV     R3,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  154   /* Handle rotation of text rectangle */
//  155   *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     DPTR,#GUI_RectDispString
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R5,A
        INC     DPTR
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R5
        SUBB    A,R3
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  156   *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     DPTR,#GUI_RectDispString + 6
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPTR,#GUI_RectDispString
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine12 & 0xFFFF
//  157 }
??CrossCallReturnLabel_27:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  158 
//  159 /*********************************************************************
//  160 *
//  161 *       _DrawBitmapCCW
//  162 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  163 static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
_DrawBitmapCCW:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function _DrawBitmapCCW
        CODE
//  164                            int BitsPerPixel, int BytesPerLine,
//  165                            const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
//  166 {
        FUNCALL _DrawBitmapCCW, _TransformPointCCW
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmapCCW, _TransformPointCCW
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmapCCW, _DrawBitLine1BPP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _DrawBitmapCCW, LCD_FillRect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  167   U8  Data = 0;
        MOV     ?V0 + 14,#0x0
//  168   int x1, y1;
//  169   /* Handle the optional Y-magnification */
//  170   y1 = y0 + ysize - 1;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  171   x1 = x0 + xsize - 1;
??CrossCallReturnLabel_28:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  172   /* Rotate positions */
//  173   _TransformPointCCW(&x0, &y0);
??CrossCallReturnLabel_36:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_TransformPointCCW?relay
//  174   _TransformPointCCW(&x1, &y1);
        ; Setup parameters for call to function _TransformPointCCW
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??_TransformPointCCW?relay
//  175   /*  Handle BITMAP without magnification */
//  176   if ((xMul == 1) && (yMul == 1)) {
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??_DrawBitmapCCW_0
        INC     DPTR
        MOVX    A,@DPTR
??_DrawBitmapCCW_0:
        JZ      $+5
        LJMP    ??_DrawBitmapCCW_1 & 0xFFFF
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??_DrawBitmapCCW_2
        INC     DPTR
        MOVX    A,@DPTR
??_DrawBitmapCCW_2:
        JZ      $+5
        LJMP    ??_DrawBitmapCCW_1 & 0xFFFF
//  177     int Diff = 0;
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//  178     /* Clip top */
//  179     if (y1 < GUI_Context.ClipRect.y0) {
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#GUI_Context + 6
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_40:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JNC     ??_DrawBitmapCCW_3
//  180       int Diff = GUI_Context.ClipRect.y0 - y1;
//  181       xsize -= Diff;
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R7
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R7,A
//  182     }
//  183     /* Clip bottom */
//  184     if (y0 > GUI_Context.ClipRect.y1) {
??_DrawBitmapCCW_3:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
        MOV     DPL,#(GUI_Context + 10) & 0xff
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JNC     ??_DrawBitmapCCW_4
//  185       Diff = y0 - GUI_Context.ClipRect.y1;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#GUI_Context + 10
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_41:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     ?V0 + 7,A
//  186 			xsize -= Diff;
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 6
        MOV     R6,A
        MOV     A,R7
        SUBB    A,?V0 + 7
        MOV     R7,A
//  187 			switch (BitsPerPixel) {
        MOV     A,#0x1
        XRL     A,?V0 + 8
        JNZ     ??_DrawBitmapCCW_5
        MOV     A,?V0 + 9
??_DrawBitmapCCW_5:
        JNZ     ??_DrawBitmapCCW_4
//  188 			case 1:
//  189   			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
        MOV     ?V0 + 0,?V0 + 6
        MOV     ?V0 + 1,?V0 + 7
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     A,?V0 + 6
        ANL     A,#0xf8
        MOV     R0,A
        MOV     R1,?V0 + 7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOVX    @DPTR,A
        MOV     A,#0x7
        ANL     A,?V0 + 6
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,#0x0
//  190 				break;
//  191 			}
//  192     }
//  193     if (ysize <= 0) {
??_DrawBitmapCCW_4:
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,#0x1
        MOV     A,?V0 + 5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
//  194 		  return;
//  195     }
//  196     /* Clip right side */
//  197     if (x1 > GUI_Context.ClipRect.x1) {
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_66:
        JNC     ??_DrawBitmapCCW_7
//  198       int Diff = x1 - GUI_Context.ClipRect.x1;
//  199       ysize -= Diff;
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 5
        SUBB    A,R1
        MOV     R1,A
        MOV     DPTR,#GUI_Context + 8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     ?V0 + 5,A
//  200     }
//  201     /* Clip left side */
//  202     if (x0 < GUI_Context.ClipRect.x0) {
??_DrawBitmapCCW_7:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#GUI_Context + 4
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_42:
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JNC     ??_DrawBitmapCCW_8
//  203       int Diff = GUI_Context.ClipRect.x0 - x0;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     DPH,#((GUI_Context + 4) >> 8) & 0xff
        MOV     DPL,#(GUI_Context + 4) & 0xff
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R3,A
//  204       pPixel += Diff * BytesPerLine;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 10
        MUL     AB
        XCH     A,R0
        MOV     R4,B
        MOV     B,?V0 + 11
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 10
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  205       x0 += Diff;
??CrossCallReturnLabel_30:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOVX    @DPTR,A
//  206       ysize -= Diff;
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,R2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        SUBB    A,R3
        MOV     ?V0 + 5,A
//  207     }
//  208     if (xsize <= 0) {
??_DrawBitmapCCW_8:
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
//  209 		  return;
//  210     }
//  211     _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine3 & 0xFFFF
//  212   } else {
??CrossCallReturnLabel_7:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
??_DrawBitmapCCW_9:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 8
        JNZ     ??_DrawBitmapCCW_10
        MOV     A,?V0 + 9
??_DrawBitmapCCW_10:
        JNZ     ??_DrawBitmapCCW_11
        ; Setup parameters for call to function _DrawBitLine1BPP
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 14,R6
        MOV     ?V0 + 15,R7
        MOV     R0,#?V0 + 14
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??_DrawBitLine1BPP?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
??_DrawBitmapCCW_11:
        MOV     A,?V0 + 12
        ADD     A,?V0 + 10
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 13
        ADDC    A,?V0 + 11
        MOV     ?V0 + 13,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_34:
        SJMP    ??_DrawBitmapCCW_9
//  213     /* Handle BITMAP with magnification */
//  214     int x, y, xi, yi;
//  215     int Shift = 8 - BitsPerPixel;
??_DrawBitmapCCW_1:
        MOV     A,#0x8
        CLR     C
        SUBB    A,?V0 + 8
        MOV     ?V0 + 2,A
//  216     for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??_DrawBitmapCCW_12
??_DrawBitmapCCW_13:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,?V0 + 10
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 11
        MOV     R1,A
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??_DrawBitmapCCW_12:
        MOVX    @DPTR,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
//  217       int xMax = x + yMul - 1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
//  218       if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
        MOV     DPTR,#GUI_Context + 4
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_45:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??_DrawBitmapCCW_13
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_67:
        JNC     $+5
        LJMP    ??_DrawBitmapCCW_13 & 0xFFFF
//  219         int BitsLeft = 0;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  220         const U8 GUI_UNI_PTR * pDataLine = pPixel;
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  221         for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        SJMP    ??_DrawBitmapCCW_14
//  222           U8  Index;
//  223           if (!BitsLeft) {
//  224             Data = *pDataLine++;
//  225             BitsLeft =8;
//  226           }
//  227           Index = Data >> Shift;
//  228           Data    <<= BitsPerPixel;
//  229           BitsLeft -= BitsPerPixel;
//  230           if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
//  231             LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
//  232             if (pTrans) {
//  233               LCD_COLORINDEX = *(pTrans + Index);
//  234             } else {
//  235               LCD_COLORINDEX = Index;
??_DrawBitmapCCW_15:
        MOV     A,R2
        MOV     DPTR,#GUI_Context + 2
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??_DrawBitmapCCW_16:
        MOVX    @DPTR,A
//  236             }
//  237             LCD_FillRect(x, y - xMul + 1, xMax, y);
        ; Setup parameters for call to function LCD_FillRect
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,?V0 + 7
        SUBB    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ??LCD_FillRect?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 42)
//  238             LCD_COLORINDEX = OldColor;
        MOV     DPTR,#GUI_Context + 2
        MOV     A,?V0 + 12
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 13
        MOVX    @DPTR,A
??_DrawBitmapCCW_17:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_48:
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R0
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        SUBB    A,R1
        MOV     ?V0 + 7,A
??_DrawBitmapCCW_14:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R6
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      $+5
        LJMP    ??_DrawBitmapCCW_13 & 0xFFFF
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        ORL     A,R1
        JNZ     ??_DrawBitmapCCW_18
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x1
        INC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
??_DrawBitmapCCW_18:
        MOV     ?V0 + 12,?V0 + 14
        MOV     ?V0 + 13,#0x0
        MOV     A,?V0 + 2
        MOV     R0,#?V0 + 12
        LCALL   ?SS_SHR
        MOV     R2,?V0 + 12
        MOV     R0,?V0 + 8
        MOV     A,?V0 + 14
        CJNE    R0,#0x0,??_DrawBitmapCCW_19
        SJMP    ??_DrawBitmapCCW_20
??_DrawBitmapCCW_19:
        CLR     C
        RLC     A
        DJNZ    R0,??_DrawBitmapCCW_19
??_DrawBitmapCCW_20:
        MOV     ?V0 + 14,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 9
        MOVX    @DPTR,A
        MOV     A,R2
        JNZ     ??_DrawBitmapCCW_21
        MOV     DPTR,#GUI_Context + 12
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     $+5
        LJMP    ??_DrawBitmapCCW_17 & 0xFFFF
??_DrawBitmapCCW_21:
        MOV     DPTR,#GUI_Context + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        ORL     A,R1
        JNZ     $+5
        LJMP    ??_DrawBitmapCCW_15 & 0xFFFF
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        LCALL   ??Subroutine16_0 & 0xFFFF
//  239           }
//  240         }
//  241       }
//  242     }
//  243   }
??CrossCallReturnLabel_49:
        MOV     DPTR,#GUI_Context + 2
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LJMP    ??_DrawBitmapCCW_16 & 0xFFFF
??_DrawBitmapCCW_6:
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock26
//  244 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_19
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_20
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function _TransformPointCCW
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     R3,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+-2
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+-2
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+-2
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_55:
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_51
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_39
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_40
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+-2
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_41
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+-2
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_42
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+-2
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_43
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_44
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_45
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_46
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_47
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_48
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_49
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_11
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_12
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_13
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_8
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_9
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_10
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_66
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_67
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     DPH,#((GUI_Context + 8) >> 8) & 0xff
        MOV     DPL,#(GUI_Context + 8) & 0xff
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 42)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117
//  245 
//  246 /*********************************************************************
//  247 *
//  248 *       Global data
//  249 *
//  250 **********************************************************************
//  251 */
//  252 /*********************************************************************
//  253 *
//  254 *       LCD_APIListCCW
//  255 *
//  256 * Purpose:
//  257 *   Function pointer table for rotating text CCW
//  258 */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  259 tLCD_APIList LCD_APIListCCW = {
LCD_APIListCCW:
        DATA32
        DS 4
        REQUIRE `?<Initializer for LCD_APIListCCW>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for LCD_APIListCCW>`:
        DATA16
        DW ??_DrawBitmapCCW?relay
        DW ??_Rect2TextRect?relay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_DrawBitLine1BPP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _DrawBitLine1BPP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_Rect2TextRect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _Rect2TextRect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_TransformPointCCW?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _TransformPointCCW

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??_DrawBitmapCCW?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    _DrawBitmapCCW

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DATA16
        DW 0
        DB 0, 0, 0, 0, 0, 0

        END
//  260   (tLCD_DrawBitmap*)&_DrawBitmapCCW,
//  261   &_Rect2TextRect
//  262 };
//  263 
//  264 #else
//  265 void LCD_RotateCCW_C(void);
//  266 void LCD_RotateCCW_C(void){}
//  267 #endif
//  268 
// 
// 2 134 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
// 
// 2 162 bytes of CODE  memory
//     8 bytes of CONST memory
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
