###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCD_RotateCCW.c                                  #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCD_RotateCCW.c -D        #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCD_Ro #
#                          tateCCW.lst                                        #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCD_Rot #
#                          ateCCW.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_RotateCCW.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_RotateCCW.c
     16          Purpose     : Implementation of GUI_SetRotation
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI_Private.h"
     21          #include "LCD.h"
     22          #if GUI_WINSUPPORT
     23            #include "WM.h"
     24          #endif
     25          
     26          #if GUI_SUPPORT_ROTATION
     27          
     28          /*********************************************************************
     29          *
     30          *       Static code
     31          *
     32          **********************************************************************
     33          */
     34          /*********************************************************************
     35          *
     36          *       _DrawBitLine1BPP
     37          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
   \                     _DrawBitLine1BPP:
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000015   7418         MOV     A,#0x18
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 1,A
   \   000021   741A         MOV     A,#0x1a
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 4,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 5,A
   \   00002D   741C         MOV     A,#0x1c
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ??Subroutine16_0 & 0xFFFF
     39            LCD_PIXELINDEX Index0 = *(pTrans+0);
   \                     ??CrossCallReturnLabel_39:
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 8,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 9,A
     40            LCD_PIXELINDEX Index1 = *(pTrans+1);
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V0 + 10,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 11,A
     41            y -= Diff;
   \   00004D   C3           CLR     C
   \   00004E   EE           MOV     A,R6
   \   00004F   95..         SUBB    A,?V0 + 0
   \   000051   FE           MOV     R6,A
   \   000052   EF           MOV     A,R7
   \   000053   95..         SUBB    A,?V0 + 1
   \   000055   FF           MOV     R7,A
     42            switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
   \   000056   90....       MOV     DPTR,#GUI_Context + 12
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   5403         ANL     A,#0x3
   \   00005C   600C         JZ      ??_DrawBitLine1BPP_0
   \   00005E   14           DEC     A
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??_DrawBitLine1BPP_1 & 0xFFFF
   \   000064   14           DEC     A
   \   000065   6062         JZ      ??_DrawBitLine1BPP_2
   \   000067   02....       LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
     43            case 0:
     44              do {
     45                LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
   \                     ??_DrawBitLine1BPP_0:
   \   00006A   75..80       MOV     ?V0 + 12,#-0x80
   \   00006D   75..00       MOV     ?V0 + 13,#0x0
   \   000070   E5..         MOV     A,?V0 + 0
   \   000072   78..         MOV     R0,#?V0 + 12
   \   000074   12....       LCALL   ?SS_SHR
   \   000077   85..82       MOV     DPL,?V0 + 2
   \   00007A   85..83       MOV     DPH,?V0 + 3
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   55..         ANL     A,?V0 + 12
   \   000080   6008         JZ      ??_DrawBitLine1BPP_4
   \   000082   85....       MOV     ?V0 + 12,?V0 + 10
   \   000085   85....       MOV     ?V0 + 13,?V0 + 11
   \   000088   8006         SJMP    ??_DrawBitLine1BPP_5
   \                     ??_DrawBitLine1BPP_4:
   \   00008A   85....       MOV     ?V0 + 12,?V0 + 8
   \   00008D   85....       MOV     ?V0 + 13,?V0 + 9
   \                     ??_DrawBitLine1BPP_5:
   \   000090                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   000090   78..         MOV     R0,#?V0 + 12
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   EE           MOV     A,R6
   \   000096   FC           MOV     R4,A
   \   000097   EF           MOV     A,R7
   \   000098   FD           MOV     R5,A
   \   000099   AA..         MOV     R2,?V0 + 6
   \   00009B   AB..         MOV     R3,?V0 + 7
   \   00009D   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
     46                y--;
   \   0000A5   12....       LCALL   ?Subroutine9 & 0xFFFF
     47          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_18:
   \   0000A8   7002         JNZ     ??_DrawBitLine1BPP_6
   \   0000AA   E5..         MOV     A,?V0 + 1
   \                     ??_DrawBitLine1BPP_6:
   \   0000AC   7013         JNZ     ??_DrawBitLine1BPP_7
     48                  Diff = 0;
   \   0000AE   75..00       MOV     ?V0 + 0,#0x0
   \   0000B1   75..00       MOV     ?V0 + 1,#0x0
     49          				p++;
   \   0000B4   85..82       MOV     DPL,?V0 + 2
   \   0000B7   85..83       MOV     DPH,?V0 + 3
   \   0000BA   A3           INC     DPTR
   \   0000BB   8582..       MOV     ?V0 + 2,DPL
   \   0000BE   8583..       MOV     ?V0 + 3,DPH
     50          			}
     51          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_7:
   \   0000C1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000C4   70A4         JNZ     ??_DrawBitLine1BPP_0
   \   0000C6   02....       LJMP    ??_DrawBitLine1BPP_3 & 0xFFFF
     52              break;
     53            case LCD_DRAWMODE_TRANS:
     54              do {
     55            		if (*p & (0x80 >> Diff))
   \                     ??_DrawBitLine1BPP_2:
   \   0000C9   75..80       MOV     ?V0 + 8,#-0x80
   \   0000CC   75..00       MOV     ?V0 + 9,#0x0
   \   0000CF   E5..         MOV     A,?V0 + 0
   \   0000D1   78..         MOV     R0,#?V0 + 8
   \   0000D3   12....       LCALL   ?SS_SHR
   \   0000D6   85..82       MOV     DPL,?V0 + 2
   \   0000D9   85..83       MOV     DPH,?V0 + 3
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   55..         ANL     A,?V0 + 8
   \   0000DF   6015         JZ      ??_DrawBitLine1BPP_8
     56                  LCDDEV_L0_SetPixelIndex(x, y, Index1);
   \   0000E1                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   0000E1   78..         MOV     R0,#?V0 + 10
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   EE           MOV     A,R6
   \   0000E7   FC           MOV     R4,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   FD           MOV     R5,A
   \   0000EA   AA..         MOV     R2,?V0 + 6
   \   0000EC   AB..         MOV     R3,?V0 + 7
   \   0000EE   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
     57                y--;
   \                     ??_DrawBitLine1BPP_8:
   \   0000F6   12....       LCALL   ?Subroutine9 & 0xFFFF
     58          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_19:
   \   0000F9   7002         JNZ     ??_DrawBitLine1BPP_9
   \   0000FB   E5..         MOV     A,?V0 + 1
   \                     ??_DrawBitLine1BPP_9:
   \   0000FD   7013         JNZ     ??_DrawBitLine1BPP_10
     59                  Diff = 0;
   \   0000FF   75..00       MOV     ?V0 + 0,#0x0
   \   000102   75..00       MOV     ?V0 + 1,#0x0
     60          				p++;
   \   000105   85..82       MOV     DPL,?V0 + 2
   \   000108   85..83       MOV     DPH,?V0 + 3
   \   00010B   A3           INC     DPTR
   \   00010C   8582..       MOV     ?V0 + 2,DPL
   \   00010F   8583..       MOV     ?V0 + 3,DPH
     61          			}
     62          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_10:
   \   000112   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000115   70B2         JNZ     ??_DrawBitLine1BPP_2
   \   000117   806A         SJMP    ??_DrawBitLine1BPP_3
     63              break;
     64            case LCD_DRAWMODE_XOR:;
     65              do {
     66            		if (*p & (0x80 >> Diff)) {
   \                     ??_DrawBitLine1BPP_1:
   \   000119   75..80       MOV     ?V0 + 8,#-0x80
   \   00011C   75..00       MOV     ?V0 + 9,#0x0
   \   00011F   E5..         MOV     A,?V0 + 0
   \   000121   78..         MOV     R0,#?V0 + 8
   \   000123   12....       LCALL   ?SS_SHR
   \   000126   85..82       MOV     DPL,?V0 + 2
   \   000129   85..83       MOV     DPH,?V0 + 3
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   55..         ANL     A,?V0 + 8
   \   00012F   6031         JZ      ??_DrawBitLine1BPP_11
     67                  int Pixel = LCD_L0_GetPixelIndex(x, y);
     68                  LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
   \   000131                ; Setup parameters for call to function LCD_L0_SetPixelIndex
   \   000131                ; Setup parameters for call to function LCD_L0_GetPixelIndex
   \   000131   EE           MOV     A,R6
   \   000132   FC           MOV     R4,A
   \   000133   EF           MOV     A,R7
   \   000134   FD           MOV     R5,A
   \   000135   AA..         MOV     R2,?V0 + 6
   \   000137   AB..         MOV     R3,?V0 + 7
   \   000139   12....       LCALL   ??LCD_L0_GetPixelIndex?relay
   \   00013C   8A..         MOV     ?V0 + 8,R2
   \   00013E   8B..         MOV     ?V0 + 9,R3
   \   000140   74FF         MOV     A,#-0x1
   \   000142   C3           CLR     C
   \   000143   95..         SUBB    A,?V0 + 8
   \   000145   F5..         MOV     ?V0 + 8,A
   \   000147   74FF         MOV     A,#-0x1
   \   000149   95..         SUBB    A,?V0 + 9
   \   00014B   F5..         MOV     ?V0 + 9,A
   \   00014D   78..         MOV     R0,#?V0 + 8
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   EE           MOV     A,R6
   \   000153   FC           MOV     R4,A
   \   000154   EF           MOV     A,R7
   \   000155   FD           MOV     R5,A
   \   000156   AA..         MOV     R2,?V0 + 6
   \   000158   AB..         MOV     R3,?V0 + 7
   \   00015A   12....       LCALL   ??LCD_L0_SetPixelIndex?relay
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
     69                }
     70                y--;
   \                     ??_DrawBitLine1BPP_11:
   \   000162   12....       LCALL   ?Subroutine9 & 0xFFFF
     71          			if (++Diff == 8) {
   \                     ??CrossCallReturnLabel_20:
   \   000165   7002         JNZ     ??_DrawBitLine1BPP_12
   \   000167   E5..         MOV     A,?V0 + 1
   \                     ??_DrawBitLine1BPP_12:
   \   000169   7013         JNZ     ??_DrawBitLine1BPP_13
     72                  Diff = 0;
   \   00016B   75..00       MOV     ?V0 + 0,#0x0
   \   00016E   75..00       MOV     ?V0 + 1,#0x0
     73          				p++;
   \   000171   85..82       MOV     DPL,?V0 + 2
   \   000174   85..83       MOV     DPH,?V0 + 3
   \   000177   A3           INC     DPTR
   \   000178   8582..       MOV     ?V0 + 2,DPL
   \   00017B   8583..       MOV     ?V0 + 3,DPH
     74          			}
     75          		} while (--xsize);
   \                     ??_DrawBitLine1BPP_13:
   \   00017E   12....       LCALL   ?Subroutine10 & 0xFFFF
     76              break;
     77          	}
   \                     ??CrossCallReturnLabel_23:
   \   000181   7096         JNZ     ??_DrawBitLine1BPP_1
     78          }
   \                     ??_DrawBitLine1BPP_3:
   \   000183   7F0E         MOV     R7,#0xe
   \   000185   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   E5..         MOV     A,?V0 + 4
   \   00000E   45..         ORL     A,?V0 + 5
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV     A,R6
   \   000001   24FF         ADD     A,#-0x1
   \   000003   1E           DEC     R6
   \   000004   EF           MOV     A,R7
   \   000005   34FF         ADDC    A,#-0x1
   \   000007   FF           MOV     R7,A
   \   000008   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00000B   7408         MOV     A,#0x8
   \   00000D   65..         XRL     A,?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
     79          
     80          /*********************************************************************
     81          *
     82          *       _DrawBitmap
     83          *
     84          * Purpose:
     85          *   Draws a bitmap (1bpp) counter clockwise.
     86          */
     87          static void _DrawBitmap(int x0, int y0,
     88                                 int xsize, int ysize,
     89                                 int BitsPerPixel, 
     90                                 int BytesPerLine,
     91                                 const U8 GUI_UNI_PTR * pData, int Diff,
     92                                 const LCD_PIXELINDEX* pTrans)
     93          {
     94            int i;
     95            /* Use _DrawBitLineXBPP */
     96            for (i=0; i<ysize; i++) {
     97              switch (BitsPerPixel) {
     98              case 1:
     99                _DrawBitLine1BPP(x0 + i, y0, pData, Diff, xsize, pTrans);
    100                break;
    101              }
    102              pData += BytesPerLine;
    103            }
    104          }
    105          
    106          /*********************************************************************
    107          *
    108          *       _Rect2TextRect
    109          *
    110          * Purpose:
    111          *   This function transforms a given rectangle (window coordinates)
    112          *   to the rectangle used to clip the text.
    113          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          static void _Rect2TextRect(GUI_RECT * pRect) {
   \                     _Rect2TextRect:
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    115            int x1, y1;
    116            x1 = pRect->x1;
   \   000005   EA           MOV     A,R2
   \   000006   2404         ADD     A,#0x4
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   12....       LCALL   ?Subroutine3 & 0xFFFF
    117            y1 = pRect->y1;
    118            pRect->x1 = pRect->x0 + (y1 - pRect->y0);
   \                     ??CrossCallReturnLabel_6:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FE           MOV     R6,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FF           MOV     R7,A
   \   00001F   EA           MOV     A,R2
   \   000020   2406         ADD     A,#0x6
   \   000022   FC           MOV     R4,A
   \   000023   EB           MOV     A,R3
   \   000024   3400         ADDC    A,#0x0
   \   000026   FD           MOV     R5,A
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000039   EA           MOV     A,R2
   \   00003A   C3           CLR     C
   \   00003B   9E           SUBB    A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   EB           MOV     A,R3
   \   00003E   9F           SUBB    A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   EA           MOV     A,R2
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   EB           MOV     A,R3
   \   000048   F0           MOVX    @DPTR,A
    119            pRect->y1 = pRect->y0 + (x1 - pRect->x0);
   \   000049   EE           MOV     A,R6
   \   00004A   25..         ADD     A,?V0 + 2
   \   00004C   F8           MOV     R0,A
   \   00004D   EF           MOV     A,R7
   \   00004E   35..         ADDC    A,?V0 + 3
   \   000050   F9           MOV     R1,A
   \   000051   E8           MOV     A,R0
   \   000052   C3           CLR     C
   \   000053   95..         SUBB    A,?V0 + 0
   \   000055   F8           MOV     R0,A
   \   000056   E9           MOV     A,R1
   \   000057   95..         SUBB    A,?V0 + 1
   \   000059   F9           MOV     R1,A
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   12....       LCALL   ?Subroutine12 & 0xFFFF
    120          }
   \                     ??CrossCallReturnLabel_24:
   \   000061   7F05         MOV     R7,#0x5
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
    121          
    122          /*********************************************************************
    123          *
    124          *       _TransformPointCCW
    125          *
    126          * Purpose:
    127          *   This function transforms an unrotated point (window
    128          *   coordinates) into a rotated point in desktop coordinates
    129          *   and handles the rotation of the current text rectangle.
    130          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          static void _TransformPointCCW(int * pXPos, int * pYPos) {
   \                     _TransformPointCCW:
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    132            GUI_RECT ClientRect = {0};
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001F   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000022   7408         MOV     A,#0x8
   \   000024   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    133            int xPos, yPos, xNumPixel, yNumPixel;
    134            /* Get the client rectangle */
    135            #if GUI_WINSUPPORT
    136              WM_GetWindowRect(&ClientRect);
    137            #else
    138              GUI_GetClientRect(&ClientRect);
   \   000027                ; Setup parameters for call to function GUI_GetClientRect
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   12....       LCALL   ??GUI_GetClientRect?relay
    139            #endif
    140            xNumPixel = LCD_GetXSize() - 1;
   \   000034                ; Setup parameters for call to function LCD_GetXSize
   \   000034   12....       LCALL   ??LCD_GetXSize?relay
   \   000037   EA           MOV     A,R2
   \   000038   24FF         ADD     A,#-0x1
   \   00003A   F5..         MOV     ?V0 + 2,A
   \   00003C   EB           MOV     A,R3
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V0 + 3,A
    141            yNumPixel = LCD_GetYSize() - 1;
   \   000041                ; Setup parameters for call to function LCD_GetYSize
   \   000041   12....       LCALL   ??LCD_GetYSize?relay
   \   000044   EA           MOV     A,R2
   \   000045   24FF         ADD     A,#-0x1
   \   000047   F8           MOV     R0,A
   \   000048   EB           MOV     A,R3
   \   000049   34FF         ADDC    A,#-0x1
   \   00004B   F9           MOV     R1,A
    142            if (ClientRect.x1 > xNumPixel) {
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000054   C3           CLR     C
   \   000055   E5..         MOV     A,?V0 + 2
   \   000057   9A           SUBB    A,R2
   \   000058   E5..         MOV     A,?V0 + 3
   \   00005A   9B           SUBB    A,R3
   \   00005B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005D   65D0         XRL     A,PSW
   \   00005F   33           RLC     A
   \   000060   500C         JNC     ??_TransformPointCCW_0
    143              ClientRect.x1 = xNumPixel;
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E5..         MOV     A,?V0 + 2
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E5..         MOV     A,?V0 + 3
   \   00006D   F0           MOVX    @DPTR,A
    144            }
    145            if (ClientRect.y1 > yNumPixel) {
   \                     ??_TransformPointCCW_0:
   \   00006E   7406         MOV     A,#0x6
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000076   C3           CLR     C
   \   000077   E8           MOV     A,R0
   \   000078   9A           SUBB    A,R2
   \   000079   E9           MOV     A,R1
   \   00007A   9B           SUBB    A,R3
   \   00007B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00007D   65D0         XRL     A,PSW
   \   00007F   33           RLC     A
   \   000080   5008         JNC     ??CrossCallReturnLabel_25
    146              ClientRect.y1 = yNumPixel;
   \   000082   7406         MOV     A,#0x6
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine12 & 0xFFFF
    147            }
    148            /* Save old positions */
    149            xPos = *pXPos;
   \                     ??CrossCallReturnLabel_25:
   \   00008A   12....       LCALL   ?Subroutine2 & 0xFFFF
    150            yPos = *pYPos;
    151            /* Rotate and add window origin */
    152            *pXPos = ClientRect.x0 + yPos;
   \                     ??CrossCallReturnLabel_61:
   \   00008D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000090   85..82       MOV     DPL,?V0 + 0
   \   000093   85..83       MOV     DPH,?V0 + 1
   \   000096   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000099   8E82         MOV     DPL,R6
   \   00009B   8F83         MOV     DPH,R7
   \   00009D   12....       LCALL   ?Subroutine12 & 0xFFFF
    153            *pYPos = ClientRect.y1 - xPos;
   \                     ??CrossCallReturnLabel_26:
   \   0000A0   7406         MOV     A,#0x6
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000A8   C3           CLR     C
   \   0000A9   9A           SUBB    A,R2
   \   0000AA   FA           MOV     R2,A
   \   0000AB   E9           MOV     A,R1
   \   0000AC   9B           SUBB    A,R3
   \   0000AD   FB           MOV     R3,A
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   EA           MOV     A,R2
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   EB           MOV     A,R3
   \   0000B8   F0           MOVX    @DPTR,A
    154            /* Handle rotation of text rectangle */
    155            *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
   \   0000B9   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000BC   90....       MOV     DPTR,#GUI_RectDispString
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2A           ADD     A,R2
   \   0000C1   FC           MOV     R4,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   3B           ADDC    A,R3
   \   0000C5   FD           MOV     R5,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000CA   EC           MOV     A,R4
   \   0000CB   C3           CLR     C
   \   0000CC   9A           SUBB    A,R2
   \   0000CD   FA           MOV     R2,A
   \   0000CE   ED           MOV     A,R5
   \   0000CF   9B           SUBB    A,R3
   \   0000D0   FB           MOV     R3,A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   EA           MOV     A,R2
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   EB           MOV     A,R3
   \   0000D9   F0           MOVX    @DPTR,A
    156            *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
   \   0000DA   85..82       MOV     DPL,?V0 + 0
   \   0000DD   85..83       MOV     DPH,?V0 + 1
   \   0000E0   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000E3   90....       MOV     DPTR,#GUI_RectDispString + 6
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   2A           ADD     A,R2
   \   0000E8   FA           MOV     R2,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   3B           ADDC    A,R3
   \   0000EC   FB           MOV     R3,A
   \   0000ED   EA           MOV     A,R2
   \   0000EE   C3           CLR     C
   \   0000EF   98           SUBB    A,R0
   \   0000F0   F8           MOV     R0,A
   \   0000F1   EB           MOV     A,R3
   \   0000F2   99           SUBB    A,R1
   \   0000F3   F9           MOV     R1,A
   \   0000F4   7402         MOV     A,#0x2
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000FC   90....       MOV     DPTR,#GUI_RectDispString
   \   0000FF   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000102   85..82       MOV     DPL,?V0 + 0
   \   000105   85..83       MOV     DPH,?V0 + 1
   \   000108   12....       LCALL   ?Subroutine12 & 0xFFFF
    157          }
   \                     ??CrossCallReturnLabel_27:
   \   00010B   7408         MOV     A,#0x8
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   7F06         MOV     R7,#0x6
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine16_0
   \   000006                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine17_0
   \   000004                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   F9           MOV     R1,A
   \   000007   22           RET
    158          
    159          /*********************************************************************
    160          *
    161          *       _DrawBitmapCCW
    162          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
   \                     _DrawBitmapCCW:
    164                                     int BitsPerPixel, int BytesPerLine,
    165                                     const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
    166          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000016   EC           MOV     A,R4
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   ED           MOV     A,R5
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   742A         MOV     A,#0x2a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FF           MOV     R7,A
   \   000025   742C         MOV     A,#0x2c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 4,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 5,A
   \   000031   7432         MOV     A,#0x32
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0 + 8,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 9,A
   \   00003D   7434         MOV     A,#0x34
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0 + 10,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V0 + 11,A
    167            U8  Data = 0;
   \   000049   75..00       MOV     ?V0 + 14,#0x0
    168            int x1, y1;
    169            /* Handle the optional Y-magnification */
    170            y1 = y0 + ysize - 1;
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   25..         ADD     A,?V0 + 4
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   35..         ADDC    A,?V0 + 5
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   18           DEC     R0
   \   00005F   E9           MOV     A,R1
   \   000060   34FF         ADDC    A,#-0x1
   \   000062   F9           MOV     R1,A
   \   000063   740C         MOV     A,#0xc
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   12....       LCALL   ?Subroutine12 & 0xFFFF
    171            x1 = x0 + xsize - 1;
   \                     ??CrossCallReturnLabel_28:
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   2E           ADD     A,R6
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   3F           ADDC    A,R7
   \   000076   F9           MOV     R1,A
   \   000077   E8           MOV     A,R0
   \   000078   24FF         ADD     A,#-0x1
   \   00007A   18           DEC     R0
   \   00007B   E9           MOV     A,R1
   \   00007C   34FF         ADDC    A,#-0x1
   \   00007E   F9           MOV     R1,A
   \   00007F   740A         MOV     A,#0xa
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine11 & 0xFFFF
    172            /* Rotate positions */
    173            _TransformPointCCW(&x0, &y0);
   \                     ??CrossCallReturnLabel_36:
   \   000087   AC82         MOV     R4,DPL
   \   000089   AD83         MOV     R5,DPH
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AA82         MOV     R2,DPL
   \   000092   AB83         MOV     R3,DPH
   \   000094   12....       LCALL   ??_TransformPointCCW?relay
    174            _TransformPointCCW(&x1, &y1);
   \   000097                ; Setup parameters for call to function _TransformPointCCW
   \   000097   740C         MOV     A,#0xc
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   AC82         MOV     R4,DPL
   \   00009E   AD83         MOV     R5,DPH
   \   0000A0   740A         MOV     A,#0xa
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   AA82         MOV     R2,DPL
   \   0000A7   AB83         MOV     R3,DPH
   \   0000A9   12....       LCALL   ??_TransformPointCCW?relay
    175            /*  Handle BITMAP without magnification */
    176            if ((xMul == 1) && (yMul == 1)) {
   \   0000AC   742E         MOV     A,#0x2e
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6401         XRL     A,#0x1
   \   0000B4   7002         JNZ     ??_DrawBitmapCCW_0
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \                     ??_DrawBitmapCCW_0:
   \   0000B8   6003         JZ      $+5
   \   0000BA   02....       LJMP    ??_DrawBitmapCCW_1 & 0xFFFF
   \   0000BD   7430         MOV     A,#0x30
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   6401         XRL     A,#0x1
   \   0000C5   7002         JNZ     ??_DrawBitmapCCW_2
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \                     ??_DrawBitmapCCW_2:
   \   0000C9   6003         JZ      $+5
   \   0000CB   02....       LJMP    ??_DrawBitmapCCW_1 & 0xFFFF
    177              int Diff = 0;
   \   0000CE   75..00       MOV     ?V0 + 6,#0x0
   \   0000D1   75..00       MOV     ?V0 + 7,#0x0
    178              /* Clip top */
    179              if (y1 < GUI_Context.ClipRect.y0) {
   \   0000D4   740C         MOV     A,#0xc
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   C082         PUSH    DPL
   \   0000DB   C083         PUSH    DPH
   \   0000DD   90....       MOV     DPTR,#GUI_Context + 6
   \   0000E0   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000E3   D083         POP     DPH
   \   0000E5   D082         POP     DPL
   \   0000E7   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000EA   5013         JNC     ??_DrawBitmapCCW_3
    180                int Diff = GUI_Context.ClipRect.y0 - y1;
    181                xsize -= Diff;
   \   0000EC   EE           MOV     A,R6
   \   0000ED   C3           CLR     C
   \   0000EE   98           SUBB    A,R0
   \   0000EF   F8           MOV     R0,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   99           SUBB    A,R1
   \   0000F2   F9           MOV     R1,A
   \   0000F3   740C         MOV     A,#0xc
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   28           ADD     A,R0
   \   0000FA   FE           MOV     R6,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   39           ADDC    A,R1
   \   0000FE   FF           MOV     R7,A
    182              }
    183              /* Clip bottom */
    184              if (y0 > GUI_Context.ClipRect.y1) {
   \                     ??_DrawBitmapCCW_3:
   \   0000FF   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000102   7583..       MOV     DPH,#((GUI_Context + 10) >> 8) & 0xff
   \   000105   7582..       MOV     DPL,#(GUI_Context + 10) & 0xff
   \   000108   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00010B   5072         JNC     ??_DrawBitmapCCW_4
    185                Diff = y0 - GUI_Context.ClipRect.y1;
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   C082         PUSH    DPL
   \   000115   C083         PUSH    DPH
   \   000117   90....       MOV     DPTR,#GUI_Context + 10
   \   00011A   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00011D   D083         POP     DPH
   \   00011F   D082         POP     DPL
   \   000121   E0           MOVX    A,@DPTR
   \   000122   C3           CLR     C
   \   000123   98           SUBB    A,R0
   \   000124   F5..         MOV     ?V0 + 6,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   99           SUBB    A,R1
   \   000129   F5..         MOV     ?V0 + 7,A
    186          			xsize -= Diff;
   \   00012B   C3           CLR     C
   \   00012C   EE           MOV     A,R6
   \   00012D   95..         SUBB    A,?V0 + 6
   \   00012F   FE           MOV     R6,A
   \   000130   EF           MOV     A,R7
   \   000131   95..         SUBB    A,?V0 + 7
   \   000133   FF           MOV     R7,A
    187          			switch (BitsPerPixel) {
   \   000134   7401         MOV     A,#0x1
   \   000136   65..         XRL     A,?V0 + 8
   \   000138   7002         JNZ     ??_DrawBitmapCCW_5
   \   00013A   E5..         MOV     A,?V0 + 9
   \                     ??_DrawBitmapCCW_5:
   \   00013C   7041         JNZ     ??_DrawBitmapCCW_4
    188          			case 1:
    189            			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
   \   00013E   85....       MOV     ?V0 + 0,?V0 + 6
   \   000141   85....       MOV     ?V0 + 1,?V0 + 7
   \   000144   7403         MOV     A,#0x3
   \   000146   78..         MOV     R0,#?V0 + 0
   \   000148   12....       LCALL   ?SS_SHR
   \   00014B   7436         MOV     A,#0x36
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   25..         ADD     A,?V0 + 0
   \   000153   F8           MOV     R0,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   35..         ADDC    A,?V0 + 1
   \   000158   F9           MOV     R1,A
   \   000159   7436         MOV     A,#0x36
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000161   E5..         MOV     A,?V0 + 6
   \   000163   54F8         ANL     A,#0xf8
   \   000165   F8           MOV     R0,A
   \   000166   A9..         MOV     R1,?V0 + 7
   \   000168   85..82       MOV     DPL,?XSP + 0
   \   00016B   85..83       MOV     DPH,?XSP + 1
   \   00016E   C3           CLR     C
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   98           SUBB    A,R0
   \   000171   F0           MOVX    @DPTR,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   99           SUBB    A,R1
   \   000175   F0           MOVX    @DPTR,A
   \   000176   7407         MOV     A,#0x7
   \   000178   55..         ANL     A,?V0 + 6
   \   00017A   F5..         MOV     ?V0 + 6,A
   \   00017C   75..00       MOV     ?V0 + 7,#0x0
    190          				break;
    191          			}
    192              }
    193              if (ysize <= 0) {
   \                     ??_DrawBitmapCCW_4:
   \   00017F   C3           CLR     C
   \   000180   E5..         MOV     A,?V0 + 4
   \   000182   9401         SUBB    A,#0x1
   \   000184   E5..         MOV     A,?V0 + 5
   \   000186   9400         SUBB    A,#0x0
   \   000188   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00018A   65D0         XRL     A,PSW
   \   00018C   33           RLC     A
   \   00018D   5003         JNC     $+5
   \   00018F   02....       LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
    194          		  return;
    195              }
    196              /* Clip right side */
    197              if (x1 > GUI_Context.ClipRect.x1) {
   \   000192   740A         MOV     A,#0xa
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00019A   5015         JNC     ??_DrawBitmapCCW_7
    198                int Diff = x1 - GUI_Context.ClipRect.x1;
    199                ysize -= Diff;
   \   00019C   E5..         MOV     A,?V0 + 4
   \   00019E   C3           CLR     C
   \   00019F   98           SUBB    A,R0
   \   0001A0   F8           MOV     R0,A
   \   0001A1   E5..         MOV     A,?V0 + 5
   \   0001A3   99           SUBB    A,R1
   \   0001A4   F9           MOV     R1,A
   \   0001A5   90....       MOV     DPTR,#GUI_Context + 8
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   28           ADD     A,R0
   \   0001AA   F5..         MOV     ?V0 + 4,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   39           ADDC    A,R1
   \   0001AF   F5..         MOV     ?V0 + 5,A
    200              }
    201              /* Clip left side */
    202              if (x0 < GUI_Context.ClipRect.x0) {
   \                     ??_DrawBitmapCCW_7:
   \   0001B1   7402         MOV     A,#0x2
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   C082         PUSH    DPL
   \   0001B8   C083         PUSH    DPH
   \   0001BA   90....       MOV     DPTR,#GUI_Context + 4
   \   0001BD   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001C0   D083         POP     DPH
   \   0001C2   D082         POP     DPL
   \   0001C4   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0001C7   5056         JNC     ??_DrawBitmapCCW_8
    203                int Diff = GUI_Context.ClipRect.x0 - x0;
   \   0001C9   7402         MOV     A,#0x2
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001D1   7583..       MOV     DPH,#((GUI_Context + 4) >> 8) & 0xff
   \   0001D4   7582..       MOV     DPL,#(GUI_Context + 4) & 0xff
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   C3           CLR     C
   \   0001D9   98           SUBB    A,R0
   \   0001DA   FA           MOV     R2,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   99           SUBB    A,R1
   \   0001DE   FB           MOV     R3,A
    204                pPixel += Diff * BytesPerLine;
   \   0001DF   EA           MOV     A,R2
   \   0001E0   F8           MOV     R0,A
   \   0001E1   EB           MOV     A,R3
   \   0001E2   F9           MOV     R1,A
   \   0001E3   E8           MOV     A,R0
   \   0001E4   85..F0       MOV     B,?V0 + 10
   \   0001E7   A4           MUL     AB
   \   0001E8   C8           XCH     A,R0
   \   0001E9   ACF0         MOV     R4,B
   \   0001EB   85..F0       MOV     B,?V0 + 11
   \   0001EE   A4           MUL     AB
   \   0001EF   2C           ADD     A,R4
   \   0001F0   FC           MOV     R4,A
   \   0001F1   85..F0       MOV     B,?V0 + 10
   \   0001F4   E9           MOV     A,R1
   \   0001F5   A4           MUL     AB
   \   0001F6   2C           ADD     A,R4
   \   0001F7   F9           MOV     R1,A
   \   0001F8   7436         MOV     A,#0x36
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000200   7436         MOV     A,#0x36
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   12....       LCALL   ?Subroutine12 & 0xFFFF
    205                x0 += Diff;
   \                     ??CrossCallReturnLabel_30:
   \   000208   7402         MOV     A,#0x2
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   2A           ADD     A,R2
   \   00020F   F0           MOVX    @DPTR,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   3B           ADDC    A,R3
   \   000213   F0           MOVX    @DPTR,A
    206                ysize -= Diff;
   \   000214   C3           CLR     C
   \   000215   E5..         MOV     A,?V0 + 4
   \   000217   9A           SUBB    A,R2
   \   000218   F5..         MOV     ?V0 + 4,A
   \   00021A   E5..         MOV     A,?V0 + 5
   \   00021C   9B           SUBB    A,R3
   \   00021D   F5..         MOV     ?V0 + 5,A
    207              }
    208              if (xsize <= 0) {
   \                     ??_DrawBitmapCCW_8:
   \   00021F   C3           CLR     C
   \   000220   EE           MOV     A,R6
   \   000221   9401         SUBB    A,#0x1
   \   000223   EF           MOV     A,R7
   \   000224   9400         SUBB    A,#0x0
   \   000226   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000228   65D0         XRL     A,PSW
   \   00022A   33           RLC     A
   \   00022B   5003         JNC     $+5
   \   00022D   02....       LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
    209          		  return;
    210              }
    211              _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
   \   000230   7436         MOV     A,#0x36
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F5..         MOV     ?V0 + 12,A
   \   000238   A3           INC     DPTR
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F5..         MOV     ?V0 + 13,A
   \   00023C   85..82       MOV     DPL,?XSP + 0
   \   00023F   85..83       MOV     DPH,?XSP + 1
   \   000242   12....       LCALL   ?Subroutine3 & 0xFFFF
    212            } else {
   \                     ??CrossCallReturnLabel_7:
   \   000245   7402         MOV     A,#0x2
   \   000247   12....       LCALL   ?XSTACK_DISP0_8
   \   00024A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000253   75..00       MOV     ?V0 + 0,#0x0
   \   000256   75..00       MOV     ?V0 + 1,#0x0
   \                     ??_DrawBitmapCCW_9:
   \   000259   C3           CLR     C
   \   00025A   E5..         MOV     A,?V0 + 0
   \   00025C   95..         SUBB    A,?V0 + 4
   \   00025E   E5..         MOV     A,?V0 + 1
   \   000260   95..         SUBB    A,?V0 + 5
   \   000262   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000264   65D0         XRL     A,PSW
   \   000266   33           RLC     A
   \   000267   4003         JC      $+5
   \   000269   02....       LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
   \   00026C   7401         MOV     A,#0x1
   \   00026E   65..         XRL     A,?V0 + 8
   \   000270   7002         JNZ     ??_DrawBitmapCCW_10
   \   000272   E5..         MOV     A,?V0 + 9
   \                     ??_DrawBitmapCCW_10:
   \   000274   702F         JNZ     ??_DrawBitmapCCW_11
   \   000276                ; Setup parameters for call to function _DrawBitLine1BPP
   \   000276   7438         MOV     A,#0x38
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00027E   8E..         MOV     ?V0 + 14,R6
   \   000280   8F..         MOV     ?V0 + 15,R7
   \   000282   78..         MOV     R0,#?V0 + 14
   \   000284   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000287   78..         MOV     R0,#?V0 + 6
   \   000289   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028C   78..         MOV     R0,#?V0 + 12
   \   00028E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000291   AC..         MOV     R4,?V0 + 2
   \   000293   AD..         MOV     R5,?V0 + 3
   \   000295   740C         MOV     A,#0xc
   \   000297   12....       LCALL   ?XSTACK_DISP0_8
   \   00029A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00029D   12....       LCALL   ??_DrawBitLine1BPP?relay
   \   0002A0   7408         MOV     A,#0x8
   \   0002A2   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??_DrawBitmapCCW_11:
   \   0002A5   E5..         MOV     A,?V0 + 12
   \   0002A7   25..         ADD     A,?V0 + 10
   \   0002A9   F5..         MOV     ?V0 + 12,A
   \   0002AB   E5..         MOV     A,?V0 + 13
   \   0002AD   35..         ADDC    A,?V0 + 11
   \   0002AF   F5..         MOV     ?V0 + 13,A
   \   0002B1   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0002B4   80A3         SJMP    ??_DrawBitmapCCW_9
    213              /* Handle BITMAP with magnification */
    214              int x, y, xi, yi;
    215              int Shift = 8 - BitsPerPixel;
   \                     ??_DrawBitmapCCW_1:
   \   0002B6   7408         MOV     A,#0x8
   \   0002B8   C3           CLR     C
   \   0002B9   95..         SUBB    A,?V0 + 8
   \   0002BB   F5..         MOV     ?V0 + 2,A
    216              for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
   \   0002BD   7402         MOV     A,#0x2
   \   0002BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0002C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0002CB   7410         MOV     A,#0x10
   \   0002CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D0   E4           CLR     A
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2   A3           INC     DPTR
   \   0002D3   8031         SJMP    ??_DrawBitmapCCW_12
   \                     ??_DrawBitmapCCW_13:
   \   0002D5   7410         MOV     A,#0x10
   \   0002D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002DD   7430         MOV     A,#0x30
   \   0002DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   28           ADD     A,R0
   \   0002EA   F0           MOVX    @DPTR,A
   \   0002EB   A3           INC     DPTR
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   39           ADDC    A,R1
   \   0002EE   F0           MOVX    @DPTR,A
   \   0002EF   7436         MOV     A,#0x36
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   25..         ADD     A,?V0 + 10
   \   0002F7   F8           MOV     R0,A
   \   0002F8   A3           INC     DPTR
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   35..         ADDC    A,?V0 + 11
   \   0002FC   F9           MOV     R1,A
   \   0002FD   7436         MOV     A,#0x36
   \   0002FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000302   E8           MOV     A,R0
   \   000303   F0           MOVX    @DPTR,A
   \   000304   A3           INC     DPTR
   \   000305   E9           MOV     A,R1
   \                     ??_DrawBitmapCCW_12:
   \   000306   F0           MOVX    @DPTR,A
   \   000307   7410         MOV     A,#0x10
   \   000309   12....       LCALL   ?XSTACK_DISP0_8
   \   00030C   C3           CLR     C
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   95..         SUBB    A,?V0 + 4
   \   000310   A3           INC     DPTR
   \   000311   E0           MOVX    A,@DPTR
   \   000312   95..         SUBB    A,?V0 + 5
   \   000314   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000316   65D0         XRL     A,PSW
   \   000318   33           RLC     A
   \   000319   4003         JC      $+5
   \   00031B   02....       LJMP    ??_DrawBitmapCCW_6 & 0xFFFF
    217                int xMax = x + yMul - 1;
   \   00031E   7404         MOV     A,#0x4
   \   000320   12....       LCALL   ?XSTACK_DISP0_8
   \   000323   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000326   7430         MOV     A,#0x30
   \   000328   12....       LCALL   ?XSTACK_DISP0_8
   \   00032B   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00032E   E8           MOV     A,R0
   \   00032F   24FF         ADD     A,#-0x1
   \   000331   F5..         MOV     ?V0 + 0,A
   \   000333   E9           MOV     A,R1
   \   000334   34FF         ADDC    A,#-0x1
   \   000336   F5..         MOV     ?V0 + 1,A
    218                if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
   \   000338   90....       MOV     DPTR,#GUI_Context + 4
   \   00033B   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00033E   C3           CLR     C
   \   00033F   E5..         MOV     A,?V0 + 0
   \   000341   98           SUBB    A,R0
   \   000342   E5..         MOV     A,?V0 + 1
   \   000344   99           SUBB    A,R1
   \   000345   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000347   65D0         XRL     A,PSW
   \   000349   33           RLC     A
   \   00034A   4089         JC      ??_DrawBitmapCCW_13
   \   00034C   7404         MOV     A,#0x4
   \   00034E   12....       LCALL   ?XSTACK_DISP0_8
   \   000351   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000354   5003         JNC     $+5
   \   000356   02....       LJMP    ??_DrawBitmapCCW_13 & 0xFFFF
    219                  int BitsLeft = 0;
   \   000359   7408         MOV     A,#0x8
   \   00035B   12....       LCALL   ?XSTACK_DISP0_8
   \   00035E   E4           CLR     A
   \   00035F   F0           MOVX    @DPTR,A
   \   000360   A3           INC     DPTR
   \   000361   F0           MOVX    @DPTR,A
    220                  const U8 GUI_UNI_PTR * pDataLine = pPixel;
   \   000362   7436         MOV     A,#0x36
   \   000364   12....       LCALL   ?XSTACK_DISP0_8
   \   000367   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00036A   7406         MOV     A,#0x6
   \   00036C   12....       LCALL   ?XSTACK_DISP0_8
   \   00036F   12....       LCALL   ?Subroutine11 & 0xFFFF
    221                  for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
   \                     ??CrossCallReturnLabel_37:
   \   000372   E0           MOVX    A,@DPTR
   \   000373   F5..         MOV     ?V0 + 6,A
   \   000375   A3           INC     DPTR
   \   000376   E0           MOVX    A,@DPTR
   \   000377   F5..         MOV     ?V0 + 7,A
   \   000379   740E         MOV     A,#0xe
   \   00037B   12....       LCALL   ?XSTACK_DISP0_8
   \   00037E   E4           CLR     A
   \   00037F   F0           MOVX    @DPTR,A
   \   000380   A3           INC     DPTR
   \   000381   F0           MOVX    @DPTR,A
   \   000382   8060         SJMP    ??_DrawBitmapCCW_14
    222                    U8  Index;
    223                    if (!BitsLeft) {
    224                      Data = *pDataLine++;
    225                      BitsLeft =8;
    226                    }
    227                    Index = Data >> Shift;
    228                    Data    <<= BitsPerPixel;
    229                    BitsLeft -= BitsPerPixel;
    230                    if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
    231                      LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
    232                      if (pTrans) {
    233                        LCD_COLORINDEX = *(pTrans + Index);
    234                      } else {
    235                        LCD_COLORINDEX = Index;
   \                     ??_DrawBitmapCCW_15:
   \   000384   EA           MOV     A,R2
   \   000385   90....       MOV     DPTR,#GUI_Context + 2
   \   000388   F0           MOVX    @DPTR,A
   \   000389   A3           INC     DPTR
   \   00038A   E4           CLR     A
   \                     ??_DrawBitmapCCW_16:
   \   00038B   F0           MOVX    @DPTR,A
    236                      }
    237                      LCD_FillRect(x, y - xMul + 1, xMax, y);
   \   00038C                ; Setup parameters for call to function LCD_FillRect
   \   00038C   78..         MOV     R0,#?V0 + 6
   \   00038E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000391   78..         MOV     R0,#?V0 + 0
   \   000393   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000396   7432         MOV     A,#0x32
   \   000398   12....       LCALL   ?XSTACK_DISP0_8
   \   00039B   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00039E   E5..         MOV     A,?V0 + 6
   \   0003A0   C3           CLR     C
   \   0003A1   98           SUBB    A,R0
   \   0003A2   F8           MOV     R0,A
   \   0003A3   E5..         MOV     A,?V0 + 7
   \   0003A5   99           SUBB    A,R1
   \   0003A6   F9           MOV     R1,A
   \   0003A7   E8           MOV     A,R0
   \   0003A8   2401         ADD     A,#0x1
   \   0003AA   FC           MOV     R4,A
   \   0003AB   E9           MOV     A,R1
   \   0003AC   3400         ADDC    A,#0x0
   \   0003AE   FD           MOV     R5,A
   \   0003AF   7408         MOV     A,#0x8
   \   0003B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B4   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0003B7   12....       LCALL   ??LCD_FillRect?relay
   \   0003BA   7404         MOV     A,#0x4
   \   0003BC   12....       LCALL   ?DEALLOC_XSTACK8
    238                      LCD_COLORINDEX = OldColor;
   \   0003BF   90....       MOV     DPTR,#GUI_Context + 2
   \   0003C2   E5..         MOV     A,?V0 + 12
   \   0003C4   F0           MOVX    @DPTR,A
   \   0003C5   A3           INC     DPTR
   \   0003C6   E5..         MOV     A,?V0 + 13
   \   0003C8   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmapCCW_17:
   \   0003C9   740E         MOV     A,#0xe
   \   0003CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0003D1   742E         MOV     A,#0x2e
   \   0003D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D6   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0003D9   C3           CLR     C
   \   0003DA   E5..         MOV     A,?V0 + 6
   \   0003DC   98           SUBB    A,R0
   \   0003DD   F5..         MOV     ?V0 + 6,A
   \   0003DF   E5..         MOV     A,?V0 + 7
   \   0003E1   99           SUBB    A,R1
   \   0003E2   F5..         MOV     ?V0 + 7,A
   \                     ??_DrawBitmapCCW_14:
   \   0003E4   740E         MOV     A,#0xe
   \   0003E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E9   C3           CLR     C
   \   0003EA   E0           MOVX    A,@DPTR
   \   0003EB   9E           SUBB    A,R6
   \   0003EC   A3           INC     DPTR
   \   0003ED   E0           MOVX    A,@DPTR
   \   0003EE   9F           SUBB    A,R7
   \   0003EF   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003F1   65D0         XRL     A,PSW
   \   0003F3   33           RLC     A
   \   0003F4   4003         JC      $+5
   \   0003F6   02....       LJMP    ??_DrawBitmapCCW_13 & 0xFFFF
   \   0003F9   7408         MOV     A,#0x8
   \   0003FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FE   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000401   49           ORL     A,R1
   \   000402   7031         JNZ     ??_DrawBitmapCCW_18
   \   000404   7406         MOV     A,#0x6
   \   000406   12....       LCALL   ?XSTACK_DISP0_8
   \   000409   E0           MOVX    A,@DPTR
   \   00040A   F8           MOV     R0,A
   \   00040B   A3           INC     DPTR
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   F583         MOV     DPH,A
   \   00040F   8882         MOV     DPL,R0
   \   000411   E0           MOVX    A,@DPTR
   \   000412   F5..         MOV     ?V0 + 14,A
   \   000414   7406         MOV     A,#0x6
   \   000416   12....       LCALL   ?XSTACK_DISP0_8
   \   000419   E0           MOVX    A,@DPTR
   \   00041A   2401         ADD     A,#0x1
   \   00041C   08           INC     R0
   \   00041D   A3           INC     DPTR
   \   00041E   E0           MOVX    A,@DPTR
   \   00041F   3400         ADDC    A,#0x0
   \   000421   F9           MOV     R1,A
   \   000422   7406         MOV     A,#0x6
   \   000424   12....       LCALL   ?XSTACK_DISP0_8
   \   000427   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00042A   7408         MOV     A,#0x8
   \   00042C   12....       LCALL   ?XSTACK_DISP0_8
   \   00042F   7408         MOV     A,#0x8
   \   000431   F0           MOVX    @DPTR,A
   \   000432   A3           INC     DPTR
   \   000433   E4           CLR     A
   \   000434   F0           MOVX    @DPTR,A
   \                     ??_DrawBitmapCCW_18:
   \   000435   85....       MOV     ?V0 + 12,?V0 + 14
   \   000438   75..00       MOV     ?V0 + 13,#0x0
   \   00043B   E5..         MOV     A,?V0 + 2
   \   00043D   78..         MOV     R0,#?V0 + 12
   \   00043F   12....       LCALL   ?SS_SHR
   \   000442   AA..         MOV     R2,?V0 + 12
   \   000444   A8..         MOV     R0,?V0 + 8
   \   000446   E5..         MOV     A,?V0 + 14
   \   000448   B80002       CJNE    R0,#0x0,??_DrawBitmapCCW_19
   \   00044B   8004         SJMP    ??_DrawBitmapCCW_20
   \                     ??_DrawBitmapCCW_19:
   \   00044D   C3           CLR     C
   \   00044E   33           RLC     A
   \   00044F   D8FC         DJNZ    R0,??_DrawBitmapCCW_19
   \                     ??_DrawBitmapCCW_20:
   \   000451   F5..         MOV     ?V0 + 14,A
   \   000453   7408         MOV     A,#0x8
   \   000455   12....       LCALL   ?XSTACK_DISP0_8
   \   000458   C3           CLR     C
   \   000459   E0           MOVX    A,@DPTR
   \   00045A   95..         SUBB    A,?V0 + 8
   \   00045C   F0           MOVX    @DPTR,A
   \   00045D   A3           INC     DPTR
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   95..         SUBB    A,?V0 + 9
   \   000461   F0           MOVX    @DPTR,A
   \   000462   EA           MOV     A,R2
   \   000463   700B         JNZ     ??_DrawBitmapCCW_21
   \   000465   90....       MOV     DPTR,#GUI_Context + 12
   \   000468   E0           MOVX    A,@DPTR
   \   000469   A2E1         MOV     C,0xE0 /* A   */.1
   \   00046B   5003         JNC     $+5
   \   00046D   02....       LJMP    ??_DrawBitmapCCW_17 & 0xFFFF
   \                     ??_DrawBitmapCCW_21:
   \   000470   90....       MOV     DPTR,#GUI_Context + 2
   \   000473   E0           MOVX    A,@DPTR
   \   000474   F5..         MOV     ?V0 + 12,A
   \   000476   A3           INC     DPTR
   \   000477   E0           MOVX    A,@DPTR
   \   000478   F5..         MOV     ?V0 + 13,A
   \   00047A   7438         MOV     A,#0x38
   \   00047C   12....       LCALL   ?XSTACK_DISP0_8
   \   00047F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000482   49           ORL     A,R1
   \   000483   7003         JNZ     $+5
   \   000485   02....       LJMP    ??_DrawBitmapCCW_15 & 0xFFFF
   \   000488   EA           MOV     A,R2
   \   000489   C3           CLR     C
   \   00048A   33           RLC     A
   \   00048B   F8           MOV     R0,A
   \   00048C   E4           CLR     A
   \   00048D   33           RLC     A
   \   00048E   F9           MOV     R1,A
   \   00048F   7438         MOV     A,#0x38
   \   000491   12....       LCALL   ?XSTACK_DISP0_8
   \   000494   E0           MOVX    A,@DPTR
   \   000495   28           ADD     A,R0
   \   000496   FA           MOV     R2,A
   \   000497   A3           INC     DPTR
   \   000498   E0           MOVX    A,@DPTR
   \   000499   39           ADDC    A,R1
   \   00049A   8A82         MOV     DPL,R2
   \   00049C   F583         MOV     DPH,A
   \   00049E   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    239                    }
    240                  }
    241                }
    242              }
    243            }
   \                     ??CrossCallReturnLabel_49:
   \   0004A1   90....       MOV     DPTR,#GUI_Context + 2
   \   0004A4   E8           MOV     A,R0
   \   0004A5   F0           MOVX    @DPTR,A
   \   0004A6   A3           INC     DPTR
   \   0004A7   E9           MOV     A,R1
   \   0004A8   02....       LJMP    ??_DrawBitmapCCW_16 & 0xFFFF
   \                     ??_DrawBitmapCCW_6:
   \   0004AB   7412         MOV     A,#0x12
   \   0004AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B0   7F10         MOV     R7,#0x10
   \   0004B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine15_0
   \   000004                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function _TransformPointCCW
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   7583..       MOV     DPH,#((GUI_Context + 8) >> 8) & 0xff
   \   000006   7582..       MOV     DPL,#(GUI_Context + 8) & 0xff
   \   000009                REQUIRE ??Subroutine18_0
   \   000009                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   22           RET
    245          
    246          /*********************************************************************
    247          *
    248          *       Global data
    249          *
    250          **********************************************************************
    251          */
    252          /*********************************************************************
    253          *
    254          *       LCD_APIListCCW
    255          *
    256          * Purpose:
    257          *   Function pointer table for rotating text CCW
    258          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    259          tLCD_APIList LCD_APIListCCW = {
   \                     LCD_APIListCCW:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for LCD_APIListCCW>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LCD_APIListCCW>`:
   \   000000   ....         DW ??_DrawBitmapCCW?relay
   \   000002   ....         DW ??_Rect2TextRect?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitLine1BPP?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitLine1BPP

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_Rect2TextRect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Rect2TextRect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_TransformPointCCW?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _TransformPointCCW

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawBitmapCCW?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawBitmapCCW

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
    260            (tLCD_DrawBitmap*)&_DrawBitmapCCW,
    261            &_Rect2TextRect
    262          };
    263          
    264          #else
    265          void LCD_RotateCCW_C(void);
    266          void LCD_RotateCCW_C(void){}
    267          #endif
    268          

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     _DrawBitLine1BPP              0      0     74
       -> LCD_L0_SetPixelIndex     0      0     48
       -> LCD_L0_SetPixelIndex     0      0     48
       -> LCD_L0_GetPixelIndex     0      0     44
       -> LCD_L0_SetPixelIndex     0      0     48
     _DrawBitmapCCW                2      0     66
       -> _TransformPointCCW       0      0     84
       -> _TransformPointCCW       0      0     84
       -> _DrawBitLine1BPP         0      0    100
       -> LCD_FillRect             0      0     92
     _Rect2TextRect                0      0     13
     _TransformPointCCW            2      0     64
       -> GUI_GetClientRect        0      0     44
       -> LCD_GetXSize             0      0     44
       -> LCD_GetYSize             0      0     44


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     _DrawBitLine1BPP                   392
     ?Subroutine10                       17
     ?Subroutine9                        16
     ?Subroutine3                         8
     ?Subroutine14                       13
     ??Subroutine16_0                     4
     ?Subroutine13                        6
     _Rect2TextRect                     102
     ?Subroutine12                        6
     ?Subroutine7                        10
     _TransformPointCCW                 277
     ?Subroutine6                         6
     ?Subroutine5                         5
     ?Subroutine2                         4
     ??Subroutine17_0                     6
     ?Subroutine1                         8
     _DrawBitmapCCW                    1205
     ?Subroutine11                        4
     ??Subroutine15_0                     8
     ?Subroutine8                        10
     ?Subroutine4                         6
     ?Subroutine0                         9
     ??Subroutine18_0                    12
     LCD_APIListCCW                       4
     ?<Initializer for LCD_APIListCCW>    4
     ??_DrawBitLine1BPP?relay             6
     ??_Rect2TextRect?relay               6
     ??_TransformPointCCW?relay           6
     ??_DrawBitmapCCW?relay               6
     ?<Constant {0}>                      8

 
 2 134 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
 
 2 162 bytes of CODE  memory
     8 bytes of CONST memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
