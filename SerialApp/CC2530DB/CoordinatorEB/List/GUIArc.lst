###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\GUIArc.c                                         #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\GUIArc.c -D               #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\GUIArc #
#                          .lst                                               #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\GUIArc. #
#                          r51                                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\GUIArc.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUIARCFloat.C
     16          Purpose     : Draw Arc routines based on floating point
     17          ----------------------------------------------------------------------
     18          Version-Date---Author-Explanation
     19          ----------------------------------------------------------------------
     20          2.00.00 000325 RS     First release of the new algorithm
     21          ----------------------------------------------------------------------
     22          Known problems or limitations with current version
     23          ----------------------------------------------------------------------
     24          None.
     25          ----------------------------------------------------------------------
     26          Open issues
     27          ----------------------------------------------------------------------
     28          None
     29          ---------------------------END-OF-HEADER------------------------------
     30          */
     31          
     32          #include <stddef.h>           /* needed for definition of NULL */
     33          #include <math.h>
     34          #include "GUI_Protected.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     35          
     36          /*********************************************************************
     37          *
     38          *       Static code
     39          *
     40          **********************************************************************
     41          */
     42          /*********************************************************************
     43          *
     44          *       _CalcX
     45          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     46          static void _CalcX(int*px, int y, U32 r2) {
   \                     _CalcX:
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   7414         MOV     A,#0x14
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   78..         MOV     R0,#?V0 + 4
   \   000010   12....       LCALL   ?L_MOV_X
     47            int x =*px;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   12....       LCALL   ?Subroutine1 & 0xFFFF
     48            U32 y2 = (U32)y*(U32)y;
   \                     ??CrossCallReturnLabel_4:
   \   00001A   8C..         MOV     ?V0 + 8,R4
   \   00001C   ED           MOV     A,R5
   \   00001D   F5..         MOV     ?V0 + 9,A
   \   00001F   33           RLC     A
   \   000020   95E0         SUBB    A,0xE0 /* A   */
   \   000022   F5..         MOV     ?V0 + 10,A
   \   000024   F5..         MOV     ?V0 + 11,A
   \   000026   8C..         MOV     ?V0 + 0,R4
   \   000028   8D..         MOV     ?V0 + 1,R5
   \   00002A   F5..         MOV     ?V0 + 2,A
   \   00002C   F5..         MOV     ?V0 + 3,A
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   79..         MOV     R1,#?V0 + 8
   \   000032   12....       LCALL   ?L_MUL
     49            U32 r2y2 = r2-y2;
   \   000035   85....       MOV     ?V0 + 8,?V0 + 4
   \   000038   85....       MOV     ?V0 + 9,?V0 + 5
   \   00003B   85....       MOV     ?V0 + 10,?V0 + 6
   \   00003E   85....       MOV     ?V0 + 11,?V0 + 7
   \   000041   78..         MOV     R0,#?V0 + 8
   \   000043   79..         MOV     R1,#?V0 + 0
   \   000045   12....       LCALL   ?L_SUB
     50            U32 x2;
     51            if (y2>=r2) {
   \   000048   78..         MOV     R0,#?V0 + 4
   \   00004A   79..         MOV     R1,#?V0 + 0
   \   00004C   12....       LCALL   ?UL_GT
   \   00004F   4009         JC      ??_CalcX_0
     52              *px=0;
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   803B         SJMP    ??_CalcX_1
     53          		return;
     54          	}
     55            /* x2 = r2-y2 */
     56            do {
     57              x++;
   \                     ??_CalcX_0:
   \   00005A   EA           MOV     A,R2
   \   00005B   2401         ADD     A,#0x1
   \   00005D   0A           INC     R2
   \   00005E   EB           MOV     A,R3
   \   00005F   3400         ADDC    A,#0x0
   \   000061   FB           MOV     R3,A
     58              x2 =(U32)x*(U32)x;
     59          	} while (x2 < r2y2);
   \   000062   8A..         MOV     ?V0 + 0,R2
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   33           RLC     A
   \   000067   95E0         SUBB    A,0xE0 /* A   */
   \   000069   F5..         MOV     ?V0 + 2,A
   \   00006B   F5..         MOV     ?V0 + 3,A
   \   00006D   8A..         MOV     ?V0 + 4,R2
   \   00006F   8B..         MOV     ?V0 + 5,R3
   \   000071   F5..         MOV     ?V0 + 6,A
   \   000073   F5..         MOV     ?V0 + 7,A
   \   000075   78..         MOV     R0,#?V0 + 4
   \   000077   79..         MOV     R1,#?V0 + 0
   \   000079   12....       LCALL   ?L_MUL
   \   00007C   78..         MOV     R0,#?V0 + 8
   \   00007E   79..         MOV     R1,#?V0 + 4
   \   000080   12....       LCALL   ?UL_GT
   \   000083   40D5         JC      ??_CalcX_0
     60          	*px = x-1;
   \   000085   EA           MOV     A,R2
   \   000086   24FF         ADD     A,#-0x1
   \   000088   F8           MOV     R0,A
   \   000089   EB           MOV     A,R3
   \   00008A   34FF         ADDC    A,#-0x1
   \   00008C   F9           MOV     R1,A
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E8           MOV     A,R0
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E9           MOV     A,R1
   \                     ??_CalcX_1:
   \   000095   F0           MOVX    @DPTR,A
     61          }
   \   000096   7F0C         MOV     R7,#0xc
   \   000098   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     62          
     63          /*********************************************************************
     64          *
     65          *       _CalcInterSectLin
     66          */
     67          static float _CalcInterSectLin(float y, float y0, float y1, float x0, float x1) {
     68            if (y1==y0) {
     69          	  return y0;
     70          	} else {
     71              float Slope = (x1-x0)/(y1-y0);
     72             return (y-y0)*Slope+x0;
     73          	}
     74          }
     75          
     76          /*********************************************************************
     77          *
     78          *       _DrawArc
     79          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          static void _DrawArc(int x0, int y0, int rx, int ry, int Angle0, int Angle1, int xMul, int yMul) {
   \                     _DrawArc:
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV     A,#-0x42
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   745A         MOV     A,#0x5a
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 8,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 9,A
   \   00002A   745E         MOV     A,#0x5e
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000032   7460         MOV     A,#0x60
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine1 & 0xFFFF
     81            float afx[4];
     82            float afy[4];
     83            float ri = rx-(GUI_Context.PenSize+1.5)/2;
   \                     ??CrossCallReturnLabel_5:
   \   00003A   90....       MOV     DPTR,#GUI_Context + 17
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 0,A
   \   000040   E4           CLR     A
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   F5..         MOV     ?V0 + 2,A
   \   000045   F5..         MOV     ?V0 + 3,A
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?UL_TO_FLT
   \   00004C   90....       MOV     DPTR,#__Constant_3fc00000
   \   00004F   78..         MOV     R0,#?V0 + 12
   \   000051   12....       LCALL   ?L_MOV_X
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   79..         MOV     R1,#?V0 + 12
   \   000058   12....       LCALL   ?FLT_ADD
   \   00005B   90....       MOV     DPTR,#__Constant_3f000000
   \   00005E   78..         MOV     R0,#?V0 + 12
   \   000060   12....       LCALL   ?L_MOV_X
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   79..         MOV     R1,#?V0 + 12
   \   000067   12....       LCALL   ?FLT_MUL
   \   00006A   85....       MOV     ?V0 + 12,?V0 + 8
   \   00006D   E5..         MOV     A,?V0 + 9
   \   00006F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000072   12....       LCALL   ?L_TO_FLT
   \   000075   85....       MOV     ?V0 + 8,?V0 + 12
   \   000078   85....       MOV     ?V0 + 9,?V0 + 13
   \   00007B   85....       MOV     ?V0 + 10,?V0 + 14
   \   00007E   85....       MOV     ?V0 + 11,?V0 + 15
   \   000081   78..         MOV     R0,#?V0 + 8
   \   000083   79..         MOV     R1,#?V0 + 0
   \   000085   12....       LCALL   ?FLT_SUB
     84            float ro = rx+(GUI_Context.PenSize+1.5)/2;
   \   000088   78..         MOV     R0,#?V0 + 12
   \   00008A   79..         MOV     R1,#?V0 + 0
   \   00008C   12....       LCALL   ?FLT_ADD
     85            float fAngle0 = Angle0*3.1415926/180;
   \   00008F   E5..         MOV     A,?V0 + 5
   \   000091   33           RLC     A
   \   000092   95E0         SUBB    A,0xE0 /* A   */
   \   000094   F5..         MOV     ?V0 + 6,A
   \   000096   F5..         MOV     ?V0 + 7,A
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?L_TO_FLT
   \   00009D   90....       MOV     DPTR,#__Constant_40490fda
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?L_MOV_X
   \   0000A5   78..         MOV     R0,#?V0 + 4
   \   0000A7   79..         MOV     R1,#?V0 + 0
   \   0000A9   12....       LCALL   ?FLT_MUL
   \   0000AC   90....       MOV     DPTR,#__Constant_43340000
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?L_MOV_X
   \   0000B4   78..         MOV     R0,#?V0 + 4
   \   0000B6   79..         MOV     R1,#?V0 + 0
   \   0000B8   12....       LCALL   ?FLT_DIV
   \   0000BB   740E         MOV     A,#0xe
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   78..         MOV     R0,#?V0 + 4
   \   0000C2   12....       LCALL   ?L_MOV_TO_X
     86            float fAngle1 = Angle1*3.1415926/180;
   \   0000C5   8A..         MOV     ?V0 + 0,R2
   \   0000C7   EB           MOV     A,R3
   \   0000C8   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000CB   12....       LCALL   ?L_TO_FLT
   \   0000CE   90....       MOV     DPTR,#__Constant_40490fda
   \   0000D1   78..         MOV     R0,#?V0 + 4
   \   0000D3   12....       LCALL   ?L_MOV_X
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   79..         MOV     R1,#?V0 + 4
   \   0000DA   12....       LCALL   ?FLT_MUL
   \   0000DD   90....       MOV     DPTR,#__Constant_43340000
   \   0000E0   78..         MOV     R0,#?V0 + 4
   \   0000E2   12....       LCALL   ?L_MOV_X
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   79..         MOV     R1,#?V0 + 4
   \   0000E9   12....       LCALL   ?FLT_DIV
     87            float sin0 = sin(fAngle0); 
   \   0000EC                ; Setup parameters for call to function sin
   \   0000EC   740E         MOV     A,#0xe
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ?XLOAD_R2345
   \   0000F4   12....       LCALL   ??sin?relay
   \   0000F7   740A         MOV     A,#0xa
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ?XSTORE_R2345
     88            float sin1 = sin(fAngle1); 
   \   0000FF                ; Setup parameters for call to function sin
   \   0000FF   AA..         MOV     R2,?V0 + 0
   \   000101   AB..         MOV     R3,?V0 + 1
   \   000103   AC..         MOV     R4,?V0 + 2
   \   000105   AD..         MOV     R5,?V0 + 3
   \   000107   12....       LCALL   ??sin?relay
   \   00010A   7416         MOV     A,#0x16
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ?XSTORE_R2345
     89            float cos0 = cos(fAngle0); 
   \   000112                ; Setup parameters for call to function cos
   \   000112   740E         MOV     A,#0xe
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?XLOAD_R2345
   \   00011A   12....       LCALL   ??cos?relay
   \   00011D   7412         MOV     A,#0x12
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   12....       LCALL   ?XSTORE_R2345
     90            float cos1 = cos(fAngle1); 
   \   000125                ; Setup parameters for call to function cos
   \   000125   AA..         MOV     R2,?V0 + 0
   \   000127   AB..         MOV     R3,?V0 + 1
   \   000129   AC..         MOV     R4,?V0 + 2
   \   00012B   AD..         MOV     R5,?V0 + 3
   \   00012D   12....       LCALL   ??cos?relay
   \   000130   740E         MOV     A,#0xe
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ?XSTORE_R2345
     91            U32   ri2 = (U32)(ri*ri);
   \   000138   85....       MOV     ?V0 + 0,?V0 + 8
   \   00013B   85....       MOV     ?V0 + 1,?V0 + 9
   \   00013E   85....       MOV     ?V0 + 2,?V0 + 10
   \   000141   85....       MOV     ?V0 + 3,?V0 + 11
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   79..         MOV     R1,#?V0 + 8
   \   000148   12....       LCALL   ?FLT_MUL
   \   00014B   78..         MOV     R0,#?V0 + 0
   \   00014D   12....       LCALL   ?FLT_TO_UL
   \   000150   742E         MOV     A,#0x2e
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?L_MOV_TO_X
     92            U32   ro2 = (U32)(ro*ro);
   \   00015A   85....       MOV     ?V0 + 0,?V0 + 12
   \   00015D   85....       MOV     ?V0 + 1,?V0 + 13
   \   000160   85....       MOV     ?V0 + 2,?V0 + 14
   \   000163   85....       MOV     ?V0 + 3,?V0 + 15
   \   000166   78..         MOV     R0,#?V0 + 0
   \   000168   79..         MOV     R1,#?V0 + 12
   \   00016A   12....       LCALL   ?FLT_MUL
   \   00016D   78..         MOV     R0,#?V0 + 0
   \   00016F   12....       LCALL   ?FLT_TO_UL
   \   000172   742A         MOV     A,#0x2a
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   78..         MOV     R0,#?V0 + 0
   \   000179   12....       LCALL   ?L_MOV_TO_X
     93          	int y, yMax, yMin;
     94          	afy[0] = ri*sin0;
   \   00017C   85....       MOV     ?V0 + 0,?V0 + 8
   \   00017F   85....       MOV     ?V0 + 1,?V0 + 9
   \   000182   85....       MOV     ?V0 + 2,?V0 + 10
   \   000185   85....       MOV     ?V0 + 3,?V0 + 11
   \   000188   740A         MOV     A,#0xa
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   78..         MOV     R0,#?V0 + 4
   \   00018F   12....       LCALL   ?L_MOV_X
   \   000192   78..         MOV     R0,#?V0 + 0
   \   000194   79..         MOV     R1,#?V0 + 4
   \   000196   12....       LCALL   ?FLT_MUL
   \   000199   741A         MOV     A,#0x1a
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   78..         MOV     R0,#?V0 + 0
   \   0001A0   12....       LCALL   ?L_MOV_TO_X
     95          	afy[1] = ro*sin0;
   \   0001A3   85....       MOV     ?V0 + 0,?V0 + 12
   \   0001A6   85....       MOV     ?V0 + 1,?V0 + 13
   \   0001A9   85....       MOV     ?V0 + 2,?V0 + 14
   \   0001AC   85....       MOV     ?V0 + 3,?V0 + 15
   \   0001AF   740A         MOV     A,#0xa
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   78..         MOV     R0,#?V0 + 4
   \   0001B6   12....       LCALL   ?L_MOV_X
   \   0001B9   78..         MOV     R0,#?V0 + 0
   \   0001BB   79..         MOV     R1,#?V0 + 4
   \   0001BD   12....       LCALL   ?FLT_MUL
   \   0001C0   741E         MOV     A,#0x1e
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   78..         MOV     R0,#?V0 + 0
   \   0001C7   12....       LCALL   ?L_MOV_TO_X
     96          	afy[2] = ri*sin1;
   \   0001CA   85....       MOV     ?V0 + 0,?V0 + 8
   \   0001CD   85....       MOV     ?V0 + 1,?V0 + 9
   \   0001D0   85....       MOV     ?V0 + 2,?V0 + 10
   \   0001D3   85....       MOV     ?V0 + 3,?V0 + 11
   \   0001D6   7416         MOV     A,#0x16
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   78..         MOV     R0,#?V0 + 4
   \   0001DD   12....       LCALL   ?L_MOV_X
   \   0001E0   78..         MOV     R0,#?V0 + 0
   \   0001E2   79..         MOV     R1,#?V0 + 4
   \   0001E4   12....       LCALL   ?FLT_MUL
   \   0001E7   7422         MOV     A,#0x22
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   78..         MOV     R0,#?V0 + 0
   \   0001EE   12....       LCALL   ?L_MOV_TO_X
     97          	afy[3] = ro*sin1;
   \   0001F1   85....       MOV     ?V0 + 0,?V0 + 12
   \   0001F4   85....       MOV     ?V0 + 1,?V0 + 13
   \   0001F7   85....       MOV     ?V0 + 2,?V0 + 14
   \   0001FA   85....       MOV     ?V0 + 3,?V0 + 15
   \   0001FD   7416         MOV     A,#0x16
   \   0001FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000202   78..         MOV     R0,#?V0 + 4
   \   000204   12....       LCALL   ?L_MOV_X
   \   000207   78..         MOV     R0,#?V0 + 0
   \   000209   79..         MOV     R1,#?V0 + 4
   \   00020B   12....       LCALL   ?FLT_MUL
   \   00020E   740A         MOV     A,#0xa
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   78..         MOV     R0,#?V0 + 0
   \   000215   12....       LCALL   ?L_MOV_TO_X
   \   000218   740A         MOV     A,#0xa
   \   00021A   12....       LCALL   ?XSTACK_DISP0_8
   \   00021D   12....       LCALL   ?XLOAD_R2345
   \   000220   7426         MOV     A,#0x26
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   12....       LCALL   ?XSTORE_R2345
     98          	afx[0] = ri*cos0;
   \   000228   85....       MOV     ?V0 + 0,?V0 + 8
   \   00022B   85....       MOV     ?V0 + 1,?V0 + 9
   \   00022E   85....       MOV     ?V0 + 2,?V0 + 10
   \   000231   85....       MOV     ?V0 + 3,?V0 + 11
   \   000234   7412         MOV     A,#0x12
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   78..         MOV     R0,#?V0 + 4
   \   00023B   12....       LCALL   ?L_MOV_X
   \   00023E   78..         MOV     R0,#?V0 + 0
   \   000240   79..         MOV     R1,#?V0 + 4
   \   000242   12....       LCALL   ?FLT_MUL
   \   000245   7432         MOV     A,#0x32
   \   000247   12....       LCALL   ?XSTACK_DISP0_8
   \   00024A   78..         MOV     R0,#?V0 + 0
   \   00024C   12....       LCALL   ?L_MOV_TO_X
     99          	afx[1] = ro*cos0;
   \   00024F   85....       MOV     ?V0 + 0,?V0 + 12
   \   000252   85....       MOV     ?V0 + 1,?V0 + 13
   \   000255   85....       MOV     ?V0 + 2,?V0 + 14
   \   000258   85....       MOV     ?V0 + 3,?V0 + 15
   \   00025B   7412         MOV     A,#0x12
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   78..         MOV     R0,#?V0 + 4
   \   000262   12....       LCALL   ?L_MOV_X
   \   000265   78..         MOV     R0,#?V0 + 0
   \   000267   79..         MOV     R1,#?V0 + 4
   \   000269   12....       LCALL   ?FLT_MUL
   \   00026C   7436         MOV     A,#0x36
   \   00026E   12....       LCALL   ?XSTACK_DISP0_8
   \   000271   78..         MOV     R0,#?V0 + 0
   \   000273   12....       LCALL   ?L_MOV_TO_X
    100          	afx[2] = ri*cos1;
   \   000276   740E         MOV     A,#0xe
   \   000278   12....       LCALL   ?XSTACK_DISP0_8
   \   00027B   78..         MOV     R0,#?V0 + 0
   \   00027D   12....       LCALL   ?L_MOV_X
   \   000280   78..         MOV     R0,#?V0 + 8
   \   000282   79..         MOV     R1,#?V0 + 0
   \   000284   12....       LCALL   ?FLT_MUL
   \   000287   743A         MOV     A,#0x3a
   \   000289   12....       LCALL   ?XSTACK_DISP0_8
   \   00028C   78..         MOV     R0,#?V0 + 8
   \   00028E   12....       LCALL   ?L_MOV_TO_X
    101          	afx[3] = ro*cos1;
   \   000291   740E         MOV     A,#0xe
   \   000293   12....       LCALL   ?XSTACK_DISP0_8
   \   000296   78..         MOV     R0,#?V0 + 0
   \   000298   12....       LCALL   ?L_MOV_X
   \   00029B   78..         MOV     R0,#?V0 + 12
   \   00029D   79..         MOV     R1,#?V0 + 0
   \   00029F   12....       LCALL   ?FLT_MUL
   \   0002A2   743E         MOV     A,#0x3e
   \   0002A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A7   78..         MOV     R0,#?V0 + 12
   \   0002A9   12....       LCALL   ?L_MOV_TO_X
    102          	yMin = (int)ceil(afy[0]);
   \   0002AC                ; Setup parameters for call to function ceil
   \   0002AC   741A         MOV     A,#0x1a
   \   0002AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B1   12....       LCALL   ?XLOAD_R2345
   \   0002B4   12....       LCALL   ??ceil?relay
   \   0002B7   12....       LCALL   ?R2345_FLT_TO_L
   \   0002BA   AE..         MOV     R6,?V0 + 0
   \   0002BC   AF..         MOV     R7,?V0 + 1
    103            yMax = (int)floor(afy[3]);
   \   0002BE                ; Setup parameters for call to function floor
   \   0002BE   740A         MOV     A,#0xa
   \   0002C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C3   12....       LCALL   ?XLOAD_R2345
   \   0002C6   12....       LCALL   ??floor?relay
   \   0002C9   12....       LCALL   ?R2345_FLT_TO_L
   \   0002CC   A8..         MOV     R0,?V0 + 0
   \   0002CE   A9..         MOV     R1,?V0 + 1
    104            /* Use Clipping rect to reduce calculation (if possible) */
    105            if (GUI_Context.pClipRect_HL) {
   \   0002D0   90....       MOV     DPTR,#GUI_Context + 15
   \   0002D3   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0002D6   EA           MOV     A,R2
   \   0002D7   4B           ORL     A,R3
   \   0002D8   7003         JNZ     $+5
   \   0002DA   02....       LJMP    ??CrossCallReturnLabel_42 & 0xFFFF
    106              if (yMul ==1) {
   \   0002DD   7464         MOV     A,#0x64
   \   0002DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   6401         XRL     A,#0x1
   \   0002E5   7002         JNZ     ??_DrawArc_0
   \   0002E7   A3           INC     DPTR
   \   0002E8   E0           MOVX    A,@DPTR
   \                     ??_DrawArc_0:
   \   0002E9   7076         JNZ     ??_DrawArc_1
    107                if (yMax > (GUI_Context.pClipRect_HL->y1 -y0))
   \   0002EB   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0002EE   C082         PUSH    DPL
   \   0002F0   C083         PUSH    DPH
   \   0002F2   7402         MOV     A,#0x2
   \   0002F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F7   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0002FA   D083         POP     DPH
   \   0002FC   D082         POP     DPL
   \   0002FE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000301   98           SUBB    A,R0
   \   000302   EB           MOV     A,R3
   \   000303   99           SUBB    A,R1
   \   000304   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000306   65D0         XRL     A,PSW
   \   000308   33           RLC     A
   \   000309   501A         JNC     ??CrossCallReturnLabel_41
    108                  yMax = (GUI_Context.pClipRect_HL->y1 -y0);
   \   00030B   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00030E   A3           INC     DPTR
   \   00030F   A3           INC     DPTR
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   C082         PUSH    DPL
   \   000314   C083         PUSH    DPH
   \   000316   7402         MOV     A,#0x2
   \   000318   12....       LCALL   ?XSTACK_DISP0_8
   \   00031B   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00031E   D083         POP     DPH
   \   000320   D082         POP     DPL
   \   000322   12....       LCALL   ?Subroutine13 & 0xFFFF
    109                if (yMin < (GUI_Context.pClipRect_HL->y0 -y0))
   \                     ??CrossCallReturnLabel_41:
   \   000325   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000328   C082         PUSH    DPL
   \   00032A   C083         PUSH    DPH
   \   00032C   7402         MOV     A,#0x2
   \   00032E   12....       LCALL   ?XSTACK_DISP0_8
   \   000331   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000334   D083         POP     DPH
   \   000336   D082         POP     DPL
   \   000338   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00033B   EE           MOV     A,R6
   \   00033C   9A           SUBB    A,R2
   \   00033D   EF           MOV     A,R7
   \   00033E   9B           SUBB    A,R3
   \   00033F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000341   65D0         XRL     A,PSW
   \   000343   33           RLC     A
   \   000344   4003         JC      $+5
   \   000346   02....       LJMP    ??CrossCallReturnLabel_42 & 0xFFFF
    110                  yMin = (GUI_Context.pClipRect_HL->y0 -y0);
   \   000349   12....       LCALL   ?Subroutine0 & 0xFFFF
    111              }
   \                     ??CrossCallReturnLabel_1:
   \   00034C   C082         PUSH    DPL
   \   00034E   C083         PUSH    DPH
   \   000350   7402         MOV     A,#0x2
   \   000352   12....       LCALL   ?XSTACK_DISP0_8
   \   000355   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000358   D083         POP     DPH
   \   00035A   D082         POP     DPL
   \   00035C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00035F   807F         SJMP    ??CrossCallReturnLabel_42
    112              if (yMul == -1) {
   \                     ??_DrawArc_1:
   \   000361   7464         MOV     A,#0x64
   \   000363   12....       LCALL   ?XSTACK_DISP0_8
   \   000366   E0           MOVX    A,@DPTR
   \   000367   F4           CPL     A
   \   000368   7003         JNZ     ??_DrawArc_2
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   F4           CPL     A
   \                     ??_DrawArc_2:
   \   00036D   7071         JNZ     ??CrossCallReturnLabel_42
    113                if (yMin > (GUI_Context.pClipRect_HL->y1 -y0))
   \   00036F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000372   C082         PUSH    DPL
   \   000374   C083         PUSH    DPH
   \   000376   7402         MOV     A,#0x2
   \   000378   12....       LCALL   ?XSTACK_DISP0_8
   \   00037B   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00037E   D083         POP     DPH
   \   000380   D082         POP     DPL
   \   000382   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000385   9E           SUBB    A,R6
   \   000386   EB           MOV     A,R3
   \   000387   9F           SUBB    A,R7
   \   000388   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00038A   65D0         XRL     A,PSW
   \   00038C   33           RLC     A
   \   00038D   501A         JNC     ??CrossCallReturnLabel_44
    114                  yMin = (GUI_Context.pClipRect_HL->y1 -y0);
   \   00038F   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000392   A3           INC     DPTR
   \   000393   A3           INC     DPTR
   \   000394   A3           INC     DPTR
   \   000395   A3           INC     DPTR
   \   000396   C082         PUSH    DPL
   \   000398   C083         PUSH    DPH
   \   00039A   7402         MOV     A,#0x2
   \   00039C   12....       LCALL   ?XSTACK_DISP0_8
   \   00039F   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0003A2   D083         POP     DPH
   \   0003A4   D082         POP     DPL
   \   0003A6   12....       LCALL   ?Subroutine14 & 0xFFFF
    115                if (yMax < (GUI_Context.pClipRect_HL->y0 -y0))
   \                     ??CrossCallReturnLabel_44:
   \   0003A9   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0003AC   C082         PUSH    DPL
   \   0003AE   C083         PUSH    DPH
   \   0003B0   7402         MOV     A,#0x2
   \   0003B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B5   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0003B8   D083         POP     DPH
   \   0003BA   D082         POP     DPL
   \   0003BC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0003BF   E8           MOV     A,R0
   \   0003C0   9A           SUBB    A,R2
   \   0003C1   E9           MOV     A,R1
   \   0003C2   9B           SUBB    A,R3
   \   0003C3   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0003C5   65D0         XRL     A,PSW
   \   0003C7   33           RLC     A
   \   0003C8   5016         JNC     ??CrossCallReturnLabel_42
    116                  yMax = (GUI_Context.pClipRect_HL->y0 -y0);
   \   0003CA   12....       LCALL   ?Subroutine9 & 0xFFFF
    117              }
    118            }
   \                     ??CrossCallReturnLabel_32:
   \   0003CD   C082         PUSH    DPL
   \   0003CF   C083         PUSH    DPH
   \   0003D1   7402         MOV     A,#0x2
   \   0003D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D6   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0003D9   D083         POP     DPH
   \   0003DB   D082         POP     DPL
   \   0003DD   12....       LCALL   ?Subroutine13 & 0xFFFF
    119            /* Start drawing lines ... */
    120            {
    121            int xMinDisp, xMaxDisp, xMin=0,xMax=0;
   \                     ??CrossCallReturnLabel_42:
   \   0003E0   7408         MOV     A,#0x8
   \   0003E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E5   E4           CLR     A
   \   0003E6   F0           MOVX    @DPTR,A
   \   0003E7   A3           INC     DPTR
   \   0003E8   F0           MOVX    @DPTR,A
   \   0003E9   7406         MOV     A,#0x6
   \   0003EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EE   E4           CLR     A
   \   0003EF   F0           MOVX    @DPTR,A
   \   0003F0   A3           INC     DPTR
   \   0003F1   F0           MOVX    @DPTR,A
    122              for (y=yMax; y>=yMin; y--) {
   \   0003F2   85..82       MOV     DPL,?XSP + 0
   \   0003F5   85..83       MOV     DPH,?XSP + 1
   \   0003F8   E8           MOV     A,R0
   \   0003F9   F0           MOVX    @DPTR,A
   \   0003FA   A3           INC     DPTR
   \   0003FB   E9           MOV     A,R1
   \   0003FC   8062         SJMP    ??_DrawArc_3
    123                _CalcX(&xMin, y, ri2);
    124                _CalcX(&xMax, y, ro2);
    125                if ((float)y< afy[1]) {
    126                  xMaxDisp = (int)_CalcInterSectLin(y,afy[0], afy[1], afx[0], afx[1]);
    127          			} else {
    128                  xMaxDisp = xMax;			
    129          			}
    130                if ((float)y > afy[2]) {
    131                  xMinDisp = (int)_CalcInterSectLin(y,afy[2], afy[3], afx[2], afx[3]);
    132          			} else {
    133                  xMinDisp = xMin;			
    134          			}
    135                if (xMul>0)
    136                  LCD_HL_DrawHLine(xMinDisp+x0, yMul*y+y0, xMaxDisp+x0);
    137                else
    138                  LCD_HL_DrawHLine(-xMaxDisp+x0, yMul*y+y0, -xMinDisp+x0);
   \                     ??_DrawArc_4:
   \   0003FE                ; Setup parameters for call to function LCD_DrawHLine
   \   0003FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000401   E0           MOVX    A,@DPTR
   \   000402   C3           CLR     C
   \   000403   95..         SUBB    A,?V0 + 0
   \   000405   F5..         MOV     ?V0 + 0,A
   \   000407   A3           INC     DPTR
   \   000408   E0           MOVX    A,@DPTR
   \   000409   95..         SUBB    A,?V0 + 1
   \   00040B   F5..         MOV     ?V0 + 1,A
   \   00040D   78..         MOV     R0,#?V0 + 0
   \   00040F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000412   7466         MOV     A,#0x66
   \   000414   12....       LCALL   ?XSTACK_DISP0_8
   \   000417   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00041A   7402         MOV     A,#0x2
   \   00041C   12....       LCALL   ?XSTACK_DISP0_8
   \   00041F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000422   E8           MOV     A,R0
   \   000423   85..F0       MOV     B,?V0 + 0
   \   000426   A4           MUL     AB
   \   000427   C8           XCH     A,R0
   \   000428   ACF0         MOV     R4,B
   \   00042A   85..F0       MOV     B,?V0 + 1
   \   00042D   A4           MUL     AB
   \   00042E   2C           ADD     A,R4
   \   00042F   FC           MOV     R4,A
   \   000430   85..F0       MOV     B,?V0 + 0
   \   000433   E9           MOV     A,R1
   \   000434   A4           MUL     AB
   \   000435   2C           ADD     A,R4
   \   000436   F9           MOV     R1,A
   \   000437   7404         MOV     A,#0x4
   \   000439   12....       LCALL   ?XSTACK_DISP0_8
   \   00043C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00043F   12....       LCALL   ?XSTACK_DISP0_8
   \   000442   E0           MOVX    A,@DPTR
   \   000443   C3           CLR     C
   \   000444   9A           SUBB    A,R2
   \   000445   FA           MOV     R2,A
   \   000446   A3           INC     DPTR
   \   000447   E0           MOVX    A,@DPTR
   \   000448   9B           SUBB    A,R3
   \                     ??_DrawArc_5:
   \   000449   FB           MOV     R3,A
   \   00044A   12....       LCALL   ??LCD_DrawHLine?relay
   \   00044D   7402         MOV     A,#0x2
   \   00044F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000452   85..82       MOV     DPL,?XSP + 0
   \   000455   85..83       MOV     DPH,?XSP + 1
   \   000458   E0           MOVX    A,@DPTR
   \   000459   24FF         ADD     A,#-0x1
   \   00045B   F0           MOVX    @DPTR,A
   \   00045C   A3           INC     DPTR
   \   00045D   E0           MOVX    A,@DPTR
   \   00045E   34FF         ADDC    A,#-0x1
   \                     ??_DrawArc_3:
   \   000460   F0           MOVX    @DPTR,A
   \   000461   85..82       MOV     DPL,?XSP + 0
   \   000464   85..83       MOV     DPH,?XSP + 1
   \   000467   C3           CLR     C
   \   000468   E0           MOVX    A,@DPTR
   \   000469   9E           SUBB    A,R6
   \   00046A   A3           INC     DPTR
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   9F           SUBB    A,R7
   \   00046D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00046F   65D0         XRL     A,PSW
   \   000471   33           RLC     A
   \   000472   5003         JNC     $+5
   \   000474   02....       LJMP    ??_DrawArc_6 & 0xFFFF
   \   000477                ; Setup parameters for call to function _CalcX
   \   000477   742E         MOV     A,#0x2e
   \   000479   12....       LCALL   ?XSTACK_DISP0_8
   \   00047C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00047F   7404         MOV     A,#0x4
   \   000481   12....       LCALL   ?XSTACK_DISP0_8
   \   000484   E0           MOVX    A,@DPTR
   \   000485   FC           MOV     R4,A
   \   000486   A3           INC     DPTR
   \   000487   E0           MOVX    A,@DPTR
   \   000488   FD           MOV     R5,A
   \   000489   740C         MOV     A,#0xc
   \   00048B   12....       LCALL   ?XSTACK_DISP0_8
   \   00048E   AA82         MOV     R2,DPL
   \   000490   AB83         MOV     R3,DPH
   \   000492   12....       LCALL   ??_CalcX?relay
   \   000495   7404         MOV     A,#0x4
   \   000497   12....       LCALL   ?DEALLOC_XSTACK8
   \   00049A                ; Setup parameters for call to function _CalcX
   \   00049A   742A         MOV     A,#0x2a
   \   00049C   12....       LCALL   ?XSTACK_DISP0_8
   \   00049F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0004A2   7404         MOV     A,#0x4
   \   0004A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A7   E0           MOVX    A,@DPTR
   \   0004A8   FC           MOV     R4,A
   \   0004A9   A3           INC     DPTR
   \   0004AA   E0           MOVX    A,@DPTR
   \   0004AB   FD           MOV     R5,A
   \   0004AC   740A         MOV     A,#0xa
   \   0004AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B1   AA82         MOV     R2,DPL
   \   0004B3   AB83         MOV     R3,DPH
   \   0004B5   12....       LCALL   ??_CalcX?relay
   \   0004B8   7404         MOV     A,#0x4
   \   0004BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004BD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0004C0   12....       LCALL   ?L_TO_FLT
   \   0004C3   741E         MOV     A,#0x1e
   \   0004C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C8   78..         MOV     R0,#?V0 + 4
   \   0004CA   12....       LCALL   ?L_MOV_X
   \   0004CD   78..         MOV     R0,#?V0 + 0
   \   0004CF   79..         MOV     R1,#?V0 + 4
   \   0004D1   12....       LCALL   ?FLT_LT
   \   0004D4   4003         JC      $+5
   \   0004D6   02....       LJMP    ??_DrawArc_7 & 0xFFFF
   \   0004D9   7432         MOV     A,#0x32
   \   0004DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004DE   78..         MOV     R0,#?V0 + 0
   \   0004E0   12....       LCALL   ?L_MOV_X
   \   0004E3   741E         MOV     A,#0x1e
   \   0004E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0004E8   78..         MOV     R0,#?V0 + 4
   \   0004EA   12....       LCALL   ?L_MOV_X
   \   0004ED   741A         MOV     A,#0x1a
   \   0004EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F2   78..         MOV     R0,#?V0 + 8
   \   0004F4   12....       LCALL   ?L_MOV_X
   \   0004F7   78..         MOV     R0,#?V0 + 4
   \   0004F9   79..         MOV     R1,#?V0 + 8
   \   0004FB   12....       LCALL   ?FLT_EQ
   \   0004FE   700E         JNZ     ??_DrawArc_8
   \   000500   85....       MOV     ?V0 + 4,?V0 + 8
   \   000503   85....       MOV     ?V0 + 5,?V0 + 9
   \   000506   85....       MOV     ?V0 + 6,?V0 + 10
   \   000509   85....       MOV     ?V0 + 7,?V0 + 11
   \   00050C   804A         SJMP    ??_DrawArc_9
   \                     ??_DrawArc_8:
   \   00050E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000511   12....       LCALL   ?L_TO_FLT
   \   000514   78..         MOV     R0,#?V0 + 12
   \   000516   79..         MOV     R1,#?V0 + 8
   \   000518   12....       LCALL   ?FLT_SUB
   \   00051B   C0..         PUSH    ?V0 + 12
   \   00051D   C0..         PUSH    ?V0 + 13
   \   00051F   C0..         PUSH    ?V0 + 14
   \   000521   C0..         PUSH    ?V0 + 15
   \   000523   7436         MOV     A,#0x36
   \   000525   12....       LCALL   ?XSTACK_DISP0_8
   \   000528   78..         MOV     R0,#?V0 + 12
   \   00052A   12....       LCALL   ?L_MOV_X
   \   00052D   78..         MOV     R0,#?V0 + 12
   \   00052F   79..         MOV     R1,#?V0 + 0
   \   000531   12....       LCALL   ?FLT_SUB
   \   000534   78..         MOV     R0,#?V0 + 4
   \   000536   79..         MOV     R1,#?V0 + 8
   \   000538   12....       LCALL   ?FLT_SUB
   \   00053B   78..         MOV     R0,#?V0 + 12
   \   00053D   79..         MOV     R1,#?V0 + 4
   \   00053F   12....       LCALL   ?FLT_DIV
   \   000542   D0..         POP     ?V0 + 7
   \   000544   D0..         POP     ?V0 + 6
   \   000546   D0..         POP     ?V0 + 5
   \   000548   D0..         POP     ?V0 + 4
   \   00054A   78..         MOV     R0,#?V0 + 4
   \   00054C   79..         MOV     R1,#?V0 + 12
   \   00054E   12....       LCALL   ?FLT_MUL
   \   000551   78..         MOV     R0,#?V0 + 4
   \   000553   79..         MOV     R1,#?V0 + 0
   \   000555   12....       LCALL   ?FLT_ADD
   \                     ??_DrawArc_9:
   \   000558   78..         MOV     R0,#?V0 + 4
   \   00055A   12....       LCALL   ?FLT_TO_L
   \   00055D   AA..         MOV     R2,?V0 + 4
   \   00055F   AB..         MOV     R3,?V0 + 5
   \   000561   8008         SJMP    ??CrossCallReturnLabel_13
   \                     ??_DrawArc_7:
   \   000563   7406         MOV     A,#0x6
   \   000565   12....       LCALL   ?XSTACK_DISP0_8
   \   000568   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00056B   7422         MOV     A,#0x22
   \   00056D   12....       LCALL   ?XSTACK_DISP0_8
   \   000570   78..         MOV     R0,#?V0 + 4
   \   000572   12....       LCALL   ?L_MOV_X
   \   000575   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000578   12....       LCALL   ?L_TO_FLT
   \   00057B   78..         MOV     R0,#?V0 + 4
   \   00057D   79..         MOV     R1,#?V0 + 0
   \   00057F   12....       LCALL   ?FLT_LT
   \   000582   4003         JC      $+5
   \   000584   02....       LJMP    ??_DrawArc_10 & 0xFFFF
   \   000587   743A         MOV     A,#0x3a
   \   000589   12....       LCALL   ?XSTACK_DISP0_8
   \   00058C   78..         MOV     R0,#?V0 + 0
   \   00058E   12....       LCALL   ?L_MOV_X
   \   000591   7426         MOV     A,#0x26
   \   000593   12....       LCALL   ?XSTACK_DISP0_8
   \   000596   78..         MOV     R0,#?V0 + 4
   \   000598   12....       LCALL   ?L_MOV_X
   \   00059B   7422         MOV     A,#0x22
   \   00059D   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A0   78..         MOV     R0,#?V0 + 8
   \   0005A2   12....       LCALL   ?L_MOV_X
   \   0005A5   78..         MOV     R0,#?V0 + 4
   \   0005A7   79..         MOV     R1,#?V0 + 8
   \   0005A9   12....       LCALL   ?FLT_EQ
   \   0005AC   700E         JNZ     ??_DrawArc_11
   \   0005AE   85....       MOV     ?V0 + 4,?V0 + 8
   \   0005B1   85....       MOV     ?V0 + 5,?V0 + 9
   \   0005B4   85....       MOV     ?V0 + 6,?V0 + 10
   \   0005B7   85....       MOV     ?V0 + 7,?V0 + 11
   \   0005BA   804A         SJMP    ??_DrawArc_12
   \                     ??_DrawArc_11:
   \   0005BC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0005BF   12....       LCALL   ?L_TO_FLT
   \   0005C2   78..         MOV     R0,#?V0 + 12
   \   0005C4   79..         MOV     R1,#?V0 + 8
   \   0005C6   12....       LCALL   ?FLT_SUB
   \   0005C9   C0..         PUSH    ?V0 + 12
   \   0005CB   C0..         PUSH    ?V0 + 13
   \   0005CD   C0..         PUSH    ?V0 + 14
   \   0005CF   C0..         PUSH    ?V0 + 15
   \   0005D1   743E         MOV     A,#0x3e
   \   0005D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0005D6   78..         MOV     R0,#?V0 + 12
   \   0005D8   12....       LCALL   ?L_MOV_X
   \   0005DB   78..         MOV     R0,#?V0 + 12
   \   0005DD   79..         MOV     R1,#?V0 + 0
   \   0005DF   12....       LCALL   ?FLT_SUB
   \   0005E2   78..         MOV     R0,#?V0 + 4
   \   0005E4   79..         MOV     R1,#?V0 + 8
   \   0005E6   12....       LCALL   ?FLT_SUB
   \   0005E9   78..         MOV     R0,#?V0 + 12
   \   0005EB   79..         MOV     R1,#?V0 + 4
   \   0005ED   12....       LCALL   ?FLT_DIV
   \   0005F0   D0..         POP     ?V0 + 7
   \   0005F2   D0..         POP     ?V0 + 6
   \   0005F4   D0..         POP     ?V0 + 5
   \   0005F6   D0..         POP     ?V0 + 4
   \   0005F8   78..         MOV     R0,#?V0 + 4
   \   0005FA   79..         MOV     R1,#?V0 + 12
   \   0005FC   12....       LCALL   ?FLT_MUL
   \   0005FF   78..         MOV     R0,#?V0 + 4
   \   000601   79..         MOV     R1,#?V0 + 0
   \   000603   12....       LCALL   ?FLT_ADD
   \                     ??_DrawArc_12:
   \   000606   78..         MOV     R0,#?V0 + 4
   \   000608   12....       LCALL   ?FLT_TO_L
   \   00060B   85....       MOV     ?V0 + 0,?V0 + 4
   \   00060E   85....       MOV     ?V0 + 1,?V0 + 5
   \   000611   8008         SJMP    ??CrossCallReturnLabel_22
   \                     ??_DrawArc_10:
   \   000613   7408         MOV     A,#0x8
   \   000615   12....       LCALL   ?XSTACK_DISP0_8
   \   000618   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00061B   7462         MOV     A,#0x62
   \   00061D   12....       LCALL   ?XSTACK_DISP0_8
   \   000620   C3           CLR     C
   \   000621   E0           MOVX    A,@DPTR
   \   000622   9401         SUBB    A,#0x1
   \   000624   A3           INC     DPTR
   \   000625   E0           MOVX    A,@DPTR
   \   000626   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000629   7404         MOV     A,#0x4
   \   00062B   5003         JNC     $+5
   \   00062D   02....       LJMP    ??_DrawArc_4 & 0xFFFF
   \   000630                ; Setup parameters for call to function LCD_DrawHLine
   \   000630   12....       LCALL   ?XSTACK_DISP0_8
   \   000633   E0           MOVX    A,@DPTR
   \   000634   2A           ADD     A,R2
   \   000635   F5..         MOV     ?V0 + 2,A
   \   000637   A3           INC     DPTR
   \   000638   E0           MOVX    A,@DPTR
   \   000639   3B           ADDC    A,R3
   \   00063A   F5..         MOV     ?V0 + 3,A
   \   00063C   78..         MOV     R0,#?V0 + 2
   \   00063E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000641   7466         MOV     A,#0x66
   \   000643   12....       LCALL   ?XSTACK_DISP0_8
   \   000646   12....       LCALL   ?Subroutine10 & 0xFFFF
    139              }
    140          	}
   \                     ??CrossCallReturnLabel_36:
   \   000649   7402         MOV     A,#0x2
   \   00064B   12....       LCALL   ?XSTACK_DISP0_8
   \   00064E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000651   E8           MOV     A,R0
   \   000652   85..F0       MOV     B,?V0 + 2
   \   000655   A4           MUL     AB
   \   000656   C8           XCH     A,R0
   \   000657   AAF0         MOV     R2,B
   \   000659   85..F0       MOV     B,?V0 + 3
   \   00065C   A4           MUL     AB
   \   00065D   2A           ADD     A,R2
   \   00065E   FA           MOV     R2,A
   \   00065F   85..F0       MOV     B,?V0 + 2
   \   000662   E9           MOV     A,R1
   \   000663   A4           MUL     AB
   \   000664   2A           ADD     A,R2
   \   000665   F9           MOV     R1,A
   \   000666   7404         MOV     A,#0x4
   \   000668   12....       LCALL   ?XSTACK_DISP0_8
   \   00066B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00066E   12....       LCALL   ?XSTACK_DISP0_8
   \   000671   E0           MOVX    A,@DPTR
   \   000672   25..         ADD     A,?V0 + 0
   \   000674   FA           MOV     R2,A
   \   000675   A3           INC     DPTR
   \   000676   E0           MOVX    A,@DPTR
   \   000677   35..         ADDC    A,?V0 + 1
   \   000679   02....       LJMP    ??_DrawArc_5 & 0xFFFF
    141          #if 0  /* Test code */
    142          {
    143            int i;
    144            GUI_SetColor( GUI_WHITE ); 
    145          	for (i=0; i<4; i++)
    146              LCD_HL_DrawPixel(afx[i]+x0, afy[i]+y0);
    147          }
    148          #endif
    149            GUI_USE_PARA(ry);
    150          }
   \                     ??_DrawArc_6:
   \   00067C   7442         MOV     A,#0x42
   \   00067E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000681   7F10         MOV     R7,#0x10
   \   000683   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9A           SUBB    A,R2
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   9B           SUBB    A,R3
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FC           MOV     R4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   FD           MOV     R5,A
   \   000007   7406         MOV     A,#0x6
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   9A           SUBB    A,R2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   9B           SUBB    A,R3
   \   000007   FB           MOV     R3,A
   \   000008   C3           CLR     C
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#GUI_Context + 15
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#GUI_Context + 16
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F5..         MOV     ?V0 + 13,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 14,A
   \   000007   F5..         MOV     ?V0 + 15,A
   \   000009   78..         MOV     R0,#?V0 + 12
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#GUI_Context + 15
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET
    151          
    152          /*********************************************************************
    153          *
    154          *       Public code
    155          *
    156          **********************************************************************
    157          */
    158          /*********************************************************************
    159          *
    160          *       GL_DrawArc
    161          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          void GL_DrawArc(int x0, int y0, int rx, int ry, int a0, int a1) {
   \                     GL_DrawArc:
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 7,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000021   741A         MOV     A,#0x1a
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 10,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 11,A
   \   00002D   741C         MOV     A,#0x1c
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine7 & 0xFFFF
    163            int aEnd;
    164            a0+=360;
   \                     ??CrossCallReturnLabel_27:
   \   000035   E5..         MOV     A,?V0 + 10
   \   000037   2468         ADD     A,#0x68
   \   000039   F5..         MOV     ?V0 + 10,A
   \   00003B   E5..         MOV     A,?V0 + 11
   \   00003D   3401         ADDC    A,#0x1
   \   00003F   F5..         MOV     ?V0 + 11,A
    165          	a1+=360;
   \   000041   E5..         MOV     A,?V0 + 2
   \   000043   2468         ADD     A,#0x68
   \   000045   F5..         MOV     ?V0 + 2,A
   \   000047   E5..         MOV     A,?V0 + 3
   \   000049   3401         ADDC    A,#0x1
   \   00004B   8016         SJMP    ??GL_DrawArc_0
    166          	while (a0>=360) {
    167              a0 -= 360;
   \                     ??GL_DrawArc_1:
   \   00004D   E5..         MOV     A,?V0 + 10
   \   00004F   2498         ADD     A,#-0x68
   \   000051   F5..         MOV     ?V0 + 10,A
   \   000053   E5..         MOV     A,?V0 + 11
   \   000055   34FE         ADDC    A,#-0x2
   \   000057   F5..         MOV     ?V0 + 11,A
    168              a1 -= 360;
   \   000059   E5..         MOV     A,?V0 + 2
   \   00005B   2498         ADD     A,#-0x68
   \   00005D   F5..         MOV     ?V0 + 2,A
   \   00005F   E5..         MOV     A,?V0 + 3
   \   000061   34FE         ADDC    A,#-0x2
   \                     ??GL_DrawArc_0:
   \   000063   F5..         MOV     ?V0 + 3,A
    169          	}
   \   000065   C3           CLR     C
   \   000066   E5..         MOV     A,?V0 + 10
   \   000068   9468         SUBB    A,#0x68
   \   00006A   E5..         MOV     A,?V0 + 11
   \   00006C   9401         SUBB    A,#0x1
   \   00006E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000070   65D0         XRL     A,PSW
   \   000072   33           RLC     A
   \   000073   50D8         JNC     ??GL_DrawArc_1
    170          /* Do first quadrant 0-90 degree */
    171          DoFirst:
    172            if (a1<=0)
   \                     ??GL_DrawArc_2:
   \   000075   C3           CLR     C
   \   000076   E5..         MOV     A,?V0 + 2
   \   000078   9401         SUBB    A,#0x1
   \   00007A   E5..         MOV     A,?V0 + 3
   \   00007C   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00007F   5003         JNC     $+5
   \   000081   02....       LJMP    ??GL_DrawArc_3 & 0xFFFF
    173          	  return;
    174          	if (a0<90) {
   \   000084   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000087   5056         JNC     ??GL_DrawArc_4
    175              if (a0<0)
   \   000089   C3           CLR     C
   \   00008A   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00008D   5006         JNC     ??GL_DrawArc_5
    176          		  a0=0;
   \   00008F   75..00       MOV     ?V0 + 10,#0x0
   \   000092   75..00       MOV     ?V0 + 11,#0x0
    177              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_5:
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V0 + 2
   \   000098   945A         SUBB    A,#0x5a
   \   00009A   E5..         MOV     A,?V0 + 3
   \   00009C   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00009F   5008         JNC     ??GL_DrawArc_6
   \   0000A1   85....       MOV     ?V0 + 8,?V0 + 2
   \   0000A4   85....       MOV     ?V0 + 9,?V0 + 3
   \   0000A7   8006         SJMP    ??GL_DrawArc_7
   \                     ??GL_DrawArc_6:
   \   0000A9   75..5A       MOV     ?V0 + 8,#0x5a
   \   0000AC   75..00       MOV     ?V0 + 9,#0x0
    178              _DrawArc(x0,y0,rx,ry,a0,aEnd, 1, -1);
   \                     ??GL_DrawArc_7:
   \   0000AF                ; Setup parameters for call to function _DrawArc
   \   0000AF   75..FF       MOV     ?V0 + 12,#-0x1
   \   0000B2   75..FF       MOV     ?V0 + 13,#-0x1
   \   0000B5   78..         MOV     R0,#?V0 + 12
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   75..01       MOV     ?V0 + 12,#0x1
   \   0000BD   75..00       MOV     ?V0 + 13,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 12
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   78..         MOV     R0,#?V0 + 8
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CA   78..         MOV     R0,#?V0 + 10
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   78..         MOV     R0,#?V0 + 4
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   78..         MOV     R0,#?V0 + 6
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   12....       LCALL   ?Subroutine19 & 0xFFFF
    179          	}
   \                     ??CrossCallReturnLabel_52:
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
    180            a1-=90;
   \                     ??GL_DrawArc_4:
   \   0000DF   12....       LCALL   ?Subroutine15 & 0xFFFF
    181          	a0-=90;
    182          /* Do second quadrant 90-180 degree */
    183            if (a1<=0)
   \                     ??CrossCallReturnLabel_45:
   \   0000E2   5003         JNC     $+5
   \   0000E4   02....       LJMP    ??GL_DrawArc_3 & 0xFFFF
    184          	  return;
    185          	if (a0<90) {
   \   0000E7   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000EA   5052         JNC     ??GL_DrawArc_8
    186              if (a0<0)
   \   0000EC   C3           CLR     C
   \   0000ED   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000F0   5006         JNC     ??GL_DrawArc_9
    187          		  a0=0;
   \   0000F2   75..00       MOV     ?V0 + 10,#0x0
   \   0000F5   75..00       MOV     ?V0 + 11,#0x0
    188              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_9:
   \   0000F8   C3           CLR     C
   \   0000F9   E5..         MOV     A,?V0 + 2
   \   0000FB   945A         SUBB    A,#0x5a
   \   0000FD   E5..         MOV     A,?V0 + 3
   \   0000FF   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000102   5008         JNC     ??GL_DrawArc_10
   \   000104   85....       MOV     ?V0 + 8,?V0 + 2
   \   000107   85....       MOV     ?V0 + 9,?V0 + 3
   \   00010A   8006         SJMP    ??GL_DrawArc_11
   \                     ??GL_DrawArc_10:
   \   00010C   75..5A       MOV     ?V0 + 8,#0x5a
   \   00010F   75..00       MOV     ?V0 + 9,#0x0
    189              _DrawArc(x0,y0,rx,ry,90-aEnd, 90-a0,-1,-1);
   \                     ??GL_DrawArc_11:
   \   000112                ; Setup parameters for call to function _DrawArc
   \   000112   75..FF       MOV     ?V0 + 12,#-0x1
   \   000115   75..FF       MOV     ?V0 + 13,#-0x1
   \   000118   78..         MOV     R0,#?V0 + 12
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011D   78..         MOV     R0,#?V0 + 12
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   12....       LCALL   ?Subroutine17 & 0xFFFF
    190          	}
   \                     ??CrossCallReturnLabel_48:
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   78..         MOV     R0,#?V0 + 4
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   78..         MOV     R0,#?V0 + 6
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00013B   12....       LCALL   ?DEALLOC_XSTACK8
    191            a1-=90;
   \                     ??GL_DrawArc_8:
   \   00013E   12....       LCALL   ?Subroutine15 & 0xFFFF
    192          	a0-=90;
    193          /* Do third quadrant 180-270 degree */
    194            if (a1<=0)
   \                     ??CrossCallReturnLabel_46:
   \   000141   5003         JNC     $+5
   \   000143   02....       LJMP    ??GL_DrawArc_3 & 0xFFFF
    195          	  return;
    196          	if (a0<90) {
   \   000146   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000149   5056         JNC     ??GL_DrawArc_12
    197              if (a0<0)
   \   00014B   C3           CLR     C
   \   00014C   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00014F   5006         JNC     ??GL_DrawArc_13
    198          		  a0=0;
   \   000151   75..00       MOV     ?V0 + 10,#0x0
   \   000154   75..00       MOV     ?V0 + 11,#0x0
    199              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_13:
   \   000157   C3           CLR     C
   \   000158   E5..         MOV     A,?V0 + 2
   \   00015A   945A         SUBB    A,#0x5a
   \   00015C   E5..         MOV     A,?V0 + 3
   \   00015E   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000161   5008         JNC     ??GL_DrawArc_14
   \   000163   85....       MOV     ?V0 + 8,?V0 + 2
   \   000166   85....       MOV     ?V0 + 9,?V0 + 3
   \   000169   8006         SJMP    ??GL_DrawArc_15
   \                     ??GL_DrawArc_14:
   \   00016B   75..5A       MOV     ?V0 + 8,#0x5a
   \   00016E   75..00       MOV     ?V0 + 9,#0x0
    200              _DrawArc(x0,y0,rx,ry,a0,aEnd, -1, 1);
   \                     ??GL_DrawArc_15:
   \   000171                ; Setup parameters for call to function _DrawArc
   \   000171   75..01       MOV     ?V0 + 12,#0x1
   \   000174   75..00       MOV     ?V0 + 13,#0x0
   \   000177   78..         MOV     R0,#?V0 + 12
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   75..FF       MOV     ?V0 + 12,#-0x1
   \   00017F   75..FF       MOV     ?V0 + 13,#-0x1
   \   000182   78..         MOV     R0,#?V0 + 12
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000187   78..         MOV     R0,#?V0 + 8
   \   000189   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018C   78..         MOV     R0,#?V0 + 10
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000191   78..         MOV     R0,#?V0 + 4
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000196   78..         MOV     R0,#?V0 + 6
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   12....       LCALL   ?Subroutine19 & 0xFFFF
    201          	}
   \                     ??CrossCallReturnLabel_54:
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
    202            a1-=90;
   \                     ??GL_DrawArc_12:
   \   0001A1   12....       LCALL   ?Subroutine15 & 0xFFFF
    203          	a0-=90;
    204          /* Do last quadrant 270-360 degree */
    205            if (a1<=0)
   \                     ??CrossCallReturnLabel_47:
   \   0001A4   405D         JC      ??GL_DrawArc_3
    206          	  return;
    207          	if (a0<90) {
   \   0001A6   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0001A9   5052         JNC     ??GL_DrawArc_16
    208              if (a0<0)
   \   0001AB   C3           CLR     C
   \   0001AC   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001AF   5006         JNC     ??GL_DrawArc_17
    209          		  a0=0;
   \   0001B1   75..00       MOV     ?V0 + 10,#0x0
   \   0001B4   75..00       MOV     ?V0 + 11,#0x0
    210              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_17:
   \   0001B7   C3           CLR     C
   \   0001B8   E5..         MOV     A,?V0 + 2
   \   0001BA   945A         SUBB    A,#0x5a
   \   0001BC   E5..         MOV     A,?V0 + 3
   \   0001BE   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0001C1   5008         JNC     ??GL_DrawArc_18
   \   0001C3   85....       MOV     ?V0 + 8,?V0 + 2
   \   0001C6   85....       MOV     ?V0 + 9,?V0 + 3
   \   0001C9   8006         SJMP    ??GL_DrawArc_19
   \                     ??GL_DrawArc_18:
   \   0001CB   75..5A       MOV     ?V0 + 8,#0x5a
   \   0001CE   75..00       MOV     ?V0 + 9,#0x0
    211              _DrawArc(x0,y0,rx,ry,90-aEnd, 90-a0,1,1);
   \                     ??GL_DrawArc_19:
   \   0001D1                ; Setup parameters for call to function _DrawArc
   \   0001D1   75..01       MOV     ?V0 + 12,#0x1
   \   0001D4   75..00       MOV     ?V0 + 13,#0x0
   \   0001D7   78..         MOV     R0,#?V0 + 12
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   78..         MOV     R0,#?V0 + 12
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E1   12....       LCALL   ?Subroutine17 & 0xFFFF
    212          	}
   \                     ??CrossCallReturnLabel_49:
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E7   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001ED   78..         MOV     R0,#?V0 + 4
   \   0001EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F2   78..         MOV     R0,#?V0 + 6
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0001FA   12....       LCALL   ?DEALLOC_XSTACK8
    213            a1-=90;
   \                     ??GL_DrawArc_16:
   \   0001FD   12....       LCALL   ?Subroutine20 & 0xFFFF
    214          	a0-=90;
    215          goto DoFirst;
   \                     ??CrossCallReturnLabel_56:
   \   000200   02....       LJMP    ??GL_DrawArc_2 & 0xFFFF
   \                     ??GL_DrawArc_3:
   \   000203   7F0E         MOV     R7,#0xe
   \   000205   02....       LJMP    ?BANKED_LEAVE_XDATA
    216          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008   12....       LCALL   ??_DrawArc?relay
   \   00000B   740C         MOV     A,#0xc
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   745A         MOV     A,#0x5a
   \   000002   C3           CLR     C
   \   000003   95..         SUBB    A,?V0 + 8
   \   000005   F5..         MOV     ?V0 + 8,A
   \   000007   E4           CLR     A
   \   000008   95..         SUBB    A,?V0 + 9
   \   00000A   F5..         MOV     ?V0 + 9,A
   \   00000C   78..         MOV     R0,#?V0 + 8
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   745A         MOV     A,#0x5a
   \   000002   C3           CLR     C
   \   000003   95..         SUBB    A,?V0 + 10
   \   000005   F5..         MOV     ?V0 + 12,A
   \   000007   E4           CLR     A
   \   000008   95..         SUBB    A,?V0 + 11
   \   00000A   F5..         MOV     ?V0 + 13,A
   \   00000C   78..         MOV     R0,#?V0 + 12
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 10
   \   000003   945A         SUBB    A,#0x5a
   \   000005                REQUIRE ??Subroutine24_0
   \   000005                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   E5..         MOV     A,?V0 + 11
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   C3           CLR     C
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   9401         SUBB    A,#0x1
   \   000008   E5..         MOV     A,?V0 + 3
   \   00000A   9400         SUBB    A,#0x0
   \   00000C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000E   65D0         XRL     A,PSW
   \   000010   33           RLC     A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   24A6         ADD     A,#-0x5a
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   E5..         MOV     A,?V0 + 10
   \   00000E   24A6         ADD     A,#-0x5a
   \   000010   F5..         MOV     ?V0 + 10,A
   \   000012   E5..         MOV     A,?V0 + 11
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V0 + 11,A
   \   000018   22           RET
    217          
    218          /*********************************************************************
    219          *
    220          *       GUI_DrawArc
    221          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          void GUI_DrawArc(int x0, int y0, int rx, int ry, int a0, int a1) {
   \                     GUI_DrawArc:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00001D   7416         MOV     A,#0x16
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 6,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 7,A
    223            halIntState_t state;
    224            GUI_LOCK(state);
   \   000029   E5A8         MOV     A,0xa8
   \   00002B   FE           MOV     R6,A
   \   00002C   C2AF         CLR     0xa8.7
    225            #if (GUI_WINSUPPORT)
    226              WM_ADDORG(x0,y0);
    227              WM_ITERATE_START(NULL) {
    228            #endif
    229            GL_DrawArc( x0, y0, rx, ry, a0, a1);
   \   00002E                ; Setup parameters for call to function GL_DrawArc
   \   00002E   78..         MOV     R0,#?V0 + 6
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV     R0,#?V0 + 4
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   78..         MOV     R0,#?V0 + 2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   12....       LCALL   ??GL_DrawArc?relay
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    230            #if (GUI_WINSUPPORT)
    231              } WM_ITERATE_END();
    232            #endif
    233            GUI_UNLOCK(state);
   \   00004A   EE           MOV     A,R6
   \   00004B   A2E7         MOV     C,0xE0 /* A   */.7
   \   00004D   92AF         MOV     0xa8.7,C
    234          }
   \   00004F   7F08         MOV     R7,#0x8
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 12,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000E   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3fc00000:
   \   000000   0000C03F     DD 3FC00000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f000000:
   \   000000   0000003F     DD 3F000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40490fda:
   \   000000   DA0F4940     DD 40490FDAH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_43340000:
   \   000000   00003443     DD 43340000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_CalcX?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _CalcX

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??_DrawArc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _DrawArc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GL_DrawArc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GL_DrawArc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GUI_DrawArc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GUI_DrawArc
    235          
    236          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

     Function           ISTACK PSTACK XSTACK
     --------           ------ ------ ------
     GL_DrawArc             0      0     58
       -> _DrawArc          0      0     68
       -> _DrawArc          0      0     68
       -> _DrawArc          0      0     68
       -> _DrawArc          0      0     68
     GUI_DrawArc            0      0     32
       -> GL_DrawArc        0      0     48
     _CalcX                 0      0    114
     _DrawArc               4      0    128
       -> sin               0      0    180
       -> sin               0      0    180
       -> cos               0      0    180
       -> cos               0      0    180
       -> ceil              0      0    180
       -> floor             0      0    180
       -> LCD_DrawHLine     0      0    184
       -> _CalcX            0      0    188
       -> _CalcX            0      0    188
       -> LCD_DrawHLine     0      0    184


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     _A_IEN0                1
     _CalcX               155
     ?Subroutine1           6
     _DrawArc            1670
     ?Subroutine14          9
     ?Subroutine13          9
     ?Subroutine12         10
     ?Subroutine11          4
     ?Subroutine21         10
     ?Subroutine10          6
     ?Subroutine9          14
     ?Subroutine8           5
     ?Subroutine6          15
     ?Subroutine23         12
     ?Subroutine2          15
     ?Subroutine22         12
     ?Subroutine0          14
     ??Subroutine25_0       8
     ?Subroutine7           8
     ?Subroutine4           8
     ?Subroutine5           8
     GL_DrawArc           520
     ?Subroutine19         14
     ?Subroutine18         15
     ?Subroutine17         15
     ?Subroutine16          5
     ??Subroutine24_0       2
     ?Subroutine15         18
     ?Subroutine20         25
     GUI_DrawArc           84
     ?Subroutine3          15
     __Constant_3fc00000    4
     __Constant_3f000000    4
     __Constant_40490fda    4
     __Constant_43340000    4
     ??_CalcX?relay         6
     ??_DrawArc?relay       6
     ??GL_DrawArc?relay     6
     ??GUI_DrawArc?relay    6

 
 2 711 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    16 bytes in segment XDATA_ROM_C
 
 2 735 bytes of CODE  memory
     0 bytes of CONST memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)

Errors: none
Warnings: none
