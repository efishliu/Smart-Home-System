###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2016  16:18:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Cor #
#                          e\LCD_GetEx.c                                      #
#    Command line       =  -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1001                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโ #
#                          ลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5. #
#                          1a\Components\uCGUI\Core\LCD_GetEx.c -D            #
#                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D COOR -D      #
#                          LCD_SUPPORTED -D NV_INIT -lC                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็ #
#                          \WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\Public\ -I             #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Core\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\uCGUI\MultiLayer\ -I              #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \uCGUI\Config\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสม #
#                          ฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pr #
#                          ojects\zstack\Utilities\SerialApp\CC2530DB\..\Coor #
#                          dinator\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Z #
#                          igBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\include\ -I                    #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \hal\target\CC2530EB\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ #
#                          210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Pro #
#                          jects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBe #
#                          eอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zst #
#                          ack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬื #
#                          สมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210 #
#                          \ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projec #
#                          ts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ2 #
#                          10\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ21 #
#                          0\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Proje #
#                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\Zig #
#                          Beeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\z #
#                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\List\LCD_Ge #
#                          tEx.lst                                            #
#    Object file        =  F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WS #
#                          N-CSิดย๋\ZStack-CC2530-2.5.1a\Projects\zstack\Util #
#                          ities\SerialApp\CC2530DB\CoordinatorEB\Obj\LCD_Get #
#                          Ex.r51                                             #
#                                                                             #
#                                                                             #
###############################################################################

F:\นโลฬืสมฯ\ETC-WSNฮ๏มชอ๘นโลฬืสมฯ210\ZigBeeอ๘ย็\WSN-CSิดย๋\ZStack-CC2530-2.5.1a\Components\uCGUI\Core\LCD_GetEx.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              ตC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_GetEx.C
     16          Purpose     : Routines returning info at runtime
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "LCD.h"		          /* interface definitions */
     22          #include "LCD_Private.h"      /* private modul definitions & config */
     23          
     24          /*********************************************************************
     25          *
     26          *       Public code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       LCD_GetXSizeEx
     33          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          int LCD_GetXSizeEx(int LayerIndex) {
   \                     LCD_GetXSizeEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     35            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetXSizeEx_0
     36              return LCD_XSIZE;
   \   000004   7AF0         MOV     R2,#-0x10
   \   000006   8002         SJMP    ??LCD_GetXSizeEx_1
     37            }
     38            #if GUI_NUM_LAYERS > 1
     39              if (LayerIndex == 1) {
     40                return LCD_XSIZE_1;
     41              }
     42            #endif
     43            #if GUI_NUM_LAYERS > 2
     44              if (LayerIndex == 2) {
     45                return LCD_XSIZE_2;
     46              }
     47            #endif
     48            #if GUI_NUM_LAYERS > 3
     49              if (LayerIndex == 3) {
     50                return LCD_XSIZE_3;
     51              }
     52            #endif
     53            #if GUI_NUM_LAYERS > 4
     54              if (LayerIndex == 4) {
     55                return LCD_XSIZE_4;
     56              }
     57            #endif
     58            return 0;
   \                     ??LCD_GetXSizeEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetXSizeEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
     59          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ?BRET
     60          
     61          /*********************************************************************
     62          *
     63          *       LCD_GetYSizeEx
     64          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     65          int LCD_GetYSizeEx(int LayerIndex) {
   \                     LCD_GetYSizeEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     66            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7006         JNZ     ??LCD_GetYSizeEx_0
     67              return LCD_YSIZE;
   \   000004   7A40         MOV     R2,#0x40
   \   000006   7B01         MOV     R3,#0x1
   \   000008   8004         SJMP    ??LCD_GetYSizeEx_1
     68            }
     69            #if GUI_NUM_LAYERS > 1
     70              if (LayerIndex == 1) {
     71                return LCD_YSIZE_1;
     72              }
     73            #endif
     74            #if GUI_NUM_LAYERS > 2
     75              if (LayerIndex == 2) {
     76                return LCD_YSIZE_2;
     77              }
     78            #endif
     79            #if GUI_NUM_LAYERS > 3
     80              if (LayerIndex == 3) {
     81                return LCD_YSIZE_3;
     82              }
     83            #endif
     84            #if GUI_NUM_LAYERS > 4
     85              if (LayerIndex == 4) {
     86                return LCD_YSIZE_4;
     87              }
     88            #endif
     89            return 0;
   \                     ??LCD_GetYSizeEx_0:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \                     ??LCD_GetYSizeEx_1:
   \   00000E   02....       LJMP    ?BRET
     90          }
     91          
     92          /*********************************************************************
     93          *
     94          *       LCD_GetVXSizeEx
     95          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          int LCD_GetVXSizeEx(int LayerIndex) {
   \                     LCD_GetVXSizeEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     97            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetVXSizeEx_0
     98              return LCD_VXSIZE;
   \   000004   7AF0         MOV     R2,#-0x10
   \   000006   8002         SJMP    ??LCD_GetVXSizeEx_1
     99            }
    100            #if GUI_NUM_LAYERS > 1
    101              if (LayerIndex == 1) {
    102                return LCD_VXSIZE_1;
    103              }
    104            #endif
    105            #if GUI_NUM_LAYERS > 2
    106              if (LayerIndex == 2) {
    107                return LCD_VXSIZE_2;
    108              }
    109            #endif
    110            #if GUI_NUM_LAYERS > 3
    111              if (LayerIndex == 3) {
    112                return LCD_VXSIZE_3;
    113              }
    114            #endif
    115            #if GUI_NUM_LAYERS > 4
    116              if (LayerIndex == 4) {
    117                return LCD_VXSIZE_4;
    118              }
    119            #endif
    120            return 0;
   \                     ??LCD_GetVXSizeEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetVXSizeEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    121          }
    122          
    123          /*********************************************************************
    124          *
    125          *       LCD_GetVYSizeEx
    126          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    127          int LCD_GetVYSizeEx(int LayerIndex) {
   \                     LCD_GetVYSizeEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    128            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7006         JNZ     ??LCD_GetVYSizeEx_0
    129              return LCD_VYSIZE;
   \   000004   7A40         MOV     R2,#0x40
   \   000006   7B01         MOV     R3,#0x1
   \   000008   8004         SJMP    ??LCD_GetVYSizeEx_1
    130            }
    131            #if GUI_NUM_LAYERS > 1
    132              if (LayerIndex == 1) {
    133                return LCD_VYSIZE_1;
    134              }
    135            #endif
    136            #if GUI_NUM_LAYERS > 2
    137              if (LayerIndex == 2) {
    138                return LCD_VYSIZE_2;
    139              }
    140            #endif
    141            #if GUI_NUM_LAYERS > 3
    142              if (LayerIndex == 3) {
    143                return LCD_VYSIZE_3;
    144              }
    145            #endif
    146            #if GUI_NUM_LAYERS > 4
    147              if (LayerIndex == 4) {
    148                return LCD_VYSIZE_4;
    149              }
    150            #endif
    151            return 0;
   \                     ??LCD_GetVYSizeEx_0:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \                     ??LCD_GetVYSizeEx_1:
   \   00000E   02....       LJMP    ?BRET
    152          }
    153          
    154          /*********************************************************************
    155          *
    156          *       LCD_GetBitsPerPixelEx
    157          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          int LCD_GetBitsPerPixelEx(int LayerIndex) {
   \                     LCD_GetBitsPerPixelEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    159            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetBitsPerPixelEx_0
    160              return LCD_BITSPERPIXEL;
   \   000004   7A10         MOV     R2,#0x10
   \   000006   8002         SJMP    ??LCD_GetBitsPerPixelEx_1
    161            }
    162            #if GUI_NUM_LAYERS > 1
    163              if (LayerIndex == 1) {
    164                return LCD_BITSPERPIXEL_1;
    165              }
    166            #endif
    167            #if GUI_NUM_LAYERS > 2
    168              if (LayerIndex == 2) {
    169                return LCD_BITSPERPIXEL_2;
    170              }
    171            #endif
    172            #if GUI_NUM_LAYERS > 3
    173              if (LayerIndex == 3) {
    174                return LCD_BITSPERPIXEL_3;
    175              }
    176            #endif
    177            #if GUI_NUM_LAYERS > 4
    178              if (LayerIndex == 4) {
    179                return LCD_BITSPERPIXEL_4;
    180              }
    181            #endif
    182            return 0;
   \                     ??LCD_GetBitsPerPixelEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetBitsPerPixelEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    183          }
    184          
    185          /*********************************************************************
    186          *
    187          *       LCD_GetBitsPerPixel_L0Ex
    188          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          int LCD_GetBitsPerPixel_L0Ex(int LayerIndex) {
   \                     LCD_GetBitsPerPixel_L0Ex:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    190            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetBitsPerPixel_L0Ex_0
    191              return LCD_BITSPERPIXEL_L0;
   \   000004   7A10         MOV     R2,#0x10
   \   000006   8002         SJMP    ??LCD_GetBitsPerPixel_L0Ex_1
    192            }
    193            #if GUI_NUM_LAYERS > 1
    194              if (LayerIndex == 1) {
    195                return LCD_BITSPERPIXEL_L0_1;
    196              }
    197            #endif
    198            #if GUI_NUM_LAYERS > 2
    199              if (LayerIndex == 2) {
    200                return LCD_BITSPERPIXEL_L0_2;
    201              }
    202            #endif
    203            #if GUI_NUM_LAYERS > 3
    204              if (LayerIndex == 3) {
    205                return LCD_BITSPERPIXEL_L0_3;
    206              }
    207            #endif
    208            #if GUI_NUM_LAYERS > 4
    209              if (LayerIndex == 4) {
    210                return LCD_BITSPERPIXEL_L0_4;
    211              }
    212            #endif
    213            return 0;
   \                     ??LCD_GetBitsPerPixel_L0Ex_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetBitsPerPixel_L0Ex_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    214          }
    215          
    216          /*********************************************************************
    217          *
    218          *       LCD_GetNumColorsEx
    219          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          U32 LCD_GetNumColorsEx(int LayerIndex) {
   \                     LCD_GetNumColorsEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    221            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7A00         MOV     R2,#0x0
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7004         JNZ     ??LCD_GetNumColorsEx_0
    222              return LCD_NUM_COLORS;
   \   000008   7C01         MOV     R4,#0x1
   \   00000A   8002         SJMP    ??LCD_GetNumColorsEx_1
    223            }
    224            #if GUI_NUM_LAYERS > 1
    225              if (LayerIndex == 1) {
    226                return LCD_NUM_COLORS_1;
    227              }
    228            #endif
    229            #if GUI_NUM_LAYERS > 2
    230              if (LayerIndex == 2) {
    231                return LCD_NUM_COLORS_2;
    232              }
    233            #endif
    234            #if GUI_NUM_LAYERS > 3
    235              if (LayerIndex == 3) {
    236                return LCD_NUM_COLORS_3;
    237              }
    238            #endif
    239            #if GUI_NUM_LAYERS > 4
    240              if (LayerIndex == 4) {
    241                return LCD_NUM_COLORS_4;
    242              }
    243            #endif
    244            return 0;
   \                     ??LCD_GetNumColorsEx_0:
   \   00000C   7C00         MOV     R4,#0x0
   \                     ??LCD_GetNumColorsEx_1:
   \   00000E                REQUIRE ?Subroutine1
   \   00000E                ; // Fall through to label ?Subroutine1
    245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   02....       LJMP    ?BRET
    246          
    247          /*********************************************************************
    248          *
    249          *       LCD_GetYMagEx
    250          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          int LCD_GetYMagEx(int LayerIndex) {
   \                     LCD_GetYMagEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    252            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetYMagEx_0
    253              return LCD_YMAG;
   \   000004   7A01         MOV     R2,#0x1
   \   000006   8002         SJMP    ??LCD_GetYMagEx_1
    254            }
    255            #if GUI_NUM_LAYERS > 1
    256              if (LayerIndex == 1) {
    257                return LCD_YMAG_1;
    258              }
    259            #endif
    260            #if GUI_NUM_LAYERS > 2
    261              if (LayerIndex == 2) {
    262                return LCD_YMAG_2;
    263              }
    264            #endif
    265            #if GUI_NUM_LAYERS > 3
    266              if (LayerIndex == 3) {
    267                return LCD_YMAG_3;
    268              }
    269            #endif
    270            #if GUI_NUM_LAYERS > 4
    271              if (LayerIndex == 4) {
    272                return LCD_YMAG_4;
    273              }
    274            #endif
    275            return 0;
   \                     ??LCD_GetYMagEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetYMagEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    276          }
    277          
    278          /*********************************************************************
    279          *
    280          *       LCD_GetXMagEx
    281          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          int LCD_GetXMagEx(int LayerIndex) {
   \                     LCD_GetXMagEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    283            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetXMagEx_0
    284              return LCD_XMAG;
   \   000004   7A01         MOV     R2,#0x1
   \   000006   8002         SJMP    ??LCD_GetXMagEx_1
    285            }
    286            #if GUI_NUM_LAYERS > 1
    287              if (LayerIndex == 1) {
    288                return LCD_XMAG_1;
    289              }
    290            #endif
    291            #if GUI_NUM_LAYERS > 2
    292              if (LayerIndex == 2) {
    293                return LCD_XMAG_2;
    294              }
    295            #endif
    296            #if GUI_NUM_LAYERS > 3
    297              if (LayerIndex == 3) {
    298                return LCD_XMAG_3;
    299              }
    300            #endif
    301            #if GUI_NUM_LAYERS > 4
    302              if (LayerIndex == 4) {
    303                return LCD_XMAG_4;
    304              }
    305            #endif
    306            return 0;
   \                     ??LCD_GetXMagEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetXMagEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    307          }
    308          
    309          /*********************************************************************
    310          *
    311          *       LCD_GetFixedPaletteEx
    312          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          I32 LCD_GetFixedPaletteEx(int LayerIndex) {
   \                     LCD_GetFixedPaletteEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    314            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7006         JNZ     ??LCD_GetFixedPaletteEx_0
    315              return LCD_FIXEDPALETTE;
   \   000004   7A35         MOV     R2,#0x35
   \   000006   7B02         MOV     R3,#0x2
   \   000008   8004         SJMP    ??LCD_GetFixedPaletteEx_1
    316            }
    317            #if GUI_NUM_LAYERS > 1
    318              if (LayerIndex == 1) {
    319                return LCD_FIXEDPALETTE_1;
    320              }
    321            #endif
    322            #if GUI_NUM_LAYERS > 2
    323              if (LayerIndex == 2) {
    324                return LCD_FIXEDPALETTE_2;
    325              }
    326            #endif
    327            #if GUI_NUM_LAYERS > 3
    328              if (LayerIndex == 3) {
    329                return LCD_FIXEDPALETTE_3;
    330              }
    331            #endif
    332            #if GUI_NUM_LAYERS > 4
    333              if (LayerIndex == 4) {
    334                return LCD_FIXEDPALETTE_4;
    335              }
    336            #endif
    337            return 0;
   \                     ??LCD_GetFixedPaletteEx_0:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \                     ??LCD_GetFixedPaletteEx_1:
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   80..         SJMP    ?Subroutine1
    338          }
    339          
    340          /*********************************************************************
    341          *
    342          *       LCD_GetMirrorXEx
    343          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A00         MOV     R2,#0x0
   \   000002                REQUIRE ??Subroutine2_0
   \   000002                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          int LCD_GetMirrorXEx(int LayerIndex) {
   \                     LCD_GetMirrorXEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    345            if (LayerIndex == 0) {
    346              return LCD_MIRROR_X;
   \   000000   80..         SJMP    ?Subroutine0
    347            }
    348            #if GUI_NUM_LAYERS > 1
    349              if (LayerIndex == 1) {
    350                return LCD_MIRROR_X_1;
    351              }
    352            #endif
    353            #if GUI_NUM_LAYERS > 2
    354              if (LayerIndex == 2) {
    355                return LCD_MIRROR_X_2;
    356              }
    357            #endif
    358            #if GUI_NUM_LAYERS > 3
    359              if (LayerIndex == 3) {
    360                return LCD_MIRROR_X_3;
    361              }
    362            #endif
    363            #if GUI_NUM_LAYERS > 4
    364              if (LayerIndex == 4) {
    365                return LCD_MIRROR_X_4;
    366              }
    367            #endif
    368            return 0;
    369          }
    370          
    371          /*********************************************************************
    372          *
    373          *       LCD_GetMirrorYEx
    374          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          int LCD_GetMirrorYEx(int LayerIndex) {
   \                     LCD_GetMirrorYEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    376            if (LayerIndex == 0) {
    377              return LCD_MIRROR_Y;
   \   000000   80..         SJMP    ?Subroutine0
    378            }
    379            #if GUI_NUM_LAYERS > 1
    380              if (LayerIndex == 1) {
    381                return LCD_MIRROR_Y_1;
    382              }
    383            #endif
    384            #if GUI_NUM_LAYERS > 2
    385              if (LayerIndex == 2) {
    386                return LCD_MIRROR_Y_2;
    387              }
    388            #endif
    389            #if GUI_NUM_LAYERS > 3
    390              if (LayerIndex == 3) {
    391                return LCD_MIRROR_Y_3;
    392              }
    393            #endif
    394            #if GUI_NUM_LAYERS > 4
    395              if (LayerIndex == 4) {
    396                return LCD_MIRROR_Y_4;
    397              }
    398            #endif
    399            return 0;
    400          }
    401          
    402          /*********************************************************************
    403          *
    404          *       LCD_GetSwapXYEx
    405          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          int LCD_GetSwapXYEx(int LayerIndex) {
   \                     LCD_GetSwapXYEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    407            if (LayerIndex == 0) {
    408              return LCD_SWAP_XY;
   \   000000   80..         SJMP    ?Subroutine0
    409            }
    410            #if GUI_NUM_LAYERS > 1
    411              if (LayerIndex == 1) {
    412                return LCD_SWAP_XY_1;
    413              }
    414            #endif
    415            #if GUI_NUM_LAYERS > 2
    416              if (LayerIndex == 2) {
    417                return LCD_SWAP_XY_2;
    418              }
    419            #endif
    420            #if GUI_NUM_LAYERS > 3
    421              if (LayerIndex == 3) {
    422                return LCD_SWAP_XY_3;
    423              }
    424            #endif
    425            #if GUI_NUM_LAYERS > 4
    426              if (LayerIndex == 4) {
    427                return LCD_SWAP_XY_4;
    428              }
    429            #endif
    430            return 0;
    431          }
    432          
    433          /*********************************************************************
    434          *
    435          *       LCD_GetSwapRBEx
    436          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          int LCD_GetSwapRBEx(int LayerIndex) {
   \                     LCD_GetSwapRBEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    438            if (LayerIndex == 0) {
   \   000000   EA           MOV     A,R2
   \   000001   4B           ORL     A,R3
   \   000002   7004         JNZ     ??LCD_GetSwapRBEx_0
    439              return LCD_SWAP_RB;
   \   000004   7A01         MOV     R2,#0x1
   \   000006   8002         SJMP    ??LCD_GetSwapRBEx_1
    440            }
    441            #if GUI_NUM_LAYERS > 1
    442              if (LayerIndex == 1) {
    443                return LCD_SWAP_RB_1;
    444              }
    445            #endif
    446            #if GUI_NUM_LAYERS > 2
    447              if (LayerIndex == 2) {
    448                return LCD_SWAP_RB_2;
    449              }
    450            #endif
    451            #if GUI_NUM_LAYERS > 3
    452              if (LayerIndex == 3) {
    453                return LCD_SWAP_RB_3;
    454              }
    455            #endif
    456            #if GUI_NUM_LAYERS > 4
    457              if (LayerIndex == 4) {
    458                return LCD_SWAP_RB_4;
    459              }
    460            #endif
    461            return 0;
   \                     ??LCD_GetSwapRBEx_0:
   \   000008   7A00         MOV     R2,#0x0
   \                     ??LCD_GetSwapRBEx_1:
   \   00000A   80..         SJMP    ??Subroutine2_0
    462          }
    463          
    464          /*********************************************************************
    465          *
    466          *       LCD_GetDeltaModeEx
    467          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          int LCD_GetDeltaModeEx(int LayerIndex) {
   \                     LCD_GetDeltaModeEx:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    469            if (LayerIndex == 0) {
    470              return LCD_DELTA_MODE;
   \   000000   02....       LJMP    ?Subroutine0 & 0xFFFF
    471            }
    472            #if GUI_NUM_LAYERS > 1
    473              if (LayerIndex == 1) {
    474                return LCD_DELTA_MODE_1;
    475              }
    476            #endif
    477            #if GUI_NUM_LAYERS > 2
    478              if (LayerIndex == 2) {
    479                return LCD_DELTA_MODE_2;
    480              }
    481            #endif
    482            #if GUI_NUM_LAYERS > 3
    483              if (LayerIndex == 3) {
    484                return LCD_DELTA_MODE_3;
    485              }
    486            #endif
    487            #if GUI_NUM_LAYERS > 4
    488              if (LayerIndex == 4) {
    489                return LCD_DELTA_MODE_4;
    490              }
    491            #endif
    492            return 0;
    493          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetXSizeEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetXSizeEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetYSizeEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetYSizeEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetVXSizeEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetVXSizeEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetVYSizeEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetVYSizeEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetBitsPerPixelEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetBitsPerPixelEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetBitsPerPixel_L0Ex?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetBitsPerPixel_L0Ex

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetNumColorsEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetNumColorsEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetYMagEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetYMagEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetXMagEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetXMagEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetFixedPaletteEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetFixedPaletteEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetMirrorXEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetMirrorXEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetMirrorYEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetMirrorYEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetSwapXYEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetSwapXYEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetSwapRBEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetSwapRBEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_GetDeltaModeEx?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_GetDeltaModeEx
    494          
    495          /************************* End of file ******************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     LCD_GetBitsPerPixelEx        0      0      0
     LCD_GetBitsPerPixel_L0Ex     0      0      0
     LCD_GetDeltaModeEx           0      0      0
     LCD_GetFixedPaletteEx        0      0      0
     LCD_GetMirrorXEx             0      0      0
     LCD_GetMirrorYEx             0      0      0
     LCD_GetNumColorsEx           0      0      0
     LCD_GetSwapRBEx              0      0      0
     LCD_GetSwapXYEx              0      0      0
     LCD_GetVXSizeEx              0      0      0
     LCD_GetVYSizeEx              0      0      0
     LCD_GetXMagEx                0      0      0
     LCD_GetXSizeEx               0      0      0
     LCD_GetYMagEx                0      0      0
     LCD_GetYSizeEx               0      0      0


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     LCD_GetXSizeEx                     12
     ??Subroutine2_0                     5
     LCD_GetYSizeEx                     17
     LCD_GetVXSizeEx                    12
     LCD_GetVYSizeEx                    17
     LCD_GetBitsPerPixelEx              12
     LCD_GetBitsPerPixel_L0Ex           12
     LCD_GetNumColorsEx                 14
     ?Subroutine1                        5
     LCD_GetYMagEx                      12
     LCD_GetXMagEx                      12
     LCD_GetFixedPaletteEx              18
     ?Subroutine0                        2
     LCD_GetMirrorXEx                    2
     LCD_GetMirrorYEx                    2
     LCD_GetSwapXYEx                     2
     LCD_GetSwapRBEx                    12
     LCD_GetDeltaModeEx                  3
     ??LCD_GetXSizeEx?relay              6
     ??LCD_GetYSizeEx?relay              6
     ??LCD_GetVXSizeEx?relay             6
     ??LCD_GetVYSizeEx?relay             6
     ??LCD_GetBitsPerPixelEx?relay       6
     ??LCD_GetBitsPerPixel_L0Ex?relay    6
     ??LCD_GetNumColorsEx?relay          6
     ??LCD_GetYMagEx?relay               6
     ??LCD_GetXMagEx?relay               6
     ??LCD_GetFixedPaletteEx?relay       6
     ??LCD_GetMirrorXEx?relay            6
     ??LCD_GetMirrorYEx?relay            6
     ??LCD_GetSwapXYEx?relay             6
     ??LCD_GetSwapRBEx?relay             6
     ??LCD_GetDeltaModeEx?relay          6

 
 171 bytes in segment BANKED_CODE
  90 bytes in segment BANK_RELAYS
 
 261 bytes of CODE memory

Errors: none
Warnings: none
